'------------------------------------------------------------------------------
' <auto-generated>
'     此代码由工具生成。
'     运行时版本:2.0.50727.5420
'
'     对此文件的更改可能会导致不正确的行为，并且如果
'     重新生成代码，这些更改将会丢失。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("NmetalSampInventoryWeightCheck"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class NmetalSampInventoryWeightCheck
    Inherits Global.System.Data.DataSet
    
    Private tableNmetalSampInventoryWeightCheckMain As NmetalSampInventoryWeightCheckMainDataTable
    
    Private tableNmetalSampInventoryWeightCheckSub As NmetalSampInventoryWeightCheckSubDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("NmetalSampInventoryWeightCheckMain")) Is Nothing) Then
                MyBase.Tables.Add(New NmetalSampInventoryWeightCheckMainDataTable(ds.Tables("NmetalSampInventoryWeightCheckMain")))
            End If
            If (Not (ds.Tables("NmetalSampInventoryWeightCheckSub")) Is Nothing) Then
                MyBase.Tables.Add(New NmetalSampInventoryWeightCheckSubDataTable(ds.Tables("NmetalSampInventoryWeightCheckSub")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NmetalSampInventoryWeightCheckMain() As NmetalSampInventoryWeightCheckMainDataTable
        Get
            Return Me.tableNmetalSampInventoryWeightCheckMain
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NmetalSampInventoryWeightCheckSub() As NmetalSampInventoryWeightCheckSubDataTable
        Get
            Return Me.tableNmetalSampInventoryWeightCheckSub
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As NmetalSampInventoryWeightCheck = CType(MyBase.Clone,NmetalSampInventoryWeightCheck)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("NmetalSampInventoryWeightCheckMain")) Is Nothing) Then
                MyBase.Tables.Add(New NmetalSampInventoryWeightCheckMainDataTable(ds.Tables("NmetalSampInventoryWeightCheckMain")))
            End If
            If (Not (ds.Tables("NmetalSampInventoryWeightCheckSub")) Is Nothing) Then
                MyBase.Tables.Add(New NmetalSampInventoryWeightCheckSubDataTable(ds.Tables("NmetalSampInventoryWeightCheckSub")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableNmetalSampInventoryWeightCheckMain = CType(MyBase.Tables("NmetalSampInventoryWeightCheckMain"),NmetalSampInventoryWeightCheckMainDataTable)
        If (initTable = true) Then
            If (Not (Me.tableNmetalSampInventoryWeightCheckMain) Is Nothing) Then
                Me.tableNmetalSampInventoryWeightCheckMain.InitVars
            End If
        End If
        Me.tableNmetalSampInventoryWeightCheckSub = CType(MyBase.Tables("NmetalSampInventoryWeightCheckSub"),NmetalSampInventoryWeightCheckSubDataTable)
        If (initTable = true) Then
            If (Not (Me.tableNmetalSampInventoryWeightCheckSub) Is Nothing) Then
                Me.tableNmetalSampInventoryWeightCheckSub.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "NmetalSampInventoryWeightCheck"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/NmetalSampInventoryWeightCheck.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableNmetalSampInventoryWeightCheckMain = New NmetalSampInventoryWeightCheckMainDataTable
        MyBase.Tables.Add(Me.tableNmetalSampInventoryWeightCheckMain)
        Me.tableNmetalSampInventoryWeightCheckSub = New NmetalSampInventoryWeightCheckSubDataTable
        MyBase.Tables.Add(Me.tableNmetalSampInventoryWeightCheckSub)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeNmetalSampInventoryWeightCheckMain() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeNmetalSampInventoryWeightCheckSub() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As NmetalSampInventoryWeightCheck = New NmetalSampInventoryWeightCheck
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub NmetalSampInventoryWeightCheckMainRowChangeEventHandler(ByVal sender As Object, ByVal e As NmetalSampInventoryWeightCheckMainRowChangeEvent)
    
    Public Delegate Sub NmetalSampInventoryWeightCheckSubRowChangeEventHandler(ByVal sender As Object, ByVal e As NmetalSampInventoryWeightCheckSubRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class NmetalSampInventoryWeightCheckMainDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAutoID As Global.System.Data.DataColumn
        
        Private columnCH_NO As Global.System.Data.DataColumn
        
        Private columnDepID As Global.System.Data.DataColumn
        
        Private columnCH_Date As Global.System.Data.DataColumn
        
        Private columnCH_Action As Global.System.Data.DataColumn
        
        Private columnCH_Remark As Global.System.Data.DataColumn
        
        Private columnAddAction As Global.System.Data.DataColumn
        
        Private columnAddDate As Global.System.Data.DataColumn
        
        Private columnModifyUserID As Global.System.Data.DataColumn
        
        Private columnModifyDate As Global.System.Data.DataColumn
        
        Private columnCheckStatus As Global.System.Data.DataColumn
        
        Private columnCheckAction As Global.System.Data.DataColumn
        
        Private columnCheckDate As Global.System.Data.DataColumn
        
        Private columnCheckRemark As Global.System.Data.DataColumn
        
        Private columnCheckWastWeight As Global.System.Data.DataColumn
        
        Private columnCheckType As Global.System.Data.DataColumn
        
        Private columnCheckDownRate As Global.System.Data.DataColumn
        
        Private columnCheckUpdate As Global.System.Data.DataColumn
        
        Private columnDepName As Global.System.Data.DataColumn
        
        Private columnCHAction_Name As Global.System.Data.DataColumn
        
        Private columnAdd_Name As Global.System.Data.DataColumn
        
        Private columnModify_Name As Global.System.Data.DataColumn
        
        Private columnCheck_Name As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "NmetalSampInventoryWeightCheckMain"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AutoIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAutoID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CH_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCH_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CH_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCH_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CH_ActionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCH_Action
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CH_RemarkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCH_Remark
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddActionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddAction
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModifyUserIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModifyUserID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModifyDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModifyDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CheckStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCheckStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CheckActionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCheckAction
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CheckDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCheckDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CheckRemarkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCheckRemark
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CheckWastWeightColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCheckWastWeight
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CheckTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCheckType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CheckDownRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCheckDownRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CheckUpdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCheckUpdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CHAction_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHAction_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Add_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdd_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Modify_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModify_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Check_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCheck_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As NmetalSampInventoryWeightCheckMainRow
            Get
                Return CType(Me.Rows(index),NmetalSampInventoryWeightCheckMainRow)
            End Get
        End Property
        
        Public Event NmetalSampInventoryWeightCheckMainRowChanging As NmetalSampInventoryWeightCheckMainRowChangeEventHandler
        
        Public Event NmetalSampInventoryWeightCheckMainRowChanged As NmetalSampInventoryWeightCheckMainRowChangeEventHandler
        
        Public Event NmetalSampInventoryWeightCheckMainRowDeleting As NmetalSampInventoryWeightCheckMainRowChangeEventHandler
        
        Public Event NmetalSampInventoryWeightCheckMainRowDeleted As NmetalSampInventoryWeightCheckMainRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddNmetalSampInventoryWeightCheckMainRow(ByVal row As NmetalSampInventoryWeightCheckMainRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddNmetalSampInventoryWeightCheckMainRow( _
                    ByVal AutoID As String,  _
                    ByVal CH_NO As String,  _
                    ByVal DepID As String,  _
                    ByVal CH_Date As String,  _
                    ByVal CH_Action As String,  _
                    ByVal CH_Remark As String,  _
                    ByVal AddAction As String,  _
                    ByVal AddDate As String,  _
                    ByVal ModifyUserID As String,  _
                    ByVal ModifyDate As String,  _
                    ByVal CheckStatus As String,  _
                    ByVal CheckAction As String,  _
                    ByVal CheckDate As String,  _
                    ByVal CheckRemark As String,  _
                    ByVal CheckWastWeight As String,  _
                    ByVal CheckType As String,  _
                    ByVal CheckDownRate As String,  _
                    ByVal CheckUpdate As String,  _
                    ByVal DepName As String,  _
                    ByVal CHAction_Name As String,  _
                    ByVal Add_Name As String,  _
                    ByVal Modify_Name As String,  _
                    ByVal Check_Name As String) As NmetalSampInventoryWeightCheckMainRow
            Dim rowNmetalSampInventoryWeightCheckMainRow As NmetalSampInventoryWeightCheckMainRow = CType(Me.NewRow,NmetalSampInventoryWeightCheckMainRow)
            Dim columnValuesArray() As Object = New Object() {AutoID, CH_NO, DepID, CH_Date, CH_Action, CH_Remark, AddAction, AddDate, ModifyUserID, ModifyDate, CheckStatus, CheckAction, CheckDate, CheckRemark, CheckWastWeight, CheckType, CheckDownRate, CheckUpdate, DepName, CHAction_Name, Add_Name, Modify_Name, Check_Name}
            rowNmetalSampInventoryWeightCheckMainRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowNmetalSampInventoryWeightCheckMainRow)
            Return rowNmetalSampInventoryWeightCheckMainRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As NmetalSampInventoryWeightCheckMainDataTable = CType(MyBase.Clone,NmetalSampInventoryWeightCheckMainDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New NmetalSampInventoryWeightCheckMainDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAutoID = MyBase.Columns("AutoID")
            Me.columnCH_NO = MyBase.Columns("CH_NO")
            Me.columnDepID = MyBase.Columns("DepID")
            Me.columnCH_Date = MyBase.Columns("CH_Date")
            Me.columnCH_Action = MyBase.Columns("CH_Action")
            Me.columnCH_Remark = MyBase.Columns("CH_Remark")
            Me.columnAddAction = MyBase.Columns("AddAction")
            Me.columnAddDate = MyBase.Columns("AddDate")
            Me.columnModifyUserID = MyBase.Columns("ModifyUserID")
            Me.columnModifyDate = MyBase.Columns("ModifyDate")
            Me.columnCheckStatus = MyBase.Columns("CheckStatus")
            Me.columnCheckAction = MyBase.Columns("CheckAction")
            Me.columnCheckDate = MyBase.Columns("CheckDate")
            Me.columnCheckRemark = MyBase.Columns("CheckRemark")
            Me.columnCheckWastWeight = MyBase.Columns("CheckWastWeight")
            Me.columnCheckType = MyBase.Columns("CheckType")
            Me.columnCheckDownRate = MyBase.Columns("CheckDownRate")
            Me.columnCheckUpdate = MyBase.Columns("CheckUpdate")
            Me.columnDepName = MyBase.Columns("DepName")
            Me.columnCHAction_Name = MyBase.Columns("CHAction_Name")
            Me.columnAdd_Name = MyBase.Columns("Add_Name")
            Me.columnModify_Name = MyBase.Columns("Modify_Name")
            Me.columnCheck_Name = MyBase.Columns("Check_Name")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAutoID = New Global.System.Data.DataColumn("AutoID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAutoID)
            Me.columnCH_NO = New Global.System.Data.DataColumn("CH_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCH_NO)
            Me.columnDepID = New Global.System.Data.DataColumn("DepID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepID)
            Me.columnCH_Date = New Global.System.Data.DataColumn("CH_Date", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCH_Date)
            Me.columnCH_Action = New Global.System.Data.DataColumn("CH_Action", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCH_Action)
            Me.columnCH_Remark = New Global.System.Data.DataColumn("CH_Remark", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCH_Remark)
            Me.columnAddAction = New Global.System.Data.DataColumn("AddAction", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddAction)
            Me.columnAddDate = New Global.System.Data.DataColumn("AddDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddDate)
            Me.columnModifyUserID = New Global.System.Data.DataColumn("ModifyUserID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModifyUserID)
            Me.columnModifyDate = New Global.System.Data.DataColumn("ModifyDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModifyDate)
            Me.columnCheckStatus = New Global.System.Data.DataColumn("CheckStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCheckStatus)
            Me.columnCheckAction = New Global.System.Data.DataColumn("CheckAction", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCheckAction)
            Me.columnCheckDate = New Global.System.Data.DataColumn("CheckDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCheckDate)
            Me.columnCheckRemark = New Global.System.Data.DataColumn("CheckRemark", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCheckRemark)
            Me.columnCheckWastWeight = New Global.System.Data.DataColumn("CheckWastWeight", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCheckWastWeight)
            Me.columnCheckType = New Global.System.Data.DataColumn("CheckType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCheckType)
            Me.columnCheckDownRate = New Global.System.Data.DataColumn("CheckDownRate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCheckDownRate)
            Me.columnCheckUpdate = New Global.System.Data.DataColumn("CheckUpdate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCheckUpdate)
            Me.columnDepName = New Global.System.Data.DataColumn("DepName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepName)
            Me.columnCHAction_Name = New Global.System.Data.DataColumn("CHAction_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHAction_Name)
            Me.columnAdd_Name = New Global.System.Data.DataColumn("Add_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdd_Name)
            Me.columnModify_Name = New Global.System.Data.DataColumn("Modify_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModify_Name)
            Me.columnCheck_Name = New Global.System.Data.DataColumn("Check_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCheck_Name)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewNmetalSampInventoryWeightCheckMainRow() As NmetalSampInventoryWeightCheckMainRow
            Return CType(Me.NewRow,NmetalSampInventoryWeightCheckMainRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New NmetalSampInventoryWeightCheckMainRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(NmetalSampInventoryWeightCheckMainRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NmetalSampInventoryWeightCheckMainRowChangedEvent) Is Nothing) Then
                RaiseEvent NmetalSampInventoryWeightCheckMainRowChanged(Me, New NmetalSampInventoryWeightCheckMainRowChangeEvent(CType(e.Row,NmetalSampInventoryWeightCheckMainRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NmetalSampInventoryWeightCheckMainRowChangingEvent) Is Nothing) Then
                RaiseEvent NmetalSampInventoryWeightCheckMainRowChanging(Me, New NmetalSampInventoryWeightCheckMainRowChangeEvent(CType(e.Row,NmetalSampInventoryWeightCheckMainRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NmetalSampInventoryWeightCheckMainRowDeletedEvent) Is Nothing) Then
                RaiseEvent NmetalSampInventoryWeightCheckMainRowDeleted(Me, New NmetalSampInventoryWeightCheckMainRowChangeEvent(CType(e.Row,NmetalSampInventoryWeightCheckMainRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NmetalSampInventoryWeightCheckMainRowDeletingEvent) Is Nothing) Then
                RaiseEvent NmetalSampInventoryWeightCheckMainRowDeleting(Me, New NmetalSampInventoryWeightCheckMainRowChangeEvent(CType(e.Row,NmetalSampInventoryWeightCheckMainRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveNmetalSampInventoryWeightCheckMainRow(ByVal row As NmetalSampInventoryWeightCheckMainRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As NmetalSampInventoryWeightCheck = New NmetalSampInventoryWeightCheck
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "NmetalSampInventoryWeightCheckMainDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class NmetalSampInventoryWeightCheckSubDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAutoID As Global.System.Data.DataColumn
        
        Private columnCH_NO As Global.System.Data.DataColumn
        
        Private columnCode_ID As Global.System.Data.DataColumn
        
        Private columnStatusType As Global.System.Data.DataColumn
        
        Private columnD_ID As Global.System.Data.DataColumn
        
        Private columnSO_SampleID As Global.System.Data.DataColumn
        
        Private columnCH_QQty As Global.System.Data.DataColumn
        
        Private columnCH_QWeight As Global.System.Data.DataColumn
        
        Private columnCH_Qty As Global.System.Data.DataColumn
        
        Private columnCH_Weight As Global.System.Data.DataColumn
        
        Private columnErrorRate As Global.System.Data.DataColumn
        
        Private columnRemark As Global.System.Data.DataColumn
        
        Private columnStatusTypeName As Global.System.Data.DataColumn
        
        Private columnD_Name As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "NmetalSampInventoryWeightCheckSub"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AutoIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAutoID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CH_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCH_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Code_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCode_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatusType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property D_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnD_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SO_SampleIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSO_SampleID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CH_QQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCH_QQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CH_QWeightColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCH_QWeight
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CH_QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCH_Qty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CH_WeightColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCH_Weight
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ErrorRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnErrorRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemark
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusTypeNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatusTypeName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property D_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnD_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As NmetalSampInventoryWeightCheckSubRow
            Get
                Return CType(Me.Rows(index),NmetalSampInventoryWeightCheckSubRow)
            End Get
        End Property
        
        Public Event NmetalSampInventoryWeightCheckSubRowChanging As NmetalSampInventoryWeightCheckSubRowChangeEventHandler
        
        Public Event NmetalSampInventoryWeightCheckSubRowChanged As NmetalSampInventoryWeightCheckSubRowChangeEventHandler
        
        Public Event NmetalSampInventoryWeightCheckSubRowDeleting As NmetalSampInventoryWeightCheckSubRowChangeEventHandler
        
        Public Event NmetalSampInventoryWeightCheckSubRowDeleted As NmetalSampInventoryWeightCheckSubRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddNmetalSampInventoryWeightCheckSubRow(ByVal row As NmetalSampInventoryWeightCheckSubRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddNmetalSampInventoryWeightCheckSubRow(ByVal AutoID As String, ByVal CH_NO As String, ByVal Code_ID As String, ByVal StatusType As String, ByVal D_ID As String, ByVal SO_SampleID As String, ByVal CH_QQty As String, ByVal CH_QWeight As String, ByVal CH_Qty As String, ByVal CH_Weight As String, ByVal ErrorRate As String, ByVal Remark As String, ByVal StatusTypeName As String, ByVal D_Name As String) As NmetalSampInventoryWeightCheckSubRow
            Dim rowNmetalSampInventoryWeightCheckSubRow As NmetalSampInventoryWeightCheckSubRow = CType(Me.NewRow,NmetalSampInventoryWeightCheckSubRow)
            Dim columnValuesArray() As Object = New Object() {AutoID, CH_NO, Code_ID, StatusType, D_ID, SO_SampleID, CH_QQty, CH_QWeight, CH_Qty, CH_Weight, ErrorRate, Remark, StatusTypeName, D_Name}
            rowNmetalSampInventoryWeightCheckSubRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowNmetalSampInventoryWeightCheckSubRow)
            Return rowNmetalSampInventoryWeightCheckSubRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As NmetalSampInventoryWeightCheckSubDataTable = CType(MyBase.Clone,NmetalSampInventoryWeightCheckSubDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New NmetalSampInventoryWeightCheckSubDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAutoID = MyBase.Columns("AutoID")
            Me.columnCH_NO = MyBase.Columns("CH_NO")
            Me.columnCode_ID = MyBase.Columns("Code_ID")
            Me.columnStatusType = MyBase.Columns("StatusType")
            Me.columnD_ID = MyBase.Columns("D_ID")
            Me.columnSO_SampleID = MyBase.Columns("SO_SampleID")
            Me.columnCH_QQty = MyBase.Columns("CH_QQty")
            Me.columnCH_QWeight = MyBase.Columns("CH_QWeight")
            Me.columnCH_Qty = MyBase.Columns("CH_Qty")
            Me.columnCH_Weight = MyBase.Columns("CH_Weight")
            Me.columnErrorRate = MyBase.Columns("ErrorRate")
            Me.columnRemark = MyBase.Columns("Remark")
            Me.columnStatusTypeName = MyBase.Columns("StatusTypeName")
            Me.columnD_Name = MyBase.Columns("D_Name")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAutoID = New Global.System.Data.DataColumn("AutoID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAutoID)
            Me.columnCH_NO = New Global.System.Data.DataColumn("CH_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCH_NO)
            Me.columnCode_ID = New Global.System.Data.DataColumn("Code_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCode_ID)
            Me.columnStatusType = New Global.System.Data.DataColumn("StatusType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatusType)
            Me.columnD_ID = New Global.System.Data.DataColumn("D_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnD_ID)
            Me.columnSO_SampleID = New Global.System.Data.DataColumn("SO_SampleID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSO_SampleID)
            Me.columnCH_QQty = New Global.System.Data.DataColumn("CH_QQty", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCH_QQty)
            Me.columnCH_QWeight = New Global.System.Data.DataColumn("CH_QWeight", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCH_QWeight)
            Me.columnCH_Qty = New Global.System.Data.DataColumn("CH_Qty", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCH_Qty)
            Me.columnCH_Weight = New Global.System.Data.DataColumn("CH_Weight", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCH_Weight)
            Me.columnErrorRate = New Global.System.Data.DataColumn("ErrorRate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnErrorRate)
            Me.columnRemark = New Global.System.Data.DataColumn("Remark", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemark)
            Me.columnStatusTypeName = New Global.System.Data.DataColumn("StatusTypeName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatusTypeName)
            Me.columnD_Name = New Global.System.Data.DataColumn("D_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnD_Name)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewNmetalSampInventoryWeightCheckSubRow() As NmetalSampInventoryWeightCheckSubRow
            Return CType(Me.NewRow,NmetalSampInventoryWeightCheckSubRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New NmetalSampInventoryWeightCheckSubRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(NmetalSampInventoryWeightCheckSubRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NmetalSampInventoryWeightCheckSubRowChangedEvent) Is Nothing) Then
                RaiseEvent NmetalSampInventoryWeightCheckSubRowChanged(Me, New NmetalSampInventoryWeightCheckSubRowChangeEvent(CType(e.Row,NmetalSampInventoryWeightCheckSubRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NmetalSampInventoryWeightCheckSubRowChangingEvent) Is Nothing) Then
                RaiseEvent NmetalSampInventoryWeightCheckSubRowChanging(Me, New NmetalSampInventoryWeightCheckSubRowChangeEvent(CType(e.Row,NmetalSampInventoryWeightCheckSubRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NmetalSampInventoryWeightCheckSubRowDeletedEvent) Is Nothing) Then
                RaiseEvent NmetalSampInventoryWeightCheckSubRowDeleted(Me, New NmetalSampInventoryWeightCheckSubRowChangeEvent(CType(e.Row,NmetalSampInventoryWeightCheckSubRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NmetalSampInventoryWeightCheckSubRowDeletingEvent) Is Nothing) Then
                RaiseEvent NmetalSampInventoryWeightCheckSubRowDeleting(Me, New NmetalSampInventoryWeightCheckSubRowChangeEvent(CType(e.Row,NmetalSampInventoryWeightCheckSubRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveNmetalSampInventoryWeightCheckSubRow(ByVal row As NmetalSampInventoryWeightCheckSubRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As NmetalSampInventoryWeightCheck = New NmetalSampInventoryWeightCheck
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "NmetalSampInventoryWeightCheckSubDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class NmetalSampInventoryWeightCheckMainRow
        Inherits Global.System.Data.DataRow
        
        Private tableNmetalSampInventoryWeightCheckMain As NmetalSampInventoryWeightCheckMainDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableNmetalSampInventoryWeightCheckMain = CType(Me.Table,NmetalSampInventoryWeightCheckMainDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AutoID() As String
            Get
                Try 
                    Return CType(Me(Me.tableNmetalSampInventoryWeightCheckMain.AutoIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““NmetalSampInventoryWeightCheckMain””中列““AutoID””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableNmetalSampInventoryWeightCheckMain.AutoIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CH_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableNmetalSampInventoryWeightCheckMain.CH_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““NmetalSampInventoryWeightCheckMain””中列““CH_NO””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableNmetalSampInventoryWeightCheckMain.CH_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DepID() As String
            Get
                Try 
                    Return CType(Me(Me.tableNmetalSampInventoryWeightCheckMain.DepIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““NmetalSampInventoryWeightCheckMain””中列““DepID””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableNmetalSampInventoryWeightCheckMain.DepIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CH_Date() As String
            Get
                Try 
                    Return CType(Me(Me.tableNmetalSampInventoryWeightCheckMain.CH_DateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““NmetalSampInventoryWeightCheckMain””中列““CH_Date””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableNmetalSampInventoryWeightCheckMain.CH_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CH_Action() As String
            Get
                Try 
                    Return CType(Me(Me.tableNmetalSampInventoryWeightCheckMain.CH_ActionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““NmetalSampInventoryWeightCheckMain””中列““CH_Action””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableNmetalSampInventoryWeightCheckMain.CH_ActionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CH_Remark() As String
            Get
                Try 
                    Return CType(Me(Me.tableNmetalSampInventoryWeightCheckMain.CH_RemarkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““NmetalSampInventoryWeightCheckMain””中列““CH_Remark””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableNmetalSampInventoryWeightCheckMain.CH_RemarkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AddAction() As String
            Get
                Try 
                    Return CType(Me(Me.tableNmetalSampInventoryWeightCheckMain.AddActionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““NmetalSampInventoryWeightCheckMain””中列““AddAction””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableNmetalSampInventoryWeightCheckMain.AddActionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AddDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableNmetalSampInventoryWeightCheckMain.AddDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““NmetalSampInventoryWeightCheckMain””中列““AddDate””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableNmetalSampInventoryWeightCheckMain.AddDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModifyUserID() As String
            Get
                Try 
                    Return CType(Me(Me.tableNmetalSampInventoryWeightCheckMain.ModifyUserIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““NmetalSampInventoryWeightCheckMain””中列““ModifyUserID””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableNmetalSampInventoryWeightCheckMain.ModifyUserIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModifyDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableNmetalSampInventoryWeightCheckMain.ModifyDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““NmetalSampInventoryWeightCheckMain””中列““ModifyDate””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableNmetalSampInventoryWeightCheckMain.ModifyDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CheckStatus() As String
            Get
                Try 
                    Return CType(Me(Me.tableNmetalSampInventoryWeightCheckMain.CheckStatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““NmetalSampInventoryWeightCheckMain””中列““CheckStatus””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableNmetalSampInventoryWeightCheckMain.CheckStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CheckAction() As String
            Get
                Try 
                    Return CType(Me(Me.tableNmetalSampInventoryWeightCheckMain.CheckActionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““NmetalSampInventoryWeightCheckMain””中列““CheckAction””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableNmetalSampInventoryWeightCheckMain.CheckActionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CheckDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableNmetalSampInventoryWeightCheckMain.CheckDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““NmetalSampInventoryWeightCheckMain””中列““CheckDate””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableNmetalSampInventoryWeightCheckMain.CheckDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CheckRemark() As String
            Get
                Try 
                    Return CType(Me(Me.tableNmetalSampInventoryWeightCheckMain.CheckRemarkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““NmetalSampInventoryWeightCheckMain””中列““CheckRemark””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableNmetalSampInventoryWeightCheckMain.CheckRemarkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CheckWastWeight() As String
            Get
                Try 
                    Return CType(Me(Me.tableNmetalSampInventoryWeightCheckMain.CheckWastWeightColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““NmetalSampInventoryWeightCheckMain””中列““CheckWastWeight””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableNmetalSampInventoryWeightCheckMain.CheckWastWeightColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CheckType() As String
            Get
                Try 
                    Return CType(Me(Me.tableNmetalSampInventoryWeightCheckMain.CheckTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““NmetalSampInventoryWeightCheckMain””中列““CheckType””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableNmetalSampInventoryWeightCheckMain.CheckTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CheckDownRate() As String
            Get
                Try 
                    Return CType(Me(Me.tableNmetalSampInventoryWeightCheckMain.CheckDownRateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““NmetalSampInventoryWeightCheckMain””中列““CheckDownRate””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableNmetalSampInventoryWeightCheckMain.CheckDownRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CheckUpdate() As String
            Get
                Try 
                    Return CType(Me(Me.tableNmetalSampInventoryWeightCheckMain.CheckUpdateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““NmetalSampInventoryWeightCheckMain””中列““CheckUpdate””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableNmetalSampInventoryWeightCheckMain.CheckUpdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DepName() As String
            Get
                Try 
                    Return CType(Me(Me.tableNmetalSampInventoryWeightCheckMain.DepNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““NmetalSampInventoryWeightCheckMain””中列““DepName””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableNmetalSampInventoryWeightCheckMain.DepNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CHAction_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableNmetalSampInventoryWeightCheckMain.CHAction_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““NmetalSampInventoryWeightCheckMain””中列““CHAction_Name””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableNmetalSampInventoryWeightCheckMain.CHAction_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Add_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableNmetalSampInventoryWeightCheckMain.Add_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““NmetalSampInventoryWeightCheckMain””中列““Add_Name””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableNmetalSampInventoryWeightCheckMain.Add_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modify_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableNmetalSampInventoryWeightCheckMain.Modify_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““NmetalSampInventoryWeightCheckMain””中列““Modify_Name””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableNmetalSampInventoryWeightCheckMain.Modify_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Check_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableNmetalSampInventoryWeightCheckMain.Check_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““NmetalSampInventoryWeightCheckMain””中列““Check_Name””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableNmetalSampInventoryWeightCheckMain.Check_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAutoIDNull() As Boolean
            Return Me.IsNull(Me.tableNmetalSampInventoryWeightCheckMain.AutoIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAutoIDNull()
            Me(Me.tableNmetalSampInventoryWeightCheckMain.AutoIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCH_NONull() As Boolean
            Return Me.IsNull(Me.tableNmetalSampInventoryWeightCheckMain.CH_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCH_NONull()
            Me(Me.tableNmetalSampInventoryWeightCheckMain.CH_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepIDNull() As Boolean
            Return Me.IsNull(Me.tableNmetalSampInventoryWeightCheckMain.DepIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepIDNull()
            Me(Me.tableNmetalSampInventoryWeightCheckMain.DepIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCH_DateNull() As Boolean
            Return Me.IsNull(Me.tableNmetalSampInventoryWeightCheckMain.CH_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCH_DateNull()
            Me(Me.tableNmetalSampInventoryWeightCheckMain.CH_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCH_ActionNull() As Boolean
            Return Me.IsNull(Me.tableNmetalSampInventoryWeightCheckMain.CH_ActionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCH_ActionNull()
            Me(Me.tableNmetalSampInventoryWeightCheckMain.CH_ActionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCH_RemarkNull() As Boolean
            Return Me.IsNull(Me.tableNmetalSampInventoryWeightCheckMain.CH_RemarkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCH_RemarkNull()
            Me(Me.tableNmetalSampInventoryWeightCheckMain.CH_RemarkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddActionNull() As Boolean
            Return Me.IsNull(Me.tableNmetalSampInventoryWeightCheckMain.AddActionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddActionNull()
            Me(Me.tableNmetalSampInventoryWeightCheckMain.AddActionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddDateNull() As Boolean
            Return Me.IsNull(Me.tableNmetalSampInventoryWeightCheckMain.AddDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddDateNull()
            Me(Me.tableNmetalSampInventoryWeightCheckMain.AddDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModifyUserIDNull() As Boolean
            Return Me.IsNull(Me.tableNmetalSampInventoryWeightCheckMain.ModifyUserIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModifyUserIDNull()
            Me(Me.tableNmetalSampInventoryWeightCheckMain.ModifyUserIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModifyDateNull() As Boolean
            Return Me.IsNull(Me.tableNmetalSampInventoryWeightCheckMain.ModifyDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModifyDateNull()
            Me(Me.tableNmetalSampInventoryWeightCheckMain.ModifyDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCheckStatusNull() As Boolean
            Return Me.IsNull(Me.tableNmetalSampInventoryWeightCheckMain.CheckStatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCheckStatusNull()
            Me(Me.tableNmetalSampInventoryWeightCheckMain.CheckStatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCheckActionNull() As Boolean
            Return Me.IsNull(Me.tableNmetalSampInventoryWeightCheckMain.CheckActionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCheckActionNull()
            Me(Me.tableNmetalSampInventoryWeightCheckMain.CheckActionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCheckDateNull() As Boolean
            Return Me.IsNull(Me.tableNmetalSampInventoryWeightCheckMain.CheckDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCheckDateNull()
            Me(Me.tableNmetalSampInventoryWeightCheckMain.CheckDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCheckRemarkNull() As Boolean
            Return Me.IsNull(Me.tableNmetalSampInventoryWeightCheckMain.CheckRemarkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCheckRemarkNull()
            Me(Me.tableNmetalSampInventoryWeightCheckMain.CheckRemarkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCheckWastWeightNull() As Boolean
            Return Me.IsNull(Me.tableNmetalSampInventoryWeightCheckMain.CheckWastWeightColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCheckWastWeightNull()
            Me(Me.tableNmetalSampInventoryWeightCheckMain.CheckWastWeightColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCheckTypeNull() As Boolean
            Return Me.IsNull(Me.tableNmetalSampInventoryWeightCheckMain.CheckTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCheckTypeNull()
            Me(Me.tableNmetalSampInventoryWeightCheckMain.CheckTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCheckDownRateNull() As Boolean
            Return Me.IsNull(Me.tableNmetalSampInventoryWeightCheckMain.CheckDownRateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCheckDownRateNull()
            Me(Me.tableNmetalSampInventoryWeightCheckMain.CheckDownRateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCheckUpdateNull() As Boolean
            Return Me.IsNull(Me.tableNmetalSampInventoryWeightCheckMain.CheckUpdateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCheckUpdateNull()
            Me(Me.tableNmetalSampInventoryWeightCheckMain.CheckUpdateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepNameNull() As Boolean
            Return Me.IsNull(Me.tableNmetalSampInventoryWeightCheckMain.DepNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepNameNull()
            Me(Me.tableNmetalSampInventoryWeightCheckMain.DepNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCHAction_NameNull() As Boolean
            Return Me.IsNull(Me.tableNmetalSampInventoryWeightCheckMain.CHAction_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCHAction_NameNull()
            Me(Me.tableNmetalSampInventoryWeightCheckMain.CHAction_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdd_NameNull() As Boolean
            Return Me.IsNull(Me.tableNmetalSampInventoryWeightCheckMain.Add_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdd_NameNull()
            Me(Me.tableNmetalSampInventoryWeightCheckMain.Add_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModify_NameNull() As Boolean
            Return Me.IsNull(Me.tableNmetalSampInventoryWeightCheckMain.Modify_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModify_NameNull()
            Me(Me.tableNmetalSampInventoryWeightCheckMain.Modify_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCheck_NameNull() As Boolean
            Return Me.IsNull(Me.tableNmetalSampInventoryWeightCheckMain.Check_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCheck_NameNull()
            Me(Me.tableNmetalSampInventoryWeightCheckMain.Check_NameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class NmetalSampInventoryWeightCheckSubRow
        Inherits Global.System.Data.DataRow
        
        Private tableNmetalSampInventoryWeightCheckSub As NmetalSampInventoryWeightCheckSubDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableNmetalSampInventoryWeightCheckSub = CType(Me.Table,NmetalSampInventoryWeightCheckSubDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AutoID() As String
            Get
                Try 
                    Return CType(Me(Me.tableNmetalSampInventoryWeightCheckSub.AutoIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““NmetalSampInventoryWeightCheckSub””中列““AutoID””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableNmetalSampInventoryWeightCheckSub.AutoIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CH_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableNmetalSampInventoryWeightCheckSub.CH_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““NmetalSampInventoryWeightCheckSub””中列““CH_NO””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableNmetalSampInventoryWeightCheckSub.CH_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Code_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableNmetalSampInventoryWeightCheckSub.Code_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““NmetalSampInventoryWeightCheckSub””中列““Code_ID””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableNmetalSampInventoryWeightCheckSub.Code_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StatusType() As String
            Get
                Try 
                    Return CType(Me(Me.tableNmetalSampInventoryWeightCheckSub.StatusTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““NmetalSampInventoryWeightCheckSub””中列““StatusType””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableNmetalSampInventoryWeightCheckSub.StatusTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property D_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableNmetalSampInventoryWeightCheckSub.D_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““NmetalSampInventoryWeightCheckSub””中列““D_ID””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableNmetalSampInventoryWeightCheckSub.D_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SO_SampleID() As String
            Get
                Try 
                    Return CType(Me(Me.tableNmetalSampInventoryWeightCheckSub.SO_SampleIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““NmetalSampInventoryWeightCheckSub””中列““SO_SampleID””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableNmetalSampInventoryWeightCheckSub.SO_SampleIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CH_QQty() As String
            Get
                Try 
                    Return CType(Me(Me.tableNmetalSampInventoryWeightCheckSub.CH_QQtyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““NmetalSampInventoryWeightCheckSub””中列““CH_QQty””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableNmetalSampInventoryWeightCheckSub.CH_QQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CH_QWeight() As String
            Get
                Try 
                    Return CType(Me(Me.tableNmetalSampInventoryWeightCheckSub.CH_QWeightColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““NmetalSampInventoryWeightCheckSub””中列““CH_QWeight””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableNmetalSampInventoryWeightCheckSub.CH_QWeightColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CH_Qty() As String
            Get
                Try 
                    Return CType(Me(Me.tableNmetalSampInventoryWeightCheckSub.CH_QtyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““NmetalSampInventoryWeightCheckSub””中列““CH_Qty””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableNmetalSampInventoryWeightCheckSub.CH_QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CH_Weight() As String
            Get
                Try 
                    Return CType(Me(Me.tableNmetalSampInventoryWeightCheckSub.CH_WeightColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““NmetalSampInventoryWeightCheckSub””中列““CH_Weight””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableNmetalSampInventoryWeightCheckSub.CH_WeightColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ErrorRate() As String
            Get
                Try 
                    Return CType(Me(Me.tableNmetalSampInventoryWeightCheckSub.ErrorRateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““NmetalSampInventoryWeightCheckSub””中列““ErrorRate””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableNmetalSampInventoryWeightCheckSub.ErrorRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remark() As String
            Get
                Try 
                    Return CType(Me(Me.tableNmetalSampInventoryWeightCheckSub.RemarkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““NmetalSampInventoryWeightCheckSub””中列““Remark””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableNmetalSampInventoryWeightCheckSub.RemarkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StatusTypeName() As String
            Get
                Try 
                    Return CType(Me(Me.tableNmetalSampInventoryWeightCheckSub.StatusTypeNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““NmetalSampInventoryWeightCheckSub””中列““StatusTypeName””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableNmetalSampInventoryWeightCheckSub.StatusTypeNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property D_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableNmetalSampInventoryWeightCheckSub.D_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““NmetalSampInventoryWeightCheckSub””中列““D_Name””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableNmetalSampInventoryWeightCheckSub.D_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAutoIDNull() As Boolean
            Return Me.IsNull(Me.tableNmetalSampInventoryWeightCheckSub.AutoIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAutoIDNull()
            Me(Me.tableNmetalSampInventoryWeightCheckSub.AutoIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCH_NONull() As Boolean
            Return Me.IsNull(Me.tableNmetalSampInventoryWeightCheckSub.CH_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCH_NONull()
            Me(Me.tableNmetalSampInventoryWeightCheckSub.CH_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCode_IDNull() As Boolean
            Return Me.IsNull(Me.tableNmetalSampInventoryWeightCheckSub.Code_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCode_IDNull()
            Me(Me.tableNmetalSampInventoryWeightCheckSub.Code_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusTypeNull() As Boolean
            Return Me.IsNull(Me.tableNmetalSampInventoryWeightCheckSub.StatusTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusTypeNull()
            Me(Me.tableNmetalSampInventoryWeightCheckSub.StatusTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsD_IDNull() As Boolean
            Return Me.IsNull(Me.tableNmetalSampInventoryWeightCheckSub.D_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetD_IDNull()
            Me(Me.tableNmetalSampInventoryWeightCheckSub.D_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSO_SampleIDNull() As Boolean
            Return Me.IsNull(Me.tableNmetalSampInventoryWeightCheckSub.SO_SampleIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSO_SampleIDNull()
            Me(Me.tableNmetalSampInventoryWeightCheckSub.SO_SampleIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCH_QQtyNull() As Boolean
            Return Me.IsNull(Me.tableNmetalSampInventoryWeightCheckSub.CH_QQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCH_QQtyNull()
            Me(Me.tableNmetalSampInventoryWeightCheckSub.CH_QQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCH_QWeightNull() As Boolean
            Return Me.IsNull(Me.tableNmetalSampInventoryWeightCheckSub.CH_QWeightColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCH_QWeightNull()
            Me(Me.tableNmetalSampInventoryWeightCheckSub.CH_QWeightColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCH_QtyNull() As Boolean
            Return Me.IsNull(Me.tableNmetalSampInventoryWeightCheckSub.CH_QtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCH_QtyNull()
            Me(Me.tableNmetalSampInventoryWeightCheckSub.CH_QtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCH_WeightNull() As Boolean
            Return Me.IsNull(Me.tableNmetalSampInventoryWeightCheckSub.CH_WeightColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCH_WeightNull()
            Me(Me.tableNmetalSampInventoryWeightCheckSub.CH_WeightColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsErrorRateNull() As Boolean
            Return Me.IsNull(Me.tableNmetalSampInventoryWeightCheckSub.ErrorRateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetErrorRateNull()
            Me(Me.tableNmetalSampInventoryWeightCheckSub.ErrorRateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemarkNull() As Boolean
            Return Me.IsNull(Me.tableNmetalSampInventoryWeightCheckSub.RemarkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemarkNull()
            Me(Me.tableNmetalSampInventoryWeightCheckSub.RemarkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusTypeNameNull() As Boolean
            Return Me.IsNull(Me.tableNmetalSampInventoryWeightCheckSub.StatusTypeNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusTypeNameNull()
            Me(Me.tableNmetalSampInventoryWeightCheckSub.StatusTypeNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsD_NameNull() As Boolean
            Return Me.IsNull(Me.tableNmetalSampInventoryWeightCheckSub.D_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetD_NameNull()
            Me(Me.tableNmetalSampInventoryWeightCheckSub.D_NameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class NmetalSampInventoryWeightCheckMainRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As NmetalSampInventoryWeightCheckMainRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As NmetalSampInventoryWeightCheckMainRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As NmetalSampInventoryWeightCheckMainRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class NmetalSampInventoryWeightCheckSubRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As NmetalSampInventoryWeightCheckSubRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As NmetalSampInventoryWeightCheckSubRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As NmetalSampInventoryWeightCheckSubRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
