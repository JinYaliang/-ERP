'------------------------------------------------------------------------------
' <auto-generated>
'     此代码由工具生成。
'     运行时版本:2.0.50727.5420
'
'     对此文件的更改可能会导致不正确的行为，并且如果
'     重新生成代码，这些更改将会丢失。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("KnifeWareInventoryCheck"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class KnifeWareInventoryCheck
    Inherits Global.System.Data.DataSet
    
    Private tableKnifeWareInventoryCheck As KnifeWareInventoryCheckDataTable
    
    Private tableKnifeWareInventoryCheckProcess As KnifeWareInventoryCheckProcessDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("KnifeWareInventoryCheck")) Is Nothing) Then
                MyBase.Tables.Add(New KnifeWareInventoryCheckDataTable(ds.Tables("KnifeWareInventoryCheck")))
            End If
            If (Not (ds.Tables("KnifeWareInventoryCheckProcess")) Is Nothing) Then
                MyBase.Tables.Add(New KnifeWareInventoryCheckProcessDataTable(ds.Tables("KnifeWareInventoryCheckProcess")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property _KnifeWareInventoryCheck() As KnifeWareInventoryCheckDataTable
        Get
            Return Me.tableKnifeWareInventoryCheck
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property KnifeWareInventoryCheckProcess() As KnifeWareInventoryCheckProcessDataTable
        Get
            Return Me.tableKnifeWareInventoryCheckProcess
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As KnifeWareInventoryCheck = CType(MyBase.Clone,KnifeWareInventoryCheck)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("KnifeWareInventoryCheck")) Is Nothing) Then
                MyBase.Tables.Add(New KnifeWareInventoryCheckDataTable(ds.Tables("KnifeWareInventoryCheck")))
            End If
            If (Not (ds.Tables("KnifeWareInventoryCheckProcess")) Is Nothing) Then
                MyBase.Tables.Add(New KnifeWareInventoryCheckProcessDataTable(ds.Tables("KnifeWareInventoryCheckProcess")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableKnifeWareInventoryCheck = CType(MyBase.Tables("KnifeWareInventoryCheck"),KnifeWareInventoryCheckDataTable)
        If (initTable = true) Then
            If (Not (Me.tableKnifeWareInventoryCheck) Is Nothing) Then
                Me.tableKnifeWareInventoryCheck.InitVars
            End If
        End If
        Me.tableKnifeWareInventoryCheckProcess = CType(MyBase.Tables("KnifeWareInventoryCheckProcess"),KnifeWareInventoryCheckProcessDataTable)
        If (initTable = true) Then
            If (Not (Me.tableKnifeWareInventoryCheckProcess) Is Nothing) Then
                Me.tableKnifeWareInventoryCheckProcess.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "KnifeWareInventoryCheck"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/KnifeWareInventoryCheck.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableKnifeWareInventoryCheck = New KnifeWareInventoryCheckDataTable
        MyBase.Tables.Add(Me.tableKnifeWareInventoryCheck)
        Me.tableKnifeWareInventoryCheckProcess = New KnifeWareInventoryCheckProcessDataTable
        MyBase.Tables.Add(Me.tableKnifeWareInventoryCheckProcess)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerialize_KnifeWareInventoryCheck() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeKnifeWareInventoryCheckProcess() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As KnifeWareInventoryCheck = New KnifeWareInventoryCheck
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub KnifeWareInventoryCheckRowChangeEventHandler(ByVal sender As Object, ByVal e As KnifeWareInventoryCheckRowChangeEvent)
    
    Public Delegate Sub KnifeWareInventoryCheckProcessRowChangeEventHandler(ByVal sender As Object, ByVal e As KnifeWareInventoryCheckProcessRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class KnifeWareInventoryCheckDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAutoID As Global.System.Data.DataColumn
        
        Private columnWIC_NO As Global.System.Data.DataColumn
        
        Private columnWIC_Date As Global.System.Data.DataColumn
        
        Private columnDepotNO As Global.System.Data.DataColumn
        
        Private columnWIC_Remark As Global.System.Data.DataColumn
        
        Private columnWIC_Action As Global.System.Data.DataColumn
        
        Private columnWIC_Check As Global.System.Data.DataColumn
        
        Private columnWIC_CheckAction As Global.System.Data.DataColumn
        
        Private columnWIC_CheckType As Global.System.Data.DataColumn
        
        Private columnWIC_CheckRemark As Global.System.Data.DataColumn
        
        Private columnWIC_Detail As Global.System.Data.DataColumn
        
        Private columnWIC_AccountCheck As Global.System.Data.DataColumn
        
        Private columnWIC_AccountCheckAction As Global.System.Data.DataColumn
        
        Private columnWIC_AccountCheckType As Global.System.Data.DataColumn
        
        Private columnWIC_AccountCheckRemark As Global.System.Data.DataColumn
        
        Private columnWIC_KnifeKType As Global.System.Data.DataColumn
        
        Private columnWIC_PDType As Global.System.Data.DataColumn
        
        Private columnWH_Name As Global.System.Data.DataColumn
        
        Private columnCheckActionName As Global.System.Data.DataColumn
        
        Private columnActionName As Global.System.Data.DataColumn
        
        Private columnWH_Pname As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "KnifeWareInventoryCheck"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AutoIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAutoID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WIC_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWIC_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WIC_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWIC_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepotNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepotNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WIC_RemarkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWIC_Remark
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WIC_ActionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWIC_Action
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WIC_CheckColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWIC_Check
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WIC_CheckActionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWIC_CheckAction
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WIC_CheckTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWIC_CheckType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WIC_CheckRemarkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWIC_CheckRemark
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WIC_DetailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWIC_Detail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WIC_AccountCheckColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWIC_AccountCheck
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WIC_AccountCheckActionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWIC_AccountCheckAction
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WIC_AccountCheckTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWIC_AccountCheckType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WIC_AccountCheckRemarkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWIC_AccountCheckRemark
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WIC_KnifeKTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWIC_KnifeKType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WIC_PDTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWIC_PDType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WH_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWH_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CheckActionNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCheckActionName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ActionNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnActionName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WH_PnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWH_Pname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As KnifeWareInventoryCheckRow
            Get
                Return CType(Me.Rows(index),KnifeWareInventoryCheckRow)
            End Get
        End Property
        
        Public Event KnifeWareInventoryCheckRowChanging As KnifeWareInventoryCheckRowChangeEventHandler
        
        Public Event KnifeWareInventoryCheckRowChanged As KnifeWareInventoryCheckRowChangeEventHandler
        
        Public Event KnifeWareInventoryCheckRowDeleting As KnifeWareInventoryCheckRowChangeEventHandler
        
        Public Event KnifeWareInventoryCheckRowDeleted As KnifeWareInventoryCheckRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddKnifeWareInventoryCheckRow(ByVal row As KnifeWareInventoryCheckRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddKnifeWareInventoryCheckRow( _
                    ByVal AutoID As String,  _
                    ByVal WIC_NO As String,  _
                    ByVal WIC_Date As String,  _
                    ByVal DepotNO As String,  _
                    ByVal WIC_Remark As String,  _
                    ByVal WIC_Action As String,  _
                    ByVal WIC_Check As String,  _
                    ByVal WIC_CheckAction As String,  _
                    ByVal WIC_CheckType As String,  _
                    ByVal WIC_CheckRemark As String,  _
                    ByVal WIC_Detail As String,  _
                    ByVal WIC_AccountCheck As String,  _
                    ByVal WIC_AccountCheckAction As String,  _
                    ByVal WIC_AccountCheckType As String,  _
                    ByVal WIC_AccountCheckRemark As String,  _
                    ByVal WIC_KnifeKType As String,  _
                    ByVal WIC_PDType As String,  _
                    ByVal WH_Name As String,  _
                    ByVal CheckActionName As String,  _
                    ByVal ActionName As String,  _
                    ByVal WH_Pname As String) As KnifeWareInventoryCheckRow
            Dim rowKnifeWareInventoryCheckRow As KnifeWareInventoryCheckRow = CType(Me.NewRow,KnifeWareInventoryCheckRow)
            Dim columnValuesArray() As Object = New Object() {AutoID, WIC_NO, WIC_Date, DepotNO, WIC_Remark, WIC_Action, WIC_Check, WIC_CheckAction, WIC_CheckType, WIC_CheckRemark, WIC_Detail, WIC_AccountCheck, WIC_AccountCheckAction, WIC_AccountCheckType, WIC_AccountCheckRemark, WIC_KnifeKType, WIC_PDType, WH_Name, CheckActionName, ActionName, WH_Pname}
            rowKnifeWareInventoryCheckRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowKnifeWareInventoryCheckRow)
            Return rowKnifeWareInventoryCheckRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As KnifeWareInventoryCheckDataTable = CType(MyBase.Clone,KnifeWareInventoryCheckDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New KnifeWareInventoryCheckDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAutoID = MyBase.Columns("AutoID")
            Me.columnWIC_NO = MyBase.Columns("WIC_NO")
            Me.columnWIC_Date = MyBase.Columns("WIC_Date")
            Me.columnDepotNO = MyBase.Columns("DepotNO")
            Me.columnWIC_Remark = MyBase.Columns("WIC_Remark")
            Me.columnWIC_Action = MyBase.Columns("WIC_Action")
            Me.columnWIC_Check = MyBase.Columns("WIC_Check")
            Me.columnWIC_CheckAction = MyBase.Columns("WIC_CheckAction")
            Me.columnWIC_CheckType = MyBase.Columns("WIC_CheckType")
            Me.columnWIC_CheckRemark = MyBase.Columns("WIC_CheckRemark")
            Me.columnWIC_Detail = MyBase.Columns("WIC_Detail")
            Me.columnWIC_AccountCheck = MyBase.Columns("WIC_AccountCheck")
            Me.columnWIC_AccountCheckAction = MyBase.Columns("WIC_AccountCheckAction")
            Me.columnWIC_AccountCheckType = MyBase.Columns("WIC_AccountCheckType")
            Me.columnWIC_AccountCheckRemark = MyBase.Columns("WIC_AccountCheckRemark")
            Me.columnWIC_KnifeKType = MyBase.Columns("WIC_KnifeKType")
            Me.columnWIC_PDType = MyBase.Columns("WIC_PDType")
            Me.columnWH_Name = MyBase.Columns("WH_Name")
            Me.columnCheckActionName = MyBase.Columns("CheckActionName")
            Me.columnActionName = MyBase.Columns("ActionName")
            Me.columnWH_Pname = MyBase.Columns("WH_Pname")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAutoID = New Global.System.Data.DataColumn("AutoID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAutoID)
            Me.columnWIC_NO = New Global.System.Data.DataColumn("WIC_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWIC_NO)
            Me.columnWIC_Date = New Global.System.Data.DataColumn("WIC_Date", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWIC_Date)
            Me.columnDepotNO = New Global.System.Data.DataColumn("DepotNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepotNO)
            Me.columnWIC_Remark = New Global.System.Data.DataColumn("WIC_Remark", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWIC_Remark)
            Me.columnWIC_Action = New Global.System.Data.DataColumn("WIC_Action", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWIC_Action)
            Me.columnWIC_Check = New Global.System.Data.DataColumn("WIC_Check", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWIC_Check)
            Me.columnWIC_CheckAction = New Global.System.Data.DataColumn("WIC_CheckAction", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWIC_CheckAction)
            Me.columnWIC_CheckType = New Global.System.Data.DataColumn("WIC_CheckType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWIC_CheckType)
            Me.columnWIC_CheckRemark = New Global.System.Data.DataColumn("WIC_CheckRemark", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWIC_CheckRemark)
            Me.columnWIC_Detail = New Global.System.Data.DataColumn("WIC_Detail", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWIC_Detail)
            Me.columnWIC_AccountCheck = New Global.System.Data.DataColumn("WIC_AccountCheck", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWIC_AccountCheck)
            Me.columnWIC_AccountCheckAction = New Global.System.Data.DataColumn("WIC_AccountCheckAction", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWIC_AccountCheckAction)
            Me.columnWIC_AccountCheckType = New Global.System.Data.DataColumn("WIC_AccountCheckType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWIC_AccountCheckType)
            Me.columnWIC_AccountCheckRemark = New Global.System.Data.DataColumn("WIC_AccountCheckRemark", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWIC_AccountCheckRemark)
            Me.columnWIC_KnifeKType = New Global.System.Data.DataColumn("WIC_KnifeKType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWIC_KnifeKType)
            Me.columnWIC_PDType = New Global.System.Data.DataColumn("WIC_PDType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWIC_PDType)
            Me.columnWH_Name = New Global.System.Data.DataColumn("WH_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWH_Name)
            Me.columnCheckActionName = New Global.System.Data.DataColumn("CheckActionName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCheckActionName)
            Me.columnActionName = New Global.System.Data.DataColumn("ActionName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnActionName)
            Me.columnWH_Pname = New Global.System.Data.DataColumn("WH_Pname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWH_Pname)
            Me.ExtendedProperties.Add("Generator_TablePropName", "_KnifeWareInventoryCheck")
            Me.ExtendedProperties.Add("Generator_UserTableName", "KnifeWareInventoryCheck")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewKnifeWareInventoryCheckRow() As KnifeWareInventoryCheckRow
            Return CType(Me.NewRow,KnifeWareInventoryCheckRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New KnifeWareInventoryCheckRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(KnifeWareInventoryCheckRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.KnifeWareInventoryCheckRowChangedEvent) Is Nothing) Then
                RaiseEvent KnifeWareInventoryCheckRowChanged(Me, New KnifeWareInventoryCheckRowChangeEvent(CType(e.Row,KnifeWareInventoryCheckRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.KnifeWareInventoryCheckRowChangingEvent) Is Nothing) Then
                RaiseEvent KnifeWareInventoryCheckRowChanging(Me, New KnifeWareInventoryCheckRowChangeEvent(CType(e.Row,KnifeWareInventoryCheckRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.KnifeWareInventoryCheckRowDeletedEvent) Is Nothing) Then
                RaiseEvent KnifeWareInventoryCheckRowDeleted(Me, New KnifeWareInventoryCheckRowChangeEvent(CType(e.Row,KnifeWareInventoryCheckRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.KnifeWareInventoryCheckRowDeletingEvent) Is Nothing) Then
                RaiseEvent KnifeWareInventoryCheckRowDeleting(Me, New KnifeWareInventoryCheckRowChangeEvent(CType(e.Row,KnifeWareInventoryCheckRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveKnifeWareInventoryCheckRow(ByVal row As KnifeWareInventoryCheckRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As KnifeWareInventoryCheck = New KnifeWareInventoryCheck
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "KnifeWareInventoryCheckDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class KnifeWareInventoryCheckProcessDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIndexNO As Global.System.Data.DataColumn
        
        Private columnWIC_NO As Global.System.Data.DataColumn
        
        Private columnM_Code As Global.System.Data.DataColumn
        
        Private columnDepotNO As Global.System.Data.DataColumn
        
        Private columnWIC_NewQty As Global.System.Data.DataColumn
        
        Private columnWIC_OldQty As Global.System.Data.DataColumn
        
        Private columnWIC_Difference As Global.System.Data.DataColumn
        
        Private columnWIC_Process As Global.System.Data.DataColumn
        
        Private columnWIC_Type As Global.System.Data.DataColumn
        
        Private columnWIC_KnifeKType As Global.System.Data.DataColumn
        
        Private columnWIC_PDType As Global.System.Data.DataColumn
        
        Private columnM_Name As Global.System.Data.DataColumn
        
        Private columnM_Gauge As Global.System.Data.DataColumn
        
        Private columnM_Unit As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "KnifeWareInventoryCheckProcess"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IndexNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIndexNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WIC_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWIC_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_Code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepotNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepotNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WIC_NewQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWIC_NewQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WIC_OldQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWIC_OldQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WIC_DifferenceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWIC_Difference
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WIC_ProcessColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWIC_Process
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WIC_TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWIC_Type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WIC_KnifeKTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWIC_KnifeKType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WIC_PDTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWIC_PDType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M_GaugeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_Gauge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M_UnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_Unit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As KnifeWareInventoryCheckProcessRow
            Get
                Return CType(Me.Rows(index),KnifeWareInventoryCheckProcessRow)
            End Get
        End Property
        
        Public Event KnifeWareInventoryCheckProcessRowChanging As KnifeWareInventoryCheckProcessRowChangeEventHandler
        
        Public Event KnifeWareInventoryCheckProcessRowChanged As KnifeWareInventoryCheckProcessRowChangeEventHandler
        
        Public Event KnifeWareInventoryCheckProcessRowDeleting As KnifeWareInventoryCheckProcessRowChangeEventHandler
        
        Public Event KnifeWareInventoryCheckProcessRowDeleted As KnifeWareInventoryCheckProcessRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddKnifeWareInventoryCheckProcessRow(ByVal row As KnifeWareInventoryCheckProcessRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddKnifeWareInventoryCheckProcessRow(ByVal IndexNO As String, ByVal WIC_NO As String, ByVal M_Code As String, ByVal DepotNO As String, ByVal WIC_NewQty As String, ByVal WIC_OldQty As String, ByVal WIC_Difference As String, ByVal WIC_Process As String, ByVal WIC_Type As String, ByVal WIC_KnifeKType As String, ByVal WIC_PDType As String, ByVal M_Name As String, ByVal M_Gauge As String, ByVal M_Unit As String) As KnifeWareInventoryCheckProcessRow
            Dim rowKnifeWareInventoryCheckProcessRow As KnifeWareInventoryCheckProcessRow = CType(Me.NewRow,KnifeWareInventoryCheckProcessRow)
            Dim columnValuesArray() As Object = New Object() {IndexNO, WIC_NO, M_Code, DepotNO, WIC_NewQty, WIC_OldQty, WIC_Difference, WIC_Process, WIC_Type, WIC_KnifeKType, WIC_PDType, M_Name, M_Gauge, M_Unit}
            rowKnifeWareInventoryCheckProcessRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowKnifeWareInventoryCheckProcessRow)
            Return rowKnifeWareInventoryCheckProcessRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As KnifeWareInventoryCheckProcessDataTable = CType(MyBase.Clone,KnifeWareInventoryCheckProcessDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New KnifeWareInventoryCheckProcessDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIndexNO = MyBase.Columns("IndexNO")
            Me.columnWIC_NO = MyBase.Columns("WIC_NO")
            Me.columnM_Code = MyBase.Columns("M_Code")
            Me.columnDepotNO = MyBase.Columns("DepotNO")
            Me.columnWIC_NewQty = MyBase.Columns("WIC_NewQty")
            Me.columnWIC_OldQty = MyBase.Columns("WIC_OldQty")
            Me.columnWIC_Difference = MyBase.Columns("WIC_Difference")
            Me.columnWIC_Process = MyBase.Columns("WIC_Process")
            Me.columnWIC_Type = MyBase.Columns("WIC_Type")
            Me.columnWIC_KnifeKType = MyBase.Columns("WIC_KnifeKType")
            Me.columnWIC_PDType = MyBase.Columns("WIC_PDType")
            Me.columnM_Name = MyBase.Columns("M_Name")
            Me.columnM_Gauge = MyBase.Columns("M_Gauge")
            Me.columnM_Unit = MyBase.Columns("M_Unit")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIndexNO = New Global.System.Data.DataColumn("IndexNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIndexNO)
            Me.columnWIC_NO = New Global.System.Data.DataColumn("WIC_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWIC_NO)
            Me.columnM_Code = New Global.System.Data.DataColumn("M_Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_Code)
            Me.columnDepotNO = New Global.System.Data.DataColumn("DepotNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepotNO)
            Me.columnWIC_NewQty = New Global.System.Data.DataColumn("WIC_NewQty", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWIC_NewQty)
            Me.columnWIC_OldQty = New Global.System.Data.DataColumn("WIC_OldQty", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWIC_OldQty)
            Me.columnWIC_Difference = New Global.System.Data.DataColumn("WIC_Difference", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWIC_Difference)
            Me.columnWIC_Process = New Global.System.Data.DataColumn("WIC_Process", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWIC_Process)
            Me.columnWIC_Type = New Global.System.Data.DataColumn("WIC_Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWIC_Type)
            Me.columnWIC_KnifeKType = New Global.System.Data.DataColumn("WIC_KnifeKType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWIC_KnifeKType)
            Me.columnWIC_PDType = New Global.System.Data.DataColumn("WIC_PDType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWIC_PDType)
            Me.columnM_Name = New Global.System.Data.DataColumn("M_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_Name)
            Me.columnM_Gauge = New Global.System.Data.DataColumn("M_Gauge", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_Gauge)
            Me.columnM_Unit = New Global.System.Data.DataColumn("M_Unit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_Unit)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewKnifeWareInventoryCheckProcessRow() As KnifeWareInventoryCheckProcessRow
            Return CType(Me.NewRow,KnifeWareInventoryCheckProcessRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New KnifeWareInventoryCheckProcessRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(KnifeWareInventoryCheckProcessRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.KnifeWareInventoryCheckProcessRowChangedEvent) Is Nothing) Then
                RaiseEvent KnifeWareInventoryCheckProcessRowChanged(Me, New KnifeWareInventoryCheckProcessRowChangeEvent(CType(e.Row,KnifeWareInventoryCheckProcessRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.KnifeWareInventoryCheckProcessRowChangingEvent) Is Nothing) Then
                RaiseEvent KnifeWareInventoryCheckProcessRowChanging(Me, New KnifeWareInventoryCheckProcessRowChangeEvent(CType(e.Row,KnifeWareInventoryCheckProcessRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.KnifeWareInventoryCheckProcessRowDeletedEvent) Is Nothing) Then
                RaiseEvent KnifeWareInventoryCheckProcessRowDeleted(Me, New KnifeWareInventoryCheckProcessRowChangeEvent(CType(e.Row,KnifeWareInventoryCheckProcessRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.KnifeWareInventoryCheckProcessRowDeletingEvent) Is Nothing) Then
                RaiseEvent KnifeWareInventoryCheckProcessRowDeleting(Me, New KnifeWareInventoryCheckProcessRowChangeEvent(CType(e.Row,KnifeWareInventoryCheckProcessRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveKnifeWareInventoryCheckProcessRow(ByVal row As KnifeWareInventoryCheckProcessRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As KnifeWareInventoryCheck = New KnifeWareInventoryCheck
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "KnifeWareInventoryCheckProcessDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class KnifeWareInventoryCheckRow
        Inherits Global.System.Data.DataRow
        
        Private tableKnifeWareInventoryCheck As KnifeWareInventoryCheckDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableKnifeWareInventoryCheck = CType(Me.Table,KnifeWareInventoryCheckDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AutoID() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventoryCheck.AutoIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““KnifeWareInventoryCheck””中列““AutoID””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventoryCheck.AutoIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WIC_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventoryCheck.WIC_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““KnifeWareInventoryCheck””中列““WIC_NO””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventoryCheck.WIC_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WIC_Date() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventoryCheck.WIC_DateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““KnifeWareInventoryCheck””中列““WIC_Date””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventoryCheck.WIC_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DepotNO() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventoryCheck.DepotNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““KnifeWareInventoryCheck””中列““DepotNO””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventoryCheck.DepotNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WIC_Remark() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventoryCheck.WIC_RemarkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““KnifeWareInventoryCheck””中列““WIC_Remark””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventoryCheck.WIC_RemarkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WIC_Action() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventoryCheck.WIC_ActionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““KnifeWareInventoryCheck””中列““WIC_Action””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventoryCheck.WIC_ActionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WIC_Check() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventoryCheck.WIC_CheckColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““KnifeWareInventoryCheck””中列““WIC_Check””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventoryCheck.WIC_CheckColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WIC_CheckAction() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventoryCheck.WIC_CheckActionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““KnifeWareInventoryCheck””中列““WIC_CheckAction””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventoryCheck.WIC_CheckActionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WIC_CheckType() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventoryCheck.WIC_CheckTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““KnifeWareInventoryCheck””中列““WIC_CheckType””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventoryCheck.WIC_CheckTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WIC_CheckRemark() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventoryCheck.WIC_CheckRemarkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““KnifeWareInventoryCheck””中列““WIC_CheckRemark””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventoryCheck.WIC_CheckRemarkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WIC_Detail() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventoryCheck.WIC_DetailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““KnifeWareInventoryCheck””中列““WIC_Detail””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventoryCheck.WIC_DetailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WIC_AccountCheck() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventoryCheck.WIC_AccountCheckColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““KnifeWareInventoryCheck””中列““WIC_AccountCheck””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventoryCheck.WIC_AccountCheckColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WIC_AccountCheckAction() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventoryCheck.WIC_AccountCheckActionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““KnifeWareInventoryCheck””中列““WIC_AccountCheckAction””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventoryCheck.WIC_AccountCheckActionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WIC_AccountCheckType() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventoryCheck.WIC_AccountCheckTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““KnifeWareInventoryCheck””中列““WIC_AccountCheckType””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventoryCheck.WIC_AccountCheckTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WIC_AccountCheckRemark() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventoryCheck.WIC_AccountCheckRemarkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““KnifeWareInventoryCheck””中列““WIC_AccountCheckRemark””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventoryCheck.WIC_AccountCheckRemarkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WIC_KnifeKType() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventoryCheck.WIC_KnifeKTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““KnifeWareInventoryCheck””中列““WIC_KnifeKType””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventoryCheck.WIC_KnifeKTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WIC_PDType() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventoryCheck.WIC_PDTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““KnifeWareInventoryCheck””中列““WIC_PDType””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventoryCheck.WIC_PDTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WH_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventoryCheck.WH_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““KnifeWareInventoryCheck””中列““WH_Name””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventoryCheck.WH_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CheckActionName() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventoryCheck.CheckActionNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““KnifeWareInventoryCheck””中列““CheckActionName””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventoryCheck.CheckActionNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ActionName() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventoryCheck.ActionNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““KnifeWareInventoryCheck””中列““ActionName””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventoryCheck.ActionNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WH_Pname() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventoryCheck.WH_PnameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““KnifeWareInventoryCheck””中列““WH_Pname””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventoryCheck.WH_PnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAutoIDNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventoryCheck.AutoIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAutoIDNull()
            Me(Me.tableKnifeWareInventoryCheck.AutoIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWIC_NONull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventoryCheck.WIC_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWIC_NONull()
            Me(Me.tableKnifeWareInventoryCheck.WIC_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWIC_DateNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventoryCheck.WIC_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWIC_DateNull()
            Me(Me.tableKnifeWareInventoryCheck.WIC_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepotNONull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventoryCheck.DepotNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepotNONull()
            Me(Me.tableKnifeWareInventoryCheck.DepotNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWIC_RemarkNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventoryCheck.WIC_RemarkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWIC_RemarkNull()
            Me(Me.tableKnifeWareInventoryCheck.WIC_RemarkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWIC_ActionNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventoryCheck.WIC_ActionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWIC_ActionNull()
            Me(Me.tableKnifeWareInventoryCheck.WIC_ActionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWIC_CheckNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventoryCheck.WIC_CheckColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWIC_CheckNull()
            Me(Me.tableKnifeWareInventoryCheck.WIC_CheckColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWIC_CheckActionNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventoryCheck.WIC_CheckActionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWIC_CheckActionNull()
            Me(Me.tableKnifeWareInventoryCheck.WIC_CheckActionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWIC_CheckTypeNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventoryCheck.WIC_CheckTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWIC_CheckTypeNull()
            Me(Me.tableKnifeWareInventoryCheck.WIC_CheckTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWIC_CheckRemarkNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventoryCheck.WIC_CheckRemarkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWIC_CheckRemarkNull()
            Me(Me.tableKnifeWareInventoryCheck.WIC_CheckRemarkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWIC_DetailNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventoryCheck.WIC_DetailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWIC_DetailNull()
            Me(Me.tableKnifeWareInventoryCheck.WIC_DetailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWIC_AccountCheckNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventoryCheck.WIC_AccountCheckColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWIC_AccountCheckNull()
            Me(Me.tableKnifeWareInventoryCheck.WIC_AccountCheckColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWIC_AccountCheckActionNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventoryCheck.WIC_AccountCheckActionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWIC_AccountCheckActionNull()
            Me(Me.tableKnifeWareInventoryCheck.WIC_AccountCheckActionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWIC_AccountCheckTypeNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventoryCheck.WIC_AccountCheckTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWIC_AccountCheckTypeNull()
            Me(Me.tableKnifeWareInventoryCheck.WIC_AccountCheckTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWIC_AccountCheckRemarkNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventoryCheck.WIC_AccountCheckRemarkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWIC_AccountCheckRemarkNull()
            Me(Me.tableKnifeWareInventoryCheck.WIC_AccountCheckRemarkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWIC_KnifeKTypeNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventoryCheck.WIC_KnifeKTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWIC_KnifeKTypeNull()
            Me(Me.tableKnifeWareInventoryCheck.WIC_KnifeKTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWIC_PDTypeNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventoryCheck.WIC_PDTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWIC_PDTypeNull()
            Me(Me.tableKnifeWareInventoryCheck.WIC_PDTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWH_NameNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventoryCheck.WH_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWH_NameNull()
            Me(Me.tableKnifeWareInventoryCheck.WH_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCheckActionNameNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventoryCheck.CheckActionNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCheckActionNameNull()
            Me(Me.tableKnifeWareInventoryCheck.CheckActionNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsActionNameNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventoryCheck.ActionNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetActionNameNull()
            Me(Me.tableKnifeWareInventoryCheck.ActionNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWH_PnameNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventoryCheck.WH_PnameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWH_PnameNull()
            Me(Me.tableKnifeWareInventoryCheck.WH_PnameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class KnifeWareInventoryCheckProcessRow
        Inherits Global.System.Data.DataRow
        
        Private tableKnifeWareInventoryCheckProcess As KnifeWareInventoryCheckProcessDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableKnifeWareInventoryCheckProcess = CType(Me.Table,KnifeWareInventoryCheckProcessDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IndexNO() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventoryCheckProcess.IndexNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““KnifeWareInventoryCheckProcess””中列““IndexNO””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventoryCheckProcess.IndexNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WIC_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventoryCheckProcess.WIC_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““KnifeWareInventoryCheckProcess””中列““WIC_NO””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventoryCheckProcess.WIC_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M_Code() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventoryCheckProcess.M_CodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““KnifeWareInventoryCheckProcess””中列““M_Code””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventoryCheckProcess.M_CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DepotNO() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventoryCheckProcess.DepotNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““KnifeWareInventoryCheckProcess””中列““DepotNO””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventoryCheckProcess.DepotNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WIC_NewQty() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventoryCheckProcess.WIC_NewQtyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““KnifeWareInventoryCheckProcess””中列““WIC_NewQty””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventoryCheckProcess.WIC_NewQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WIC_OldQty() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventoryCheckProcess.WIC_OldQtyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““KnifeWareInventoryCheckProcess””中列““WIC_OldQty””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventoryCheckProcess.WIC_OldQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WIC_Difference() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventoryCheckProcess.WIC_DifferenceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““KnifeWareInventoryCheckProcess””中列““WIC_Difference””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventoryCheckProcess.WIC_DifferenceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WIC_Process() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventoryCheckProcess.WIC_ProcessColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““KnifeWareInventoryCheckProcess””中列““WIC_Process””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventoryCheckProcess.WIC_ProcessColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WIC_Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventoryCheckProcess.WIC_TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““KnifeWareInventoryCheckProcess””中列““WIC_Type””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventoryCheckProcess.WIC_TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WIC_KnifeKType() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventoryCheckProcess.WIC_KnifeKTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““KnifeWareInventoryCheckProcess””中列““WIC_KnifeKType””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventoryCheckProcess.WIC_KnifeKTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WIC_PDType() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventoryCheckProcess.WIC_PDTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““KnifeWareInventoryCheckProcess””中列““WIC_PDType””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventoryCheckProcess.WIC_PDTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventoryCheckProcess.M_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““KnifeWareInventoryCheckProcess””中列““M_Name””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventoryCheckProcess.M_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M_Gauge() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventoryCheckProcess.M_GaugeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““KnifeWareInventoryCheckProcess””中列““M_Gauge””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventoryCheckProcess.M_GaugeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M_Unit() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventoryCheckProcess.M_UnitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表““KnifeWareInventoryCheckProcess””中列““M_Unit””的值为 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventoryCheckProcess.M_UnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIndexNONull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventoryCheckProcess.IndexNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIndexNONull()
            Me(Me.tableKnifeWareInventoryCheckProcess.IndexNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWIC_NONull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventoryCheckProcess.WIC_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWIC_NONull()
            Me(Me.tableKnifeWareInventoryCheckProcess.WIC_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM_CodeNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventoryCheckProcess.M_CodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM_CodeNull()
            Me(Me.tableKnifeWareInventoryCheckProcess.M_CodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepotNONull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventoryCheckProcess.DepotNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepotNONull()
            Me(Me.tableKnifeWareInventoryCheckProcess.DepotNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWIC_NewQtyNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventoryCheckProcess.WIC_NewQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWIC_NewQtyNull()
            Me(Me.tableKnifeWareInventoryCheckProcess.WIC_NewQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWIC_OldQtyNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventoryCheckProcess.WIC_OldQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWIC_OldQtyNull()
            Me(Me.tableKnifeWareInventoryCheckProcess.WIC_OldQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWIC_DifferenceNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventoryCheckProcess.WIC_DifferenceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWIC_DifferenceNull()
            Me(Me.tableKnifeWareInventoryCheckProcess.WIC_DifferenceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWIC_ProcessNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventoryCheckProcess.WIC_ProcessColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWIC_ProcessNull()
            Me(Me.tableKnifeWareInventoryCheckProcess.WIC_ProcessColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWIC_TypeNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventoryCheckProcess.WIC_TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWIC_TypeNull()
            Me(Me.tableKnifeWareInventoryCheckProcess.WIC_TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWIC_KnifeKTypeNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventoryCheckProcess.WIC_KnifeKTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWIC_KnifeKTypeNull()
            Me(Me.tableKnifeWareInventoryCheckProcess.WIC_KnifeKTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWIC_PDTypeNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventoryCheckProcess.WIC_PDTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWIC_PDTypeNull()
            Me(Me.tableKnifeWareInventoryCheckProcess.WIC_PDTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM_NameNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventoryCheckProcess.M_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM_NameNull()
            Me(Me.tableKnifeWareInventoryCheckProcess.M_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM_GaugeNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventoryCheckProcess.M_GaugeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM_GaugeNull()
            Me(Me.tableKnifeWareInventoryCheckProcess.M_GaugeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM_UnitNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventoryCheckProcess.M_UnitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM_UnitNull()
            Me(Me.tableKnifeWareInventoryCheckProcess.M_UnitColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class KnifeWareInventoryCheckRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As KnifeWareInventoryCheckRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As KnifeWareInventoryCheckRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As KnifeWareInventoryCheckRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class KnifeWareInventoryCheckProcessRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As KnifeWareInventoryCheckProcessRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As KnifeWareInventoryCheckProcessRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As KnifeWareInventoryCheckProcessRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
