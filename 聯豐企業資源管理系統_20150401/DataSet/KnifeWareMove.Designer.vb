'------------------------------------------------------------------------------
' <auto-generated>
'     這段程式碼是由工具產生的。
'     執行階段版本:2.0.50727.5420
'
'     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
'     變更將會遺失。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("KnifeWareMove"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class KnifeWareMove
    Inherits Global.System.Data.DataSet
    
    Private tableKnifeWareMove As KnifeWareMoveDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("KnifeWareMove")) Is Nothing) Then
                MyBase.Tables.Add(New KnifeWareMoveDataTable(ds.Tables("KnifeWareMove")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property _KnifeWareMove() As KnifeWareMoveDataTable
        Get
            Return Me.tableKnifeWareMove
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As KnifeWareMove = CType(MyBase.Clone,KnifeWareMove)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("KnifeWareMove")) Is Nothing) Then
                MyBase.Tables.Add(New KnifeWareMoveDataTable(ds.Tables("KnifeWareMove")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableKnifeWareMove = CType(MyBase.Tables("KnifeWareMove"),KnifeWareMoveDataTable)
        If (initTable = true) Then
            If (Not (Me.tableKnifeWareMove) Is Nothing) Then
                Me.tableKnifeWareMove.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "KnifeWareMove"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/KnifeWareMove.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableKnifeWareMove = New KnifeWareMoveDataTable
        MyBase.Tables.Add(Me.tableKnifeWareMove)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerialize_KnifeWareMove() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As KnifeWareMove = New KnifeWareMove
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub KnifeWareMoveRowChangeEventHandler(ByVal sender As Object, ByVal e As KnifeWareMoveRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class KnifeWareMoveDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIndexNo As Global.System.Data.DataColumn
        
        Private columnMV_NO As Global.System.Data.DataColumn
        
        Private columnMV_Number As Global.System.Data.DataColumn
        
        Private columnM_Code As Global.System.Data.DataColumn
        
        Private columnM_Name As Global.System.Data.DataColumn
        
        Private columnM_Gauge As Global.System.Data.DataColumn
        
        Private columnM_Unit As Global.System.Data.DataColumn
        
        Private columnMV_Qty As Global.System.Data.DataColumn
        
        Private columnMV_Date As Global.System.Data.DataColumn
        
        Private columnOS_BatchID As Global.System.Data.DataColumn
        
        Private columnPM_M_Code As Global.System.Data.DataColumn
        
        Private columnDepotNO As Global.System.Data.DataColumn
        
        Private columnMV_ChangeDepotNO As Global.System.Data.DataColumn
        
        Private columnMV_InOrOut As Global.System.Data.DataColumn
        
        Private columnMV_Remark As Global.System.Data.DataColumn
        
        Private columnMV_Ack As Global.System.Data.DataColumn
        
        Private columnMV_InAction As Global.System.Data.DataColumn
        
        Private columnMV_OutAction As Global.System.Data.DataColumn
        
        Private columnMV_Property As Global.System.Data.DataColumn
        
        Private columnMV_Check As Global.System.Data.DataColumn
        
        Private columnMV_CheckAction As Global.System.Data.DataColumn
        
        Private columnMV_CheckTYPE As Global.System.Data.DataColumn
        
        Private columnMV_CheckRemark As Global.System.Data.DataColumn
        
        Private columnMV_AckDate As Global.System.Data.DataColumn
        
        Private columnMV_EndQty As Global.System.Data.DataColumn
        
        Private columnKnifeType As Global.System.Data.DataColumn
        
        Private columnMV_OutActionName As Global.System.Data.DataColumn
        
        Private columnMV_InActionName As Global.System.Data.DataColumn
        
        Private columnMV_CheckActionName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "KnifeWareMove"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IndexNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIndexNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MV_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMV_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MV_NumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMV_Number
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_Code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M_GaugeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_Gauge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M_UnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_Unit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MV_QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMV_Qty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MV_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMV_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OS_BatchIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOS_BatchID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PM_M_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPM_M_Code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepotNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepotNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MV_ChangeDepotNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMV_ChangeDepotNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MV_InOrOutColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMV_InOrOut
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MV_RemarkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMV_Remark
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MV_AckColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMV_Ack
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MV_InActionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMV_InAction
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MV_OutActionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMV_OutAction
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MV_PropertyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMV_Property
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MV_CheckColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMV_Check
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MV_CheckActionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMV_CheckAction
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MV_CheckTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMV_CheckTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MV_CheckRemarkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMV_CheckRemark
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MV_AckDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMV_AckDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MV_EndQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMV_EndQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KnifeTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKnifeType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MV_OutActionNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMV_OutActionName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MV_InActionNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMV_InActionName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MV_CheckActionNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMV_CheckActionName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As KnifeWareMoveRow
            Get
                Return CType(Me.Rows(index),KnifeWareMoveRow)
            End Get
        End Property
        
        Public Event KnifeWareMoveRowChanging As KnifeWareMoveRowChangeEventHandler
        
        Public Event KnifeWareMoveRowChanged As KnifeWareMoveRowChangeEventHandler
        
        Public Event KnifeWareMoveRowDeleting As KnifeWareMoveRowChangeEventHandler
        
        Public Event KnifeWareMoveRowDeleted As KnifeWareMoveRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddKnifeWareMoveRow(ByVal row As KnifeWareMoveRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddKnifeWareMoveRow( _
                    ByVal IndexNo As String,  _
                    ByVal MV_NO As String,  _
                    ByVal MV_Number As String,  _
                    ByVal M_Code As String,  _
                    ByVal M_Name As String,  _
                    ByVal M_Gauge As String,  _
                    ByVal M_Unit As String,  _
                    ByVal MV_Qty As String,  _
                    ByVal MV_Date As String,  _
                    ByVal OS_BatchID As String,  _
                    ByVal PM_M_Code As String,  _
                    ByVal DepotNO As String,  _
                    ByVal MV_ChangeDepotNO As String,  _
                    ByVal MV_InOrOut As String,  _
                    ByVal MV_Remark As String,  _
                    ByVal MV_Ack As String,  _
                    ByVal MV_InAction As String,  _
                    ByVal MV_OutAction As String,  _
                    ByVal MV_Property As String,  _
                    ByVal MV_Check As String,  _
                    ByVal MV_CheckAction As String,  _
                    ByVal MV_CheckTYPE As String,  _
                    ByVal MV_CheckRemark As String,  _
                    ByVal MV_AckDate As String,  _
                    ByVal MV_EndQty As String,  _
                    ByVal KnifeType As String,  _
                    ByVal MV_OutActionName As String,  _
                    ByVal MV_InActionName As String,  _
                    ByVal MV_CheckActionName As String) As KnifeWareMoveRow
            Dim rowKnifeWareMoveRow As KnifeWareMoveRow = CType(Me.NewRow,KnifeWareMoveRow)
            Dim columnValuesArray() As Object = New Object() {IndexNo, MV_NO, MV_Number, M_Code, M_Name, M_Gauge, M_Unit, MV_Qty, MV_Date, OS_BatchID, PM_M_Code, DepotNO, MV_ChangeDepotNO, MV_InOrOut, MV_Remark, MV_Ack, MV_InAction, MV_OutAction, MV_Property, MV_Check, MV_CheckAction, MV_CheckTYPE, MV_CheckRemark, MV_AckDate, MV_EndQty, KnifeType, MV_OutActionName, MV_InActionName, MV_CheckActionName}
            rowKnifeWareMoveRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowKnifeWareMoveRow)
            Return rowKnifeWareMoveRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As KnifeWareMoveDataTable = CType(MyBase.Clone,KnifeWareMoveDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New KnifeWareMoveDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIndexNo = MyBase.Columns("IndexNo")
            Me.columnMV_NO = MyBase.Columns("MV_NO")
            Me.columnMV_Number = MyBase.Columns("MV_Number")
            Me.columnM_Code = MyBase.Columns("M_Code")
            Me.columnM_Name = MyBase.Columns("M_Name")
            Me.columnM_Gauge = MyBase.Columns("M_Gauge")
            Me.columnM_Unit = MyBase.Columns("M_Unit")
            Me.columnMV_Qty = MyBase.Columns("MV_Qty")
            Me.columnMV_Date = MyBase.Columns("MV_Date")
            Me.columnOS_BatchID = MyBase.Columns("OS_BatchID")
            Me.columnPM_M_Code = MyBase.Columns("PM_M_Code")
            Me.columnDepotNO = MyBase.Columns("DepotNO")
            Me.columnMV_ChangeDepotNO = MyBase.Columns("MV_ChangeDepotNO")
            Me.columnMV_InOrOut = MyBase.Columns("MV_InOrOut")
            Me.columnMV_Remark = MyBase.Columns("MV_Remark")
            Me.columnMV_Ack = MyBase.Columns("MV_Ack")
            Me.columnMV_InAction = MyBase.Columns("MV_InAction")
            Me.columnMV_OutAction = MyBase.Columns("MV_OutAction")
            Me.columnMV_Property = MyBase.Columns("MV_Property")
            Me.columnMV_Check = MyBase.Columns("MV_Check")
            Me.columnMV_CheckAction = MyBase.Columns("MV_CheckAction")
            Me.columnMV_CheckTYPE = MyBase.Columns("MV_CheckType")
            Me.columnMV_CheckRemark = MyBase.Columns("MV_CheckRemark")
            Me.columnMV_AckDate = MyBase.Columns("MV_AckDate")
            Me.columnMV_EndQty = MyBase.Columns("MV_EndQty")
            Me.columnKnifeType = MyBase.Columns("KnifeType")
            Me.columnMV_OutActionName = MyBase.Columns("MV_OutActionName")
            Me.columnMV_InActionName = MyBase.Columns("MV_InActionName")
            Me.columnMV_CheckActionName = MyBase.Columns("MV_CheckActionName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIndexNo = New Global.System.Data.DataColumn("IndexNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIndexNo)
            Me.columnMV_NO = New Global.System.Data.DataColumn("MV_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMV_NO)
            Me.columnMV_Number = New Global.System.Data.DataColumn("MV_Number", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMV_Number)
            Me.columnM_Code = New Global.System.Data.DataColumn("M_Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_Code)
            Me.columnM_Name = New Global.System.Data.DataColumn("M_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_Name)
            Me.columnM_Gauge = New Global.System.Data.DataColumn("M_Gauge", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_Gauge)
            Me.columnM_Unit = New Global.System.Data.DataColumn("M_Unit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_Unit)
            Me.columnMV_Qty = New Global.System.Data.DataColumn("MV_Qty", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMV_Qty)
            Me.columnMV_Date = New Global.System.Data.DataColumn("MV_Date", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMV_Date)
            Me.columnOS_BatchID = New Global.System.Data.DataColumn("OS_BatchID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOS_BatchID)
            Me.columnPM_M_Code = New Global.System.Data.DataColumn("PM_M_Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPM_M_Code)
            Me.columnDepotNO = New Global.System.Data.DataColumn("DepotNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepotNO)
            Me.columnMV_ChangeDepotNO = New Global.System.Data.DataColumn("MV_ChangeDepotNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMV_ChangeDepotNO)
            Me.columnMV_InOrOut = New Global.System.Data.DataColumn("MV_InOrOut", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMV_InOrOut)
            Me.columnMV_Remark = New Global.System.Data.DataColumn("MV_Remark", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMV_Remark)
            Me.columnMV_Ack = New Global.System.Data.DataColumn("MV_Ack", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMV_Ack)
            Me.columnMV_InAction = New Global.System.Data.DataColumn("MV_InAction", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMV_InAction)
            Me.columnMV_OutAction = New Global.System.Data.DataColumn("MV_OutAction", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMV_OutAction)
            Me.columnMV_Property = New Global.System.Data.DataColumn("MV_Property", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMV_Property)
            Me.columnMV_Check = New Global.System.Data.DataColumn("MV_Check", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMV_Check)
            Me.columnMV_CheckAction = New Global.System.Data.DataColumn("MV_CheckAction", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMV_CheckAction)
            Me.columnMV_CheckTYPE = New Global.System.Data.DataColumn("MV_CheckType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnMV_CheckTYPE.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "MV_CheckTYPE")
            Me.columnMV_CheckTYPE.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "MV_CheckTYPEColumn")
            Me.columnMV_CheckTYPE.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnMV_CheckTYPE")
            Me.columnMV_CheckTYPE.ExtendedProperties.Add("Generator_UserColumnName", "MV_CheckType")
            MyBase.Columns.Add(Me.columnMV_CheckTYPE)
            Me.columnMV_CheckRemark = New Global.System.Data.DataColumn("MV_CheckRemark", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMV_CheckRemark)
            Me.columnMV_AckDate = New Global.System.Data.DataColumn("MV_AckDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMV_AckDate)
            Me.columnMV_EndQty = New Global.System.Data.DataColumn("MV_EndQty", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMV_EndQty)
            Me.columnKnifeType = New Global.System.Data.DataColumn("KnifeType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKnifeType)
            Me.columnMV_OutActionName = New Global.System.Data.DataColumn("MV_OutActionName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMV_OutActionName)
            Me.columnMV_InActionName = New Global.System.Data.DataColumn("MV_InActionName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMV_InActionName)
            Me.columnMV_CheckActionName = New Global.System.Data.DataColumn("MV_CheckActionName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMV_CheckActionName)
            Me.ExtendedProperties.Add("Generator_TablePropName", "_KnifeWareMove")
            Me.ExtendedProperties.Add("Generator_UserTableName", "KnifeWareMove")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewKnifeWareMoveRow() As KnifeWareMoveRow
            Return CType(Me.NewRow,KnifeWareMoveRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New KnifeWareMoveRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(KnifeWareMoveRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.KnifeWareMoveRowChangedEvent) Is Nothing) Then
                RaiseEvent KnifeWareMoveRowChanged(Me, New KnifeWareMoveRowChangeEvent(CType(e.Row,KnifeWareMoveRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.KnifeWareMoveRowChangingEvent) Is Nothing) Then
                RaiseEvent KnifeWareMoveRowChanging(Me, New KnifeWareMoveRowChangeEvent(CType(e.Row,KnifeWareMoveRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.KnifeWareMoveRowDeletedEvent) Is Nothing) Then
                RaiseEvent KnifeWareMoveRowDeleted(Me, New KnifeWareMoveRowChangeEvent(CType(e.Row,KnifeWareMoveRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.KnifeWareMoveRowDeletingEvent) Is Nothing) Then
                RaiseEvent KnifeWareMoveRowDeleting(Me, New KnifeWareMoveRowChangeEvent(CType(e.Row,KnifeWareMoveRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveKnifeWareMoveRow(ByVal row As KnifeWareMoveRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As KnifeWareMove = New KnifeWareMove
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "KnifeWareMoveDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class KnifeWareMoveRow
        Inherits Global.System.Data.DataRow
        
        Private tableKnifeWareMove As KnifeWareMoveDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableKnifeWareMove = CType(Me.Table,KnifeWareMoveDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IndexNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareMove.IndexNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareMove' 中資料行 'IndexNo' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareMove.IndexNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MV_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareMove.MV_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareMove' 中資料行 'MV_NO' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareMove.MV_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MV_Number() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareMove.MV_NumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareMove' 中資料行 'MV_Number' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareMove.MV_NumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M_Code() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareMove.M_CodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareMove' 中資料行 'M_Code' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareMove.M_CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareMove.M_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareMove' 中資料行 'M_Name' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareMove.M_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M_Gauge() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareMove.M_GaugeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareMove' 中資料行 'M_Gauge' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareMove.M_GaugeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M_Unit() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareMove.M_UnitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareMove' 中資料行 'M_Unit' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareMove.M_UnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MV_Qty() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareMove.MV_QtyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareMove' 中資料行 'MV_Qty' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareMove.MV_QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MV_Date() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareMove.MV_DateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareMove' 中資料行 'MV_Date' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareMove.MV_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OS_BatchID() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareMove.OS_BatchIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareMove' 中資料行 'OS_BatchID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareMove.OS_BatchIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PM_M_Code() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareMove.PM_M_CodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareMove' 中資料行 'PM_M_Code' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareMove.PM_M_CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DepotNO() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareMove.DepotNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareMove' 中資料行 'DepotNO' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareMove.DepotNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MV_ChangeDepotNO() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareMove.MV_ChangeDepotNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareMove' 中資料行 'MV_ChangeDepotNO' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareMove.MV_ChangeDepotNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MV_InOrOut() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareMove.MV_InOrOutColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareMove' 中資料行 'MV_InOrOut' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareMove.MV_InOrOutColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MV_Remark() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareMove.MV_RemarkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareMove' 中資料行 'MV_Remark' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareMove.MV_RemarkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MV_Ack() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareMove.MV_AckColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareMove' 中資料行 'MV_Ack' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareMove.MV_AckColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MV_InAction() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareMove.MV_InActionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareMove' 中資料行 'MV_InAction' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareMove.MV_InActionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MV_OutAction() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareMove.MV_OutActionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareMove' 中資料行 'MV_OutAction' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareMove.MV_OutActionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MV_Property() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareMove.MV_PropertyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareMove' 中資料行 'MV_Property' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareMove.MV_PropertyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MV_Check() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareMove.MV_CheckColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareMove' 中資料行 'MV_Check' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareMove.MV_CheckColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MV_CheckAction() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareMove.MV_CheckActionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareMove' 中資料行 'MV_CheckAction' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareMove.MV_CheckActionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MV_CheckTYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareMove.MV_CheckTYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareMove' 中資料行 'MV_CheckType' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareMove.MV_CheckTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MV_CheckRemark() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareMove.MV_CheckRemarkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareMove' 中資料行 'MV_CheckRemark' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareMove.MV_CheckRemarkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MV_AckDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareMove.MV_AckDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareMove' 中資料行 'MV_AckDate' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareMove.MV_AckDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MV_EndQty() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareMove.MV_EndQtyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareMove' 中資料行 'MV_EndQty' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareMove.MV_EndQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KnifeType() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareMove.KnifeTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareMove' 中資料行 'KnifeType' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareMove.KnifeTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MV_OutActionName() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareMove.MV_OutActionNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareMove' 中資料行 'MV_OutActionName' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareMove.MV_OutActionNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MV_InActionName() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareMove.MV_InActionNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareMove' 中資料行 'MV_InActionName' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareMove.MV_InActionNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MV_CheckActionName() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareMove.MV_CheckActionNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareMove' 中資料行 'MV_CheckActionName' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareMove.MV_CheckActionNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIndexNoNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareMove.IndexNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIndexNoNull()
            Me(Me.tableKnifeWareMove.IndexNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMV_NONull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareMove.MV_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMV_NONull()
            Me(Me.tableKnifeWareMove.MV_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMV_NumberNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareMove.MV_NumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMV_NumberNull()
            Me(Me.tableKnifeWareMove.MV_NumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM_CodeNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareMove.M_CodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM_CodeNull()
            Me(Me.tableKnifeWareMove.M_CodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM_NameNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareMove.M_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM_NameNull()
            Me(Me.tableKnifeWareMove.M_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM_GaugeNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareMove.M_GaugeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM_GaugeNull()
            Me(Me.tableKnifeWareMove.M_GaugeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM_UnitNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareMove.M_UnitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM_UnitNull()
            Me(Me.tableKnifeWareMove.M_UnitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMV_QtyNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareMove.MV_QtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMV_QtyNull()
            Me(Me.tableKnifeWareMove.MV_QtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMV_DateNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareMove.MV_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMV_DateNull()
            Me(Me.tableKnifeWareMove.MV_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOS_BatchIDNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareMove.OS_BatchIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOS_BatchIDNull()
            Me(Me.tableKnifeWareMove.OS_BatchIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPM_M_CodeNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareMove.PM_M_CodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPM_M_CodeNull()
            Me(Me.tableKnifeWareMove.PM_M_CodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepotNONull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareMove.DepotNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepotNONull()
            Me(Me.tableKnifeWareMove.DepotNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMV_ChangeDepotNONull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareMove.MV_ChangeDepotNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMV_ChangeDepotNONull()
            Me(Me.tableKnifeWareMove.MV_ChangeDepotNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMV_InOrOutNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareMove.MV_InOrOutColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMV_InOrOutNull()
            Me(Me.tableKnifeWareMove.MV_InOrOutColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMV_RemarkNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareMove.MV_RemarkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMV_RemarkNull()
            Me(Me.tableKnifeWareMove.MV_RemarkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMV_AckNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareMove.MV_AckColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMV_AckNull()
            Me(Me.tableKnifeWareMove.MV_AckColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMV_InActionNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareMove.MV_InActionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMV_InActionNull()
            Me(Me.tableKnifeWareMove.MV_InActionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMV_OutActionNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareMove.MV_OutActionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMV_OutActionNull()
            Me(Me.tableKnifeWareMove.MV_OutActionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMV_PropertyNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareMove.MV_PropertyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMV_PropertyNull()
            Me(Me.tableKnifeWareMove.MV_PropertyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMV_CheckNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareMove.MV_CheckColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMV_CheckNull()
            Me(Me.tableKnifeWareMove.MV_CheckColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMV_CheckActionNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareMove.MV_CheckActionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMV_CheckActionNull()
            Me(Me.tableKnifeWareMove.MV_CheckActionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMV_CheckTYPENull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareMove.MV_CheckTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMV_CheckTYPENull()
            Me(Me.tableKnifeWareMove.MV_CheckTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMV_CheckRemarkNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareMove.MV_CheckRemarkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMV_CheckRemarkNull()
            Me(Me.tableKnifeWareMove.MV_CheckRemarkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMV_AckDateNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareMove.MV_AckDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMV_AckDateNull()
            Me(Me.tableKnifeWareMove.MV_AckDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMV_EndQtyNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareMove.MV_EndQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMV_EndQtyNull()
            Me(Me.tableKnifeWareMove.MV_EndQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKnifeTypeNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareMove.KnifeTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKnifeTypeNull()
            Me(Me.tableKnifeWareMove.KnifeTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMV_OutActionNameNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareMove.MV_OutActionNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMV_OutActionNameNull()
            Me(Me.tableKnifeWareMove.MV_OutActionNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMV_InActionNameNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareMove.MV_InActionNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMV_InActionNameNull()
            Me(Me.tableKnifeWareMove.MV_InActionNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMV_CheckActionNameNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareMove.MV_CheckActionNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMV_CheckActionNameNull()
            Me(Me.tableKnifeWareMove.MV_CheckActionNameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class KnifeWareMoveRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As KnifeWareMoveRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As KnifeWareMoveRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As KnifeWareMoveRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
