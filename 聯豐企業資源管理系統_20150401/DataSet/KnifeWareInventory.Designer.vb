'------------------------------------------------------------------------------
' <auto-generated>
'     這段程式碼是由工具產生的。
'     執行階段版本:2.0.50727.5420
'
'     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
'     變更將會遺失。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("KnifeWareInventory"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class KnifeWareInventory
    Inherits Global.System.Data.DataSet
    
    Private tableKnifeWareInventory As KnifeWareInventoryDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("KnifeWareInventory")) Is Nothing) Then
                MyBase.Tables.Add(New KnifeWareInventoryDataTable(ds.Tables("KnifeWareInventory")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property _KnifeWareInventory() As KnifeWareInventoryDataTable
        Get
            Return Me.tableKnifeWareInventory
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As KnifeWareInventory = CType(MyBase.Clone,KnifeWareInventory)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("KnifeWareInventory")) Is Nothing) Then
                MyBase.Tables.Add(New KnifeWareInventoryDataTable(ds.Tables("KnifeWareInventory")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableKnifeWareInventory = CType(MyBase.Tables("KnifeWareInventory"),KnifeWareInventoryDataTable)
        If (initTable = true) Then
            If (Not (Me.tableKnifeWareInventory) Is Nothing) Then
                Me.tableKnifeWareInventory.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "KnifeWareInventory"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/KnifeWareInventory.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableKnifeWareInventory = New KnifeWareInventoryDataTable
        MyBase.Tables.Add(Me.tableKnifeWareInventory)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerialize_KnifeWareInventory() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As KnifeWareInventory = New KnifeWareInventory
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub KnifeWareInventoryRowChangeEventHandler(ByVal sender As Object, ByVal e As KnifeWareInventoryRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class KnifeWareInventoryDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnM_Code As Global.System.Data.DataColumn
        
        Private columnPM_M_Name As Global.System.Data.DataColumn
        
        Private columnM_Gauge As Global.System.Data.DataColumn
        
        Private columnM_Unit As Global.System.Data.DataColumn
        
        Private columnM_Price As Global.System.Data.DataColumn
        
        Private columnM_Currency As Global.System.Data.DataColumn
        
        Private columnM_Maker As Global.System.Data.DataColumn
        
        Private columnM_AddDate As Global.System.Data.DataColumn
        
        Private columnM_EditDate As Global.System.Data.DataColumn
        
        Private columnM_Remark As Global.System.Data.DataColumn
        
        Private columnType3ID As Global.System.Data.DataColumn
        
        Private columnM_AccountCheck As Global.System.Data.DataColumn
        
        Private columnM_IsSub As Global.System.Data.DataColumn
        
        Private columnM_IsEnabled As Global.System.Data.DataColumn
        
        Private columnInUser As Global.System.Data.DataColumn
        
        Private columnM_Supplier As Global.System.Data.DataColumn
        
        Private columnM_SupplierNo As Global.System.Data.DataColumn
        
        Private columnM_SaveKuCun As Global.System.Data.DataColumn
        
        Private columnWI_Qty As Global.System.Data.DataColumn
        
        Private columnWH_ID As Global.System.Data.DataColumn
        
        Private columnWI_SafeQty As Global.System.Data.DataColumn
        
        Private columnType3Name As Global.System.Data.DataColumn
        
        Private columnType2Name As Global.System.Data.DataColumn
        
        Private columnType1Name As Global.System.Data.DataColumn
        
        Private columnMaterialTypeID As Global.System.Data.DataColumn
        
        Private columnType1ID As Global.System.Data.DataColumn
        
        Private columnType2ID As Global.System.Data.DataColumn
        
        Private columnMaterialTypeName As Global.System.Data.DataColumn
        
        Private columnWI_SQty As Global.System.Data.DataColumn
        
        Private columnWI_SReQty As Global.System.Data.DataColumn
        
        Private columnWH_Name As Global.System.Data.DataColumn
        
        Private columnWH_SName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "KnifeWareInventory"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_Code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PM_M_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPM_M_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M_GaugeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_Gauge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M_UnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_Unit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M_PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_Price
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M_CurrencyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_Currency
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M_MakerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_Maker
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M_AddDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_AddDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M_EditDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_EditDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M_RemarkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_Remark
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Type3IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType3ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M_AccountCheckColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_AccountCheck
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M_IsSubColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_IsSub
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M_IsEnabledColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_IsEnabled
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InUserColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInUser
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M_SupplierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_Supplier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M_SupplierNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_SupplierNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M_SaveKuCunColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_SaveKuCun
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WI_QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWI_Qty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WH_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWH_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WI_SafeQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWI_SafeQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Type3NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType3Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Type2NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType2Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Type1NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType1Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaterialTypeIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaterialTypeID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Type1IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType1ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Type2IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType2ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaterialTypeNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaterialTypeName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WI_SQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWI_SQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WI_SReQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWI_SReQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WH_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWH_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WH_SNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWH_SName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As KnifeWareInventoryRow
            Get
                Return CType(Me.Rows(index),KnifeWareInventoryRow)
            End Get
        End Property
        
        Public Event KnifeWareInventoryRowChanging As KnifeWareInventoryRowChangeEventHandler
        
        Public Event KnifeWareInventoryRowChanged As KnifeWareInventoryRowChangeEventHandler
        
        Public Event KnifeWareInventoryRowDeleting As KnifeWareInventoryRowChangeEventHandler
        
        Public Event KnifeWareInventoryRowDeleted As KnifeWareInventoryRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddKnifeWareInventoryRow(ByVal row As KnifeWareInventoryRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddKnifeWareInventoryRow( _
                    ByVal M_Code As String,  _
                    ByVal PM_M_Name As String,  _
                    ByVal M_Gauge As String,  _
                    ByVal M_Unit As String,  _
                    ByVal M_Price As String,  _
                    ByVal M_Currency As String,  _
                    ByVal M_Maker As String,  _
                    ByVal M_AddDate As String,  _
                    ByVal M_EditDate As String,  _
                    ByVal M_Remark As String,  _
                    ByVal Type3ID As String,  _
                    ByVal M_AccountCheck As String,  _
                    ByVal M_IsSub As String,  _
                    ByVal M_IsEnabled As String,  _
                    ByVal InUser As String,  _
                    ByVal M_Supplier As String,  _
                    ByVal M_SupplierNo As String,  _
                    ByVal M_SaveKuCun As String,  _
                    ByVal WI_Qty As String,  _
                    ByVal WH_ID As String,  _
                    ByVal WI_SafeQty As String,  _
                    ByVal Type3Name As String,  _
                    ByVal Type2Name As String,  _
                    ByVal Type1Name As String,  _
                    ByVal MaterialTypeID As String,  _
                    ByVal Type1ID As String,  _
                    ByVal Type2ID As String,  _
                    ByVal MaterialTypeName As String,  _
                    ByVal WI_SQty As String,  _
                    ByVal WI_SReQty As String,  _
                    ByVal WH_Name As String,  _
                    ByVal WH_SName As String) As KnifeWareInventoryRow
            Dim rowKnifeWareInventoryRow As KnifeWareInventoryRow = CType(Me.NewRow,KnifeWareInventoryRow)
            Dim columnValuesArray() As Object = New Object() {M_Code, PM_M_Name, M_Gauge, M_Unit, M_Price, M_Currency, M_Maker, M_AddDate, M_EditDate, M_Remark, Type3ID, M_AccountCheck, M_IsSub, M_IsEnabled, InUser, M_Supplier, M_SupplierNo, M_SaveKuCun, WI_Qty, WH_ID, WI_SafeQty, Type3Name, Type2Name, Type1Name, MaterialTypeID, Type1ID, Type2ID, MaterialTypeName, WI_SQty, WI_SReQty, WH_Name, WH_SName}
            rowKnifeWareInventoryRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowKnifeWareInventoryRow)
            Return rowKnifeWareInventoryRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As KnifeWareInventoryDataTable = CType(MyBase.Clone,KnifeWareInventoryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New KnifeWareInventoryDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnM_Code = MyBase.Columns("M_Code")
            Me.columnPM_M_Name = MyBase.Columns("PM_M_Name")
            Me.columnM_Gauge = MyBase.Columns("M_Gauge")
            Me.columnM_Unit = MyBase.Columns("M_Unit")
            Me.columnM_Price = MyBase.Columns("M_Price")
            Me.columnM_Currency = MyBase.Columns("M_Currency")
            Me.columnM_Maker = MyBase.Columns("M_Maker")
            Me.columnM_AddDate = MyBase.Columns("M_AddDate")
            Me.columnM_EditDate = MyBase.Columns("M_EditDate")
            Me.columnM_Remark = MyBase.Columns("M_Remark")
            Me.columnType3ID = MyBase.Columns("Type3ID")
            Me.columnM_AccountCheck = MyBase.Columns("M_AccountCheck")
            Me.columnM_IsSub = MyBase.Columns("M_IsSub")
            Me.columnM_IsEnabled = MyBase.Columns("M_IsEnabled")
            Me.columnInUser = MyBase.Columns("InUser")
            Me.columnM_Supplier = MyBase.Columns("M_Supplier")
            Me.columnM_SupplierNo = MyBase.Columns("M_SupplierNo")
            Me.columnM_SaveKuCun = MyBase.Columns("M_SaveKuCun")
            Me.columnWI_Qty = MyBase.Columns("WI_Qty")
            Me.columnWH_ID = MyBase.Columns("WH_ID")
            Me.columnWI_SafeQty = MyBase.Columns("WI_SafeQty")
            Me.columnType3Name = MyBase.Columns("Type3Name")
            Me.columnType2Name = MyBase.Columns("Type2Name")
            Me.columnType1Name = MyBase.Columns("Type1Name")
            Me.columnMaterialTypeID = MyBase.Columns("MaterialTypeID")
            Me.columnType1ID = MyBase.Columns("Type1ID")
            Me.columnType2ID = MyBase.Columns("Type2ID")
            Me.columnMaterialTypeName = MyBase.Columns("MaterialTypeName")
            Me.columnWI_SQty = MyBase.Columns("WI_SQty")
            Me.columnWI_SReQty = MyBase.Columns("WI_SReQty")
            Me.columnWH_Name = MyBase.Columns("WH_Name")
            Me.columnWH_SName = MyBase.Columns("WH_SName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnM_Code = New Global.System.Data.DataColumn("M_Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_Code)
            Me.columnPM_M_Name = New Global.System.Data.DataColumn("PM_M_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPM_M_Name)
            Me.columnM_Gauge = New Global.System.Data.DataColumn("M_Gauge", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_Gauge)
            Me.columnM_Unit = New Global.System.Data.DataColumn("M_Unit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_Unit)
            Me.columnM_Price = New Global.System.Data.DataColumn("M_Price", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_Price)
            Me.columnM_Currency = New Global.System.Data.DataColumn("M_Currency", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_Currency)
            Me.columnM_Maker = New Global.System.Data.DataColumn("M_Maker", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_Maker)
            Me.columnM_AddDate = New Global.System.Data.DataColumn("M_AddDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_AddDate)
            Me.columnM_EditDate = New Global.System.Data.DataColumn("M_EditDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_EditDate)
            Me.columnM_Remark = New Global.System.Data.DataColumn("M_Remark", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_Remark)
            Me.columnType3ID = New Global.System.Data.DataColumn("Type3ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType3ID)
            Me.columnM_AccountCheck = New Global.System.Data.DataColumn("M_AccountCheck", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_AccountCheck)
            Me.columnM_IsSub = New Global.System.Data.DataColumn("M_IsSub", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_IsSub)
            Me.columnM_IsEnabled = New Global.System.Data.DataColumn("M_IsEnabled", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_IsEnabled)
            Me.columnInUser = New Global.System.Data.DataColumn("InUser", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInUser)
            Me.columnM_Supplier = New Global.System.Data.DataColumn("M_Supplier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_Supplier)
            Me.columnM_SupplierNo = New Global.System.Data.DataColumn("M_SupplierNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_SupplierNo)
            Me.columnM_SaveKuCun = New Global.System.Data.DataColumn("M_SaveKuCun", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_SaveKuCun)
            Me.columnWI_Qty = New Global.System.Data.DataColumn("WI_Qty", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWI_Qty)
            Me.columnWH_ID = New Global.System.Data.DataColumn("WH_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWH_ID)
            Me.columnWI_SafeQty = New Global.System.Data.DataColumn("WI_SafeQty", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWI_SafeQty)
            Me.columnType3Name = New Global.System.Data.DataColumn("Type3Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType3Name)
            Me.columnType2Name = New Global.System.Data.DataColumn("Type2Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType2Name)
            Me.columnType1Name = New Global.System.Data.DataColumn("Type1Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType1Name)
            Me.columnMaterialTypeID = New Global.System.Data.DataColumn("MaterialTypeID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaterialTypeID)
            Me.columnType1ID = New Global.System.Data.DataColumn("Type1ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType1ID)
            Me.columnType2ID = New Global.System.Data.DataColumn("Type2ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType2ID)
            Me.columnMaterialTypeName = New Global.System.Data.DataColumn("MaterialTypeName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaterialTypeName)
            Me.columnWI_SQty = New Global.System.Data.DataColumn("WI_SQty", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWI_SQty)
            Me.columnWI_SReQty = New Global.System.Data.DataColumn("WI_SReQty", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWI_SReQty)
            Me.columnWH_Name = New Global.System.Data.DataColumn("WH_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWH_Name)
            Me.columnWH_SName = New Global.System.Data.DataColumn("WH_SName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWH_SName)
            Me.ExtendedProperties.Add("Generator_TablePropName", "_KnifeWareInventory")
            Me.ExtendedProperties.Add("Generator_UserTableName", "KnifeWareInventory")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewKnifeWareInventoryRow() As KnifeWareInventoryRow
            Return CType(Me.NewRow,KnifeWareInventoryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New KnifeWareInventoryRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(KnifeWareInventoryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.KnifeWareInventoryRowChangedEvent) Is Nothing) Then
                RaiseEvent KnifeWareInventoryRowChanged(Me, New KnifeWareInventoryRowChangeEvent(CType(e.Row,KnifeWareInventoryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.KnifeWareInventoryRowChangingEvent) Is Nothing) Then
                RaiseEvent KnifeWareInventoryRowChanging(Me, New KnifeWareInventoryRowChangeEvent(CType(e.Row,KnifeWareInventoryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.KnifeWareInventoryRowDeletedEvent) Is Nothing) Then
                RaiseEvent KnifeWareInventoryRowDeleted(Me, New KnifeWareInventoryRowChangeEvent(CType(e.Row,KnifeWareInventoryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.KnifeWareInventoryRowDeletingEvent) Is Nothing) Then
                RaiseEvent KnifeWareInventoryRowDeleting(Me, New KnifeWareInventoryRowChangeEvent(CType(e.Row,KnifeWareInventoryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveKnifeWareInventoryRow(ByVal row As KnifeWareInventoryRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As KnifeWareInventory = New KnifeWareInventory
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "KnifeWareInventoryDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class KnifeWareInventoryRow
        Inherits Global.System.Data.DataRow
        
        Private tableKnifeWareInventory As KnifeWareInventoryDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableKnifeWareInventory = CType(Me.Table,KnifeWareInventoryDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M_Code() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventory.M_CodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInventory' 中資料行 'M_Code' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventory.M_CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PM_M_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventory.PM_M_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInventory' 中資料行 'PM_M_Name' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventory.PM_M_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M_Gauge() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventory.M_GaugeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInventory' 中資料行 'M_Gauge' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventory.M_GaugeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M_Unit() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventory.M_UnitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInventory' 中資料行 'M_Unit' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventory.M_UnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M_Price() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventory.M_PriceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInventory' 中資料行 'M_Price' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventory.M_PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M_Currency() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventory.M_CurrencyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInventory' 中資料行 'M_Currency' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventory.M_CurrencyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M_Maker() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventory.M_MakerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInventory' 中資料行 'M_Maker' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventory.M_MakerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M_AddDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventory.M_AddDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInventory' 中資料行 'M_AddDate' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventory.M_AddDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M_EditDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventory.M_EditDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInventory' 中資料行 'M_EditDate' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventory.M_EditDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M_Remark() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventory.M_RemarkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInventory' 中資料行 'M_Remark' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventory.M_RemarkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type3ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventory.Type3IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInventory' 中資料行 'Type3ID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventory.Type3IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M_AccountCheck() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventory.M_AccountCheckColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInventory' 中資料行 'M_AccountCheck' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventory.M_AccountCheckColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M_IsSub() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventory.M_IsSubColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInventory' 中資料行 'M_IsSub' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventory.M_IsSubColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M_IsEnabled() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventory.M_IsEnabledColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInventory' 中資料行 'M_IsEnabled' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventory.M_IsEnabledColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InUser() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventory.InUserColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInventory' 中資料行 'InUser' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventory.InUserColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M_Supplier() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventory.M_SupplierColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInventory' 中資料行 'M_Supplier' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventory.M_SupplierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M_SupplierNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventory.M_SupplierNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInventory' 中資料行 'M_SupplierNo' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventory.M_SupplierNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M_SaveKuCun() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventory.M_SaveKuCunColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInventory' 中資料行 'M_SaveKuCun' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventory.M_SaveKuCunColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WI_Qty() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventory.WI_QtyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInventory' 中資料行 'WI_Qty' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventory.WI_QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WH_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventory.WH_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInventory' 中資料行 'WH_ID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventory.WH_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WI_SafeQty() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventory.WI_SafeQtyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInventory' 中資料行 'WI_SafeQty' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventory.WI_SafeQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type3Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventory.Type3NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInventory' 中資料行 'Type3Name' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventory.Type3NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type2Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventory.Type2NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInventory' 中資料行 'Type2Name' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventory.Type2NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type1Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventory.Type1NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInventory' 中資料行 'Type1Name' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventory.Type1NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MaterialTypeID() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventory.MaterialTypeIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInventory' 中資料行 'MaterialTypeID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventory.MaterialTypeIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type1ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventory.Type1IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInventory' 中資料行 'Type1ID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventory.Type1IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type2ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventory.Type2IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInventory' 中資料行 'Type2ID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventory.Type2IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MaterialTypeName() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventory.MaterialTypeNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInventory' 中資料行 'MaterialTypeName' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventory.MaterialTypeNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WI_SQty() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventory.WI_SQtyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInventory' 中資料行 'WI_SQty' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventory.WI_SQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WI_SReQty() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventory.WI_SReQtyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInventory' 中資料行 'WI_SReQty' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventory.WI_SReQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WH_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventory.WH_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInventory' 中資料行 'WH_Name' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventory.WH_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WH_SName() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInventory.WH_SNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInventory' 中資料行 'WH_SName' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInventory.WH_SNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM_CodeNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventory.M_CodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM_CodeNull()
            Me(Me.tableKnifeWareInventory.M_CodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPM_M_NameNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventory.PM_M_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPM_M_NameNull()
            Me(Me.tableKnifeWareInventory.PM_M_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM_GaugeNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventory.M_GaugeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM_GaugeNull()
            Me(Me.tableKnifeWareInventory.M_GaugeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM_UnitNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventory.M_UnitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM_UnitNull()
            Me(Me.tableKnifeWareInventory.M_UnitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM_PriceNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventory.M_PriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM_PriceNull()
            Me(Me.tableKnifeWareInventory.M_PriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM_CurrencyNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventory.M_CurrencyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM_CurrencyNull()
            Me(Me.tableKnifeWareInventory.M_CurrencyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM_MakerNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventory.M_MakerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM_MakerNull()
            Me(Me.tableKnifeWareInventory.M_MakerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM_AddDateNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventory.M_AddDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM_AddDateNull()
            Me(Me.tableKnifeWareInventory.M_AddDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM_EditDateNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventory.M_EditDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM_EditDateNull()
            Me(Me.tableKnifeWareInventory.M_EditDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM_RemarkNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventory.M_RemarkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM_RemarkNull()
            Me(Me.tableKnifeWareInventory.M_RemarkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsType3IDNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventory.Type3IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetType3IDNull()
            Me(Me.tableKnifeWareInventory.Type3IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM_AccountCheckNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventory.M_AccountCheckColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM_AccountCheckNull()
            Me(Me.tableKnifeWareInventory.M_AccountCheckColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM_IsSubNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventory.M_IsSubColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM_IsSubNull()
            Me(Me.tableKnifeWareInventory.M_IsSubColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM_IsEnabledNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventory.M_IsEnabledColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM_IsEnabledNull()
            Me(Me.tableKnifeWareInventory.M_IsEnabledColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInUserNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventory.InUserColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInUserNull()
            Me(Me.tableKnifeWareInventory.InUserColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM_SupplierNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventory.M_SupplierColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM_SupplierNull()
            Me(Me.tableKnifeWareInventory.M_SupplierColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM_SupplierNoNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventory.M_SupplierNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM_SupplierNoNull()
            Me(Me.tableKnifeWareInventory.M_SupplierNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM_SaveKuCunNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventory.M_SaveKuCunColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM_SaveKuCunNull()
            Me(Me.tableKnifeWareInventory.M_SaveKuCunColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWI_QtyNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventory.WI_QtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWI_QtyNull()
            Me(Me.tableKnifeWareInventory.WI_QtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWH_IDNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventory.WH_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWH_IDNull()
            Me(Me.tableKnifeWareInventory.WH_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWI_SafeQtyNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventory.WI_SafeQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWI_SafeQtyNull()
            Me(Me.tableKnifeWareInventory.WI_SafeQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsType3NameNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventory.Type3NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetType3NameNull()
            Me(Me.tableKnifeWareInventory.Type3NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsType2NameNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventory.Type2NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetType2NameNull()
            Me(Me.tableKnifeWareInventory.Type2NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsType1NameNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventory.Type1NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetType1NameNull()
            Me(Me.tableKnifeWareInventory.Type1NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaterialTypeIDNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventory.MaterialTypeIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaterialTypeIDNull()
            Me(Me.tableKnifeWareInventory.MaterialTypeIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsType1IDNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventory.Type1IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetType1IDNull()
            Me(Me.tableKnifeWareInventory.Type1IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsType2IDNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventory.Type2IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetType2IDNull()
            Me(Me.tableKnifeWareInventory.Type2IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaterialTypeNameNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventory.MaterialTypeNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaterialTypeNameNull()
            Me(Me.tableKnifeWareInventory.MaterialTypeNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWI_SQtyNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventory.WI_SQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWI_SQtyNull()
            Me(Me.tableKnifeWareInventory.WI_SQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWI_SReQtyNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventory.WI_SReQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWI_SReQtyNull()
            Me(Me.tableKnifeWareInventory.WI_SReQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWH_NameNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventory.WH_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWH_NameNull()
            Me(Me.tableKnifeWareInventory.WH_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWH_SNameNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInventory.WH_SNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWH_SNameNull()
            Me(Me.tableKnifeWareInventory.WH_SNameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class KnifeWareInventoryRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As KnifeWareInventoryRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As KnifeWareInventoryRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As KnifeWareInventoryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
