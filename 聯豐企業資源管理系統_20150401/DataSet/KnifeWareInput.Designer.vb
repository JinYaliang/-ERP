'------------------------------------------------------------------------------
' <auto-generated>
'     這段程式碼是由工具產生的。
'     執行階段版本:2.0.50727.5420
'
'     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
'     變更將會遺失。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("KnifeWareInput"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class KnifeWareInput
    Inherits Global.System.Data.DataSet
    
    Private tableKnifeWareInput As KnifeWareInputDataTable
    
    Private tableWareHouse As WareHouseDataTable
    
    Private tableDepartment As DepartmentDataTable
    
    Private relationWareHouse_KnifeWareInput As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("KnifeWareInput")) Is Nothing) Then
                MyBase.Tables.Add(New KnifeWareInputDataTable(ds.Tables("KnifeWareInput")))
            End If
            If (Not (ds.Tables("WareHouse")) Is Nothing) Then
                MyBase.Tables.Add(New WareHouseDataTable(ds.Tables("WareHouse")))
            End If
            If (Not (ds.Tables("Department")) Is Nothing) Then
                MyBase.Tables.Add(New DepartmentDataTable(ds.Tables("Department")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property _KnifeWareInput() As KnifeWareInputDataTable
        Get
            Return Me.tableKnifeWareInput
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property WareHouse() As WareHouseDataTable
        Get
            Return Me.tableWareHouse
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Department() As DepartmentDataTable
        Get
            Return Me.tableDepartment
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As KnifeWareInput = CType(MyBase.Clone,KnifeWareInput)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("KnifeWareInput")) Is Nothing) Then
                MyBase.Tables.Add(New KnifeWareInputDataTable(ds.Tables("KnifeWareInput")))
            End If
            If (Not (ds.Tables("WareHouse")) Is Nothing) Then
                MyBase.Tables.Add(New WareHouseDataTable(ds.Tables("WareHouse")))
            End If
            If (Not (ds.Tables("Department")) Is Nothing) Then
                MyBase.Tables.Add(New DepartmentDataTable(ds.Tables("Department")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableKnifeWareInput = CType(MyBase.Tables("KnifeWareInput"),KnifeWareInputDataTable)
        If (initTable = true) Then
            If (Not (Me.tableKnifeWareInput) Is Nothing) Then
                Me.tableKnifeWareInput.InitVars
            End If
        End If
        Me.tableWareHouse = CType(MyBase.Tables("WareHouse"),WareHouseDataTable)
        If (initTable = true) Then
            If (Not (Me.tableWareHouse) Is Nothing) Then
                Me.tableWareHouse.InitVars
            End If
        End If
        Me.tableDepartment = CType(MyBase.Tables("Department"),DepartmentDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDepartment) Is Nothing) Then
                Me.tableDepartment.InitVars
            End If
        End If
        Me.relationWareHouse_KnifeWareInput = Me.Relations("WareHouse_KnifeWareInput")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "KnifeWareInput"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/KnifeWareInput.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableKnifeWareInput = New KnifeWareInputDataTable
        MyBase.Tables.Add(Me.tableKnifeWareInput)
        Me.tableWareHouse = New WareHouseDataTable
        MyBase.Tables.Add(Me.tableWareHouse)
        Me.tableDepartment = New DepartmentDataTable
        MyBase.Tables.Add(Me.tableDepartment)
        Me.relationWareHouse_KnifeWareInput = New Global.System.Data.DataRelation("WareHouse_KnifeWareInput", New Global.System.Data.DataColumn() {Me.tableWareHouse.WH_IDColumn}, New Global.System.Data.DataColumn() {Me.tableKnifeWareInput.WH_IDColumn}, false)
        Me.Relations.Add(Me.relationWareHouse_KnifeWareInput)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerialize_KnifeWareInput() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeWareHouse() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDepartment() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As KnifeWareInput = New KnifeWareInput
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub KnifeWareInputRowChangeEventHandler(ByVal sender As Object, ByVal e As KnifeWareInputRowChangeEvent)
    
    Public Delegate Sub WareHouseRowChangeEventHandler(ByVal sender As Object, ByVal e As WareHouseRowChangeEvent)
    
    Public Delegate Sub DepartmentRowChangeEventHandler(ByVal sender As Object, ByVal e As DepartmentRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class KnifeWareInputDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAutoID As Global.System.Data.DataColumn
        
        Private columnWIP_NUM As Global.System.Data.DataColumn
        
        Private columnWIP_ID As Global.System.Data.DataColumn
        
        Private columnWIP_Type As Global.System.Data.DataColumn
        
        Private columnM_Code As Global.System.Data.DataColumn
        
        Private columnWIP_Qty As Global.System.Data.DataColumn
        
        Private columnWIP_AddDate As Global.System.Data.DataColumn
        
        Private columnWH_ID As Global.System.Data.DataColumn
        
        Private columnOS_BatchID As Global.System.Data.DataColumn
        
        Private columnWIP_Action As Global.System.Data.DataColumn
        
        Private columnWIP_EditDate As Global.System.Data.DataColumn
        
        Private columnWIP_Remark As Global.System.Data.DataColumn
        
        Private columnDPT_ID As Global.System.Data.DataColumn
        
        Private columnWIP_Check As Global.System.Data.DataColumn
        
        Private columnWIP_CheckAction As Global.System.Data.DataColumn
        
        Private columnWIP_CheckDate As Global.System.Data.DataColumn
        
        Private columnWIP_CheckRemark As Global.System.Data.DataColumn
        
        Private columnWIP_ReCheck As Global.System.Data.DataColumn
        
        Private columnWIP_ReCheckAction As Global.System.Data.DataColumn
        
        Private columnWIP_ReCheckDate As Global.System.Data.DataColumn
        
        Private columnWIP_ReCheckRemark As Global.System.Data.DataColumn
        
        Private columnWIP_EndQty As Global.System.Data.DataColumn
        
        Private columnCardID As Global.System.Data.DataColumn
        
        Private columnKnifeType As Global.System.Data.DataColumn
        
        Private columnM_Name As Global.System.Data.DataColumn
        
        Private columnM_Gauge As Global.System.Data.DataColumn
        
        Private columnM_Unit As Global.System.Data.DataColumn
        
        Private columnWIP_ActionName As Global.System.Data.DataColumn
        
        Private columnWIP_CheckActionName As Global.System.Data.DataColumn
        
        Private columnWH_Name As Global.System.Data.DataColumn
        
        Private columnWH_PName As Global.System.Data.DataColumn
        
        Private columnDPT_Name As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "KnifeWareInput"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AutoIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAutoID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WIP_NUMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWIP_NUM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WIP_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWIP_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WIP_TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWIP_Type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_Code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WIP_QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWIP_Qty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WIP_AddDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWIP_AddDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WH_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWH_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OS_BatchIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOS_BatchID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WIP_ActionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWIP_Action
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WIP_EditDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWIP_EditDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WIP_RemarkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWIP_Remark
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DPT_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDPT_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WIP_CheckColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWIP_Check
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WIP_CheckActionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWIP_CheckAction
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WIP_CheckDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWIP_CheckDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WIP_CheckRemarkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWIP_CheckRemark
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WIP_ReCheckColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWIP_ReCheck
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WIP_ReCheckActionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWIP_ReCheckAction
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WIP_ReCheckDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWIP_ReCheckDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WIP_ReCheckRemarkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWIP_ReCheckRemark
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WIP_EndQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWIP_EndQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CardIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCardID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KnifeTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKnifeType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M_GaugeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_Gauge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M_UnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_Unit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WIP_ActionNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWIP_ActionName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WIP_CheckActionNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWIP_CheckActionName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WH_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWH_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WH_PNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWH_PName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DPT_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDPT_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As KnifeWareInputRow
            Get
                Return CType(Me.Rows(index),KnifeWareInputRow)
            End Get
        End Property
        
        Public Event KnifeWareInputRowChanging As KnifeWareInputRowChangeEventHandler
        
        Public Event KnifeWareInputRowChanged As KnifeWareInputRowChangeEventHandler
        
        Public Event KnifeWareInputRowDeleting As KnifeWareInputRowChangeEventHandler
        
        Public Event KnifeWareInputRowDeleted As KnifeWareInputRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddKnifeWareInputRow(ByVal row As KnifeWareInputRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddKnifeWareInputRow( _
                    ByVal AutoID As String,  _
                    ByVal WIP_NUM As String,  _
                    ByVal WIP_ID As String,  _
                    ByVal WIP_Type As String,  _
                    ByVal M_Code As String,  _
                    ByVal WIP_Qty As Integer,  _
                    ByVal WIP_AddDate As String,  _
                    ByVal parentWareHouseRowByWareHouse_KnifeWareInput As WareHouseRow,  _
                    ByVal OS_BatchID As String,  _
                    ByVal WIP_Action As String,  _
                    ByVal WIP_EditDate As String,  _
                    ByVal WIP_Remark As String,  _
                    ByVal DPT_ID As String,  _
                    ByVal WIP_Check As String,  _
                    ByVal WIP_CheckAction As String,  _
                    ByVal WIP_CheckDate As String,  _
                    ByVal WIP_CheckRemark As String,  _
                    ByVal WIP_ReCheck As String,  _
                    ByVal WIP_ReCheckAction As String,  _
                    ByVal WIP_ReCheckDate As String,  _
                    ByVal WIP_ReCheckRemark As String,  _
                    ByVal WIP_EndQty As String,  _
                    ByVal CardID As String,  _
                    ByVal KnifeType As String,  _
                    ByVal M_Name As String,  _
                    ByVal M_Gauge As String,  _
                    ByVal M_Unit As String,  _
                    ByVal WIP_ActionName As String,  _
                    ByVal WIP_CheckActionName As String,  _
                    ByVal WH_Name As String,  _
                    ByVal WH_PName As String,  _
                    ByVal DPT_Name As String) As KnifeWareInputRow
            Dim rowKnifeWareInputRow As KnifeWareInputRow = CType(Me.NewRow,KnifeWareInputRow)
            Dim columnValuesArray() As Object = New Object() {AutoID, WIP_NUM, WIP_ID, WIP_Type, M_Code, WIP_Qty, WIP_AddDate, Nothing, OS_BatchID, WIP_Action, WIP_EditDate, WIP_Remark, DPT_ID, WIP_Check, WIP_CheckAction, WIP_CheckDate, WIP_CheckRemark, WIP_ReCheck, WIP_ReCheckAction, WIP_ReCheckDate, WIP_ReCheckRemark, WIP_EndQty, CardID, KnifeType, M_Name, M_Gauge, M_Unit, WIP_ActionName, WIP_CheckActionName, WH_Name, WH_PName, DPT_Name}
            If (Not (parentWareHouseRowByWareHouse_KnifeWareInput) Is Nothing) Then
                columnValuesArray(7) = parentWareHouseRowByWareHouse_KnifeWareInput(1)
            End If
            rowKnifeWareInputRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowKnifeWareInputRow)
            Return rowKnifeWareInputRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As KnifeWareInputDataTable = CType(MyBase.Clone,KnifeWareInputDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New KnifeWareInputDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAutoID = MyBase.Columns("AutoID")
            Me.columnWIP_NUM = MyBase.Columns("WIP_NUM")
            Me.columnWIP_ID = MyBase.Columns("WIP_ID")
            Me.columnWIP_Type = MyBase.Columns("WIP_Type")
            Me.columnM_Code = MyBase.Columns("M_Code")
            Me.columnWIP_Qty = MyBase.Columns("WIP_Qty")
            Me.columnWIP_AddDate = MyBase.Columns("WIP_AddDate")
            Me.columnWH_ID = MyBase.Columns("WH_ID")
            Me.columnOS_BatchID = MyBase.Columns("OS_BatchID")
            Me.columnWIP_Action = MyBase.Columns("WIP_Action")
            Me.columnWIP_EditDate = MyBase.Columns("WIP_EditDate")
            Me.columnWIP_Remark = MyBase.Columns("WIP_Remark")
            Me.columnDPT_ID = MyBase.Columns("DPT_ID")
            Me.columnWIP_Check = MyBase.Columns("WIP_Check")
            Me.columnWIP_CheckAction = MyBase.Columns("WIP_CheckAction")
            Me.columnWIP_CheckDate = MyBase.Columns("WIP_CheckDate")
            Me.columnWIP_CheckRemark = MyBase.Columns("WIP_CheckRemark")
            Me.columnWIP_ReCheck = MyBase.Columns("WIP_ReCheck")
            Me.columnWIP_ReCheckAction = MyBase.Columns("WIP_ReCheckAction")
            Me.columnWIP_ReCheckDate = MyBase.Columns("WIP_ReCheckDate")
            Me.columnWIP_ReCheckRemark = MyBase.Columns("WIP_ReCheckRemark")
            Me.columnWIP_EndQty = MyBase.Columns("WIP_EndQty")
            Me.columnCardID = MyBase.Columns("CardID")
            Me.columnKnifeType = MyBase.Columns("KnifeType")
            Me.columnM_Name = MyBase.Columns("M_Name")
            Me.columnM_Gauge = MyBase.Columns("M_Gauge")
            Me.columnM_Unit = MyBase.Columns("M_Unit")
            Me.columnWIP_ActionName = MyBase.Columns("WIP_ActionName")
            Me.columnWIP_CheckActionName = MyBase.Columns("WIP_CheckActionName")
            Me.columnWH_Name = MyBase.Columns("WH_Name")
            Me.columnWH_PName = MyBase.Columns("WH_PName")
            Me.columnDPT_Name = MyBase.Columns("DPT_Name")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAutoID = New Global.System.Data.DataColumn("AutoID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAutoID)
            Me.columnWIP_NUM = New Global.System.Data.DataColumn("WIP_NUM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWIP_NUM)
            Me.columnWIP_ID = New Global.System.Data.DataColumn("WIP_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWIP_ID)
            Me.columnWIP_Type = New Global.System.Data.DataColumn("WIP_Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWIP_Type)
            Me.columnM_Code = New Global.System.Data.DataColumn("M_Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_Code)
            Me.columnWIP_Qty = New Global.System.Data.DataColumn("WIP_Qty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWIP_Qty)
            Me.columnWIP_AddDate = New Global.System.Data.DataColumn("WIP_AddDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWIP_AddDate)
            Me.columnWH_ID = New Global.System.Data.DataColumn("WH_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWH_ID)
            Me.columnOS_BatchID = New Global.System.Data.DataColumn("OS_BatchID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOS_BatchID)
            Me.columnWIP_Action = New Global.System.Data.DataColumn("WIP_Action", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWIP_Action)
            Me.columnWIP_EditDate = New Global.System.Data.DataColumn("WIP_EditDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWIP_EditDate)
            Me.columnWIP_Remark = New Global.System.Data.DataColumn("WIP_Remark", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWIP_Remark)
            Me.columnDPT_ID = New Global.System.Data.DataColumn("DPT_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDPT_ID)
            Me.columnWIP_Check = New Global.System.Data.DataColumn("WIP_Check", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWIP_Check)
            Me.columnWIP_CheckAction = New Global.System.Data.DataColumn("WIP_CheckAction", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWIP_CheckAction)
            Me.columnWIP_CheckDate = New Global.System.Data.DataColumn("WIP_CheckDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWIP_CheckDate)
            Me.columnWIP_CheckRemark = New Global.System.Data.DataColumn("WIP_CheckRemark", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWIP_CheckRemark)
            Me.columnWIP_ReCheck = New Global.System.Data.DataColumn("WIP_ReCheck", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWIP_ReCheck)
            Me.columnWIP_ReCheckAction = New Global.System.Data.DataColumn("WIP_ReCheckAction", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWIP_ReCheckAction)
            Me.columnWIP_ReCheckDate = New Global.System.Data.DataColumn("WIP_ReCheckDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWIP_ReCheckDate)
            Me.columnWIP_ReCheckRemark = New Global.System.Data.DataColumn("WIP_ReCheckRemark", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWIP_ReCheckRemark)
            Me.columnWIP_EndQty = New Global.System.Data.DataColumn("WIP_EndQty", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWIP_EndQty)
            Me.columnCardID = New Global.System.Data.DataColumn("CardID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCardID)
            Me.columnKnifeType = New Global.System.Data.DataColumn("KnifeType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKnifeType)
            Me.columnM_Name = New Global.System.Data.DataColumn("M_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_Name)
            Me.columnM_Gauge = New Global.System.Data.DataColumn("M_Gauge", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_Gauge)
            Me.columnM_Unit = New Global.System.Data.DataColumn("M_Unit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_Unit)
            Me.columnWIP_ActionName = New Global.System.Data.DataColumn("WIP_ActionName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWIP_ActionName)
            Me.columnWIP_CheckActionName = New Global.System.Data.DataColumn("WIP_CheckActionName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWIP_CheckActionName)
            Me.columnWH_Name = New Global.System.Data.DataColumn("WH_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWH_Name)
            Me.columnWH_PName = New Global.System.Data.DataColumn("WH_PName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWH_PName)
            Me.columnDPT_Name = New Global.System.Data.DataColumn("DPT_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDPT_Name)
            Me.ExtendedProperties.Add("Generator_TablePropName", "_KnifeWareInput")
            Me.ExtendedProperties.Add("Generator_UserTableName", "KnifeWareInput")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewKnifeWareInputRow() As KnifeWareInputRow
            Return CType(Me.NewRow,KnifeWareInputRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New KnifeWareInputRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(KnifeWareInputRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.KnifeWareInputRowChangedEvent) Is Nothing) Then
                RaiseEvent KnifeWareInputRowChanged(Me, New KnifeWareInputRowChangeEvent(CType(e.Row,KnifeWareInputRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.KnifeWareInputRowChangingEvent) Is Nothing) Then
                RaiseEvent KnifeWareInputRowChanging(Me, New KnifeWareInputRowChangeEvent(CType(e.Row,KnifeWareInputRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.KnifeWareInputRowDeletedEvent) Is Nothing) Then
                RaiseEvent KnifeWareInputRowDeleted(Me, New KnifeWareInputRowChangeEvent(CType(e.Row,KnifeWareInputRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.KnifeWareInputRowDeletingEvent) Is Nothing) Then
                RaiseEvent KnifeWareInputRowDeleting(Me, New KnifeWareInputRowChangeEvent(CType(e.Row,KnifeWareInputRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveKnifeWareInputRow(ByVal row As KnifeWareInputRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As KnifeWareInput = New KnifeWareInput
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "KnifeWareInputDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class WareHouseDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAutoID As Global.System.Data.DataColumn
        
        Private columnWH_ID As Global.System.Data.DataColumn
        
        Private columnWH_Name As Global.System.Data.DataColumn
        
        Private columnWH_PID As Global.System.Data.DataColumn
        
        Private columnWH_Key As Global.System.Data.DataColumn
        
        Private columnWH_Type As Global.System.Data.DataColumn
        
        Private columnWH_Remark As Global.System.Data.DataColumn
        
        Private columnWH_Action As Global.System.Data.DataColumn
        
        Private columnCO_ID As Global.System.Data.DataColumn
        
        Private columnNeedCheck As Global.System.Data.DataColumn
        
        Private columnPrintBulk As Global.System.Data.DataColumn
        
        Private columnNeedCheckInput As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "WareHouse"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AutoIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAutoID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WH_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWH_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WH_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWH_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WH_PIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWH_PID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WH_KeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWH_Key
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WH_TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWH_Type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WH_RemarkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWH_Remark
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WH_ActionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWH_Action
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CO_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCO_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NeedCheckColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNeedCheck
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrintBulkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrintBulk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NeedCheckInputColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNeedCheckInput
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As WareHouseRow
            Get
                Return CType(Me.Rows(index),WareHouseRow)
            End Get
        End Property
        
        Public Event WareHouseRowChanging As WareHouseRowChangeEventHandler
        
        Public Event WareHouseRowChanged As WareHouseRowChangeEventHandler
        
        Public Event WareHouseRowDeleting As WareHouseRowChangeEventHandler
        
        Public Event WareHouseRowDeleted As WareHouseRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddWareHouseRow(ByVal row As WareHouseRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddWareHouseRow(ByVal AutoID As String, ByVal WH_ID As String, ByVal WH_Name As String, ByVal WH_PID As String, ByVal WH_Key As String, ByVal WH_Type As String, ByVal WH_Remark As String, ByVal WH_Action As String, ByVal CO_ID As String, ByVal NeedCheck As String, ByVal PrintBulk As String, ByVal NeedCheckInput As String) As WareHouseRow
            Dim rowWareHouseRow As WareHouseRow = CType(Me.NewRow,WareHouseRow)
            Dim columnValuesArray() As Object = New Object() {AutoID, WH_ID, WH_Name, WH_PID, WH_Key, WH_Type, WH_Remark, WH_Action, CO_ID, NeedCheck, PrintBulk, NeedCheckInput}
            rowWareHouseRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowWareHouseRow)
            Return rowWareHouseRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As WareHouseDataTable = CType(MyBase.Clone,WareHouseDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New WareHouseDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAutoID = MyBase.Columns("AutoID")
            Me.columnWH_ID = MyBase.Columns("WH_ID")
            Me.columnWH_Name = MyBase.Columns("WH_Name")
            Me.columnWH_PID = MyBase.Columns("WH_PID")
            Me.columnWH_Key = MyBase.Columns("WH_Key")
            Me.columnWH_Type = MyBase.Columns("WH_Type")
            Me.columnWH_Remark = MyBase.Columns("WH_Remark")
            Me.columnWH_Action = MyBase.Columns("WH_Action")
            Me.columnCO_ID = MyBase.Columns("CO_ID")
            Me.columnNeedCheck = MyBase.Columns("NeedCheck")
            Me.columnPrintBulk = MyBase.Columns("PrintBulk")
            Me.columnNeedCheckInput = MyBase.Columns("NeedCheckInput")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAutoID = New Global.System.Data.DataColumn("AutoID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAutoID)
            Me.columnWH_ID = New Global.System.Data.DataColumn("WH_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWH_ID)
            Me.columnWH_Name = New Global.System.Data.DataColumn("WH_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWH_Name)
            Me.columnWH_PID = New Global.System.Data.DataColumn("WH_PID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWH_PID)
            Me.columnWH_Key = New Global.System.Data.DataColumn("WH_Key", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWH_Key)
            Me.columnWH_Type = New Global.System.Data.DataColumn("WH_Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWH_Type)
            Me.columnWH_Remark = New Global.System.Data.DataColumn("WH_Remark", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWH_Remark)
            Me.columnWH_Action = New Global.System.Data.DataColumn("WH_Action", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWH_Action)
            Me.columnCO_ID = New Global.System.Data.DataColumn("CO_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCO_ID)
            Me.columnNeedCheck = New Global.System.Data.DataColumn("NeedCheck", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNeedCheck)
            Me.columnPrintBulk = New Global.System.Data.DataColumn("PrintBulk", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrintBulk)
            Me.columnNeedCheckInput = New Global.System.Data.DataColumn("NeedCheckInput", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNeedCheckInput)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewWareHouseRow() As WareHouseRow
            Return CType(Me.NewRow,WareHouseRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New WareHouseRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(WareHouseRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.WareHouseRowChangedEvent) Is Nothing) Then
                RaiseEvent WareHouseRowChanged(Me, New WareHouseRowChangeEvent(CType(e.Row,WareHouseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.WareHouseRowChangingEvent) Is Nothing) Then
                RaiseEvent WareHouseRowChanging(Me, New WareHouseRowChangeEvent(CType(e.Row,WareHouseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.WareHouseRowDeletedEvent) Is Nothing) Then
                RaiseEvent WareHouseRowDeleted(Me, New WareHouseRowChangeEvent(CType(e.Row,WareHouseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.WareHouseRowDeletingEvent) Is Nothing) Then
                RaiseEvent WareHouseRowDeleting(Me, New WareHouseRowChangeEvent(CType(e.Row,WareHouseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveWareHouseRow(ByVal row As WareHouseRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As KnifeWareInput = New KnifeWareInput
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "WareHouseDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DepartmentDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAutoID As Global.System.Data.DataColumn
        
        Private columnDPT_ID As Global.System.Data.DataColumn
        
        Private columnDPT_Name As Global.System.Data.DataColumn
        
        Private columnDPT_PID As Global.System.Data.DataColumn
        
        Private columnDPT_PName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Department"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AutoIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAutoID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DPT_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDPT_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DPT_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDPT_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DPT_PIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDPT_PID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DPT_PNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDPT_PName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DepartmentRow
            Get
                Return CType(Me.Rows(index),DepartmentRow)
            End Get
        End Property
        
        Public Event DepartmentRowChanging As DepartmentRowChangeEventHandler
        
        Public Event DepartmentRowChanged As DepartmentRowChangeEventHandler
        
        Public Event DepartmentRowDeleting As DepartmentRowChangeEventHandler
        
        Public Event DepartmentRowDeleted As DepartmentRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDepartmentRow(ByVal row As DepartmentRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDepartmentRow(ByVal AutoID As String, ByVal DPT_ID As String, ByVal DPT_Name As String, ByVal DPT_PID As String, ByVal DPT_PName As String) As DepartmentRow
            Dim rowDepartmentRow As DepartmentRow = CType(Me.NewRow,DepartmentRow)
            Dim columnValuesArray() As Object = New Object() {AutoID, DPT_ID, DPT_Name, DPT_PID, DPT_PName}
            rowDepartmentRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDepartmentRow)
            Return rowDepartmentRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DepartmentDataTable = CType(MyBase.Clone,DepartmentDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DepartmentDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAutoID = MyBase.Columns("AutoID")
            Me.columnDPT_ID = MyBase.Columns("DPT_ID")
            Me.columnDPT_Name = MyBase.Columns("DPT_Name")
            Me.columnDPT_PID = MyBase.Columns("DPT_PID")
            Me.columnDPT_PName = MyBase.Columns("DPT_PName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAutoID = New Global.System.Data.DataColumn("AutoID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAutoID)
            Me.columnDPT_ID = New Global.System.Data.DataColumn("DPT_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDPT_ID)
            Me.columnDPT_Name = New Global.System.Data.DataColumn("DPT_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDPT_Name)
            Me.columnDPT_PID = New Global.System.Data.DataColumn("DPT_PID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDPT_PID)
            Me.columnDPT_PName = New Global.System.Data.DataColumn("DPT_PName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDPT_PName)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDepartmentRow() As DepartmentRow
            Return CType(Me.NewRow,DepartmentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DepartmentRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DepartmentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DepartmentRowChangedEvent) Is Nothing) Then
                RaiseEvent DepartmentRowChanged(Me, New DepartmentRowChangeEvent(CType(e.Row,DepartmentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DepartmentRowChangingEvent) Is Nothing) Then
                RaiseEvent DepartmentRowChanging(Me, New DepartmentRowChangeEvent(CType(e.Row,DepartmentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DepartmentRowDeletedEvent) Is Nothing) Then
                RaiseEvent DepartmentRowDeleted(Me, New DepartmentRowChangeEvent(CType(e.Row,DepartmentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DepartmentRowDeletingEvent) Is Nothing) Then
                RaiseEvent DepartmentRowDeleting(Me, New DepartmentRowChangeEvent(CType(e.Row,DepartmentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDepartmentRow(ByVal row As DepartmentRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As KnifeWareInput = New KnifeWareInput
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DepartmentDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class KnifeWareInputRow
        Inherits Global.System.Data.DataRow
        
        Private tableKnifeWareInput As KnifeWareInputDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableKnifeWareInput = CType(Me.Table,KnifeWareInputDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AutoID() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInput.AutoIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInput' 中資料行 'AutoID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInput.AutoIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WIP_NUM() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInput.WIP_NUMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInput' 中資料行 'WIP_NUM' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInput.WIP_NUMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WIP_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInput.WIP_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInput' 中資料行 'WIP_ID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInput.WIP_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WIP_Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInput.WIP_TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInput' 中資料行 'WIP_Type' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInput.WIP_TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M_Code() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInput.M_CodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInput' 中資料行 'M_Code' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInput.M_CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WIP_Qty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInput.WIP_QtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInput' 中資料行 'WIP_Qty' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInput.WIP_QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WIP_AddDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInput.WIP_AddDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInput' 中資料行 'WIP_AddDate' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInput.WIP_AddDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WH_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInput.WH_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInput' 中資料行 'WH_ID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInput.WH_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OS_BatchID() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInput.OS_BatchIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInput' 中資料行 'OS_BatchID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInput.OS_BatchIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WIP_Action() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInput.WIP_ActionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInput' 中資料行 'WIP_Action' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInput.WIP_ActionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WIP_EditDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInput.WIP_EditDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInput' 中資料行 'WIP_EditDate' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInput.WIP_EditDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WIP_Remark() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInput.WIP_RemarkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInput' 中資料行 'WIP_Remark' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInput.WIP_RemarkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DPT_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInput.DPT_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInput' 中資料行 'DPT_ID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInput.DPT_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WIP_Check() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInput.WIP_CheckColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInput' 中資料行 'WIP_Check' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInput.WIP_CheckColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WIP_CheckAction() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInput.WIP_CheckActionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInput' 中資料行 'WIP_CheckAction' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInput.WIP_CheckActionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WIP_CheckDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInput.WIP_CheckDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInput' 中資料行 'WIP_CheckDate' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInput.WIP_CheckDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WIP_CheckRemark() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInput.WIP_CheckRemarkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInput' 中資料行 'WIP_CheckRemark' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInput.WIP_CheckRemarkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WIP_ReCheck() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInput.WIP_ReCheckColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInput' 中資料行 'WIP_ReCheck' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInput.WIP_ReCheckColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WIP_ReCheckAction() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInput.WIP_ReCheckActionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInput' 中資料行 'WIP_ReCheckAction' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInput.WIP_ReCheckActionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WIP_ReCheckDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInput.WIP_ReCheckDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInput' 中資料行 'WIP_ReCheckDate' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInput.WIP_ReCheckDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WIP_ReCheckRemark() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInput.WIP_ReCheckRemarkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInput' 中資料行 'WIP_ReCheckRemark' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInput.WIP_ReCheckRemarkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WIP_EndQty() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInput.WIP_EndQtyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInput' 中資料行 'WIP_EndQty' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInput.WIP_EndQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CardID() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInput.CardIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInput' 中資料行 'CardID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInput.CardIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KnifeType() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInput.KnifeTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInput' 中資料行 'KnifeType' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInput.KnifeTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInput.M_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInput' 中資料行 'M_Name' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInput.M_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M_Gauge() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInput.M_GaugeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInput' 中資料行 'M_Gauge' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInput.M_GaugeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M_Unit() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInput.M_UnitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInput' 中資料行 'M_Unit' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInput.M_UnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WIP_ActionName() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInput.WIP_ActionNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInput' 中資料行 'WIP_ActionName' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInput.WIP_ActionNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WIP_CheckActionName() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInput.WIP_CheckActionNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInput' 中資料行 'WIP_CheckActionName' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInput.WIP_CheckActionNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WH_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInput.WH_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInput' 中資料行 'WH_Name' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInput.WH_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WH_PName() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInput.WH_PNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInput' 中資料行 'WH_PName' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInput.WH_PNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DPT_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareInput.DPT_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareInput' 中資料行 'DPT_Name' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareInput.DPT_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WareHouseRow() As WareHouseRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("WareHouse_KnifeWareInput")),WareHouseRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("WareHouse_KnifeWareInput"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAutoIDNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInput.AutoIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAutoIDNull()
            Me(Me.tableKnifeWareInput.AutoIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWIP_NUMNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInput.WIP_NUMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWIP_NUMNull()
            Me(Me.tableKnifeWareInput.WIP_NUMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWIP_IDNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInput.WIP_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWIP_IDNull()
            Me(Me.tableKnifeWareInput.WIP_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWIP_TypeNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInput.WIP_TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWIP_TypeNull()
            Me(Me.tableKnifeWareInput.WIP_TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM_CodeNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInput.M_CodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM_CodeNull()
            Me(Me.tableKnifeWareInput.M_CodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWIP_QtyNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInput.WIP_QtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWIP_QtyNull()
            Me(Me.tableKnifeWareInput.WIP_QtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWIP_AddDateNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInput.WIP_AddDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWIP_AddDateNull()
            Me(Me.tableKnifeWareInput.WIP_AddDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWH_IDNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInput.WH_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWH_IDNull()
            Me(Me.tableKnifeWareInput.WH_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOS_BatchIDNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInput.OS_BatchIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOS_BatchIDNull()
            Me(Me.tableKnifeWareInput.OS_BatchIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWIP_ActionNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInput.WIP_ActionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWIP_ActionNull()
            Me(Me.tableKnifeWareInput.WIP_ActionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWIP_EditDateNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInput.WIP_EditDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWIP_EditDateNull()
            Me(Me.tableKnifeWareInput.WIP_EditDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWIP_RemarkNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInput.WIP_RemarkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWIP_RemarkNull()
            Me(Me.tableKnifeWareInput.WIP_RemarkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDPT_IDNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInput.DPT_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDPT_IDNull()
            Me(Me.tableKnifeWareInput.DPT_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWIP_CheckNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInput.WIP_CheckColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWIP_CheckNull()
            Me(Me.tableKnifeWareInput.WIP_CheckColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWIP_CheckActionNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInput.WIP_CheckActionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWIP_CheckActionNull()
            Me(Me.tableKnifeWareInput.WIP_CheckActionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWIP_CheckDateNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInput.WIP_CheckDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWIP_CheckDateNull()
            Me(Me.tableKnifeWareInput.WIP_CheckDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWIP_CheckRemarkNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInput.WIP_CheckRemarkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWIP_CheckRemarkNull()
            Me(Me.tableKnifeWareInput.WIP_CheckRemarkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWIP_ReCheckNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInput.WIP_ReCheckColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWIP_ReCheckNull()
            Me(Me.tableKnifeWareInput.WIP_ReCheckColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWIP_ReCheckActionNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInput.WIP_ReCheckActionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWIP_ReCheckActionNull()
            Me(Me.tableKnifeWareInput.WIP_ReCheckActionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWIP_ReCheckDateNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInput.WIP_ReCheckDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWIP_ReCheckDateNull()
            Me(Me.tableKnifeWareInput.WIP_ReCheckDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWIP_ReCheckRemarkNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInput.WIP_ReCheckRemarkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWIP_ReCheckRemarkNull()
            Me(Me.tableKnifeWareInput.WIP_ReCheckRemarkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWIP_EndQtyNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInput.WIP_EndQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWIP_EndQtyNull()
            Me(Me.tableKnifeWareInput.WIP_EndQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCardIDNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInput.CardIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCardIDNull()
            Me(Me.tableKnifeWareInput.CardIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKnifeTypeNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInput.KnifeTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKnifeTypeNull()
            Me(Me.tableKnifeWareInput.KnifeTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM_NameNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInput.M_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM_NameNull()
            Me(Me.tableKnifeWareInput.M_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM_GaugeNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInput.M_GaugeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM_GaugeNull()
            Me(Me.tableKnifeWareInput.M_GaugeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM_UnitNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInput.M_UnitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM_UnitNull()
            Me(Me.tableKnifeWareInput.M_UnitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWIP_ActionNameNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInput.WIP_ActionNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWIP_ActionNameNull()
            Me(Me.tableKnifeWareInput.WIP_ActionNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWIP_CheckActionNameNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInput.WIP_CheckActionNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWIP_CheckActionNameNull()
            Me(Me.tableKnifeWareInput.WIP_CheckActionNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWH_NameNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInput.WH_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWH_NameNull()
            Me(Me.tableKnifeWareInput.WH_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWH_PNameNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInput.WH_PNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWH_PNameNull()
            Me(Me.tableKnifeWareInput.WH_PNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDPT_NameNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareInput.DPT_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDPT_NameNull()
            Me(Me.tableKnifeWareInput.DPT_NameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class WareHouseRow
        Inherits Global.System.Data.DataRow
        
        Private tableWareHouse As WareHouseDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableWareHouse = CType(Me.Table,WareHouseDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AutoID() As String
            Get
                Try 
                    Return CType(Me(Me.tableWareHouse.AutoIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'WareHouse' 中資料行 'AutoID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableWareHouse.AutoIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WH_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableWareHouse.WH_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'WareHouse' 中資料行 'WH_ID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableWareHouse.WH_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WH_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableWareHouse.WH_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'WareHouse' 中資料行 'WH_Name' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableWareHouse.WH_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WH_PID() As String
            Get
                Try 
                    Return CType(Me(Me.tableWareHouse.WH_PIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'WareHouse' 中資料行 'WH_PID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableWareHouse.WH_PIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WH_Key() As String
            Get
                Try 
                    Return CType(Me(Me.tableWareHouse.WH_KeyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'WareHouse' 中資料行 'WH_Key' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableWareHouse.WH_KeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WH_Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableWareHouse.WH_TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'WareHouse' 中資料行 'WH_Type' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableWareHouse.WH_TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WH_Remark() As String
            Get
                Try 
                    Return CType(Me(Me.tableWareHouse.WH_RemarkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'WareHouse' 中資料行 'WH_Remark' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableWareHouse.WH_RemarkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WH_Action() As String
            Get
                Try 
                    Return CType(Me(Me.tableWareHouse.WH_ActionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'WareHouse' 中資料行 'WH_Action' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableWareHouse.WH_ActionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CO_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableWareHouse.CO_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'WareHouse' 中資料行 'CO_ID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableWareHouse.CO_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NeedCheck() As String
            Get
                Try 
                    Return CType(Me(Me.tableWareHouse.NeedCheckColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'WareHouse' 中資料行 'NeedCheck' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableWareHouse.NeedCheckColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrintBulk() As String
            Get
                Try 
                    Return CType(Me(Me.tableWareHouse.PrintBulkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'WareHouse' 中資料行 'PrintBulk' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableWareHouse.PrintBulkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NeedCheckInput() As String
            Get
                Try 
                    Return CType(Me(Me.tableWareHouse.NeedCheckInputColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'WareHouse' 中資料行 'NeedCheckInput' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableWareHouse.NeedCheckInputColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAutoIDNull() As Boolean
            Return Me.IsNull(Me.tableWareHouse.AutoIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAutoIDNull()
            Me(Me.tableWareHouse.AutoIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWH_IDNull() As Boolean
            Return Me.IsNull(Me.tableWareHouse.WH_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWH_IDNull()
            Me(Me.tableWareHouse.WH_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWH_NameNull() As Boolean
            Return Me.IsNull(Me.tableWareHouse.WH_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWH_NameNull()
            Me(Me.tableWareHouse.WH_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWH_PIDNull() As Boolean
            Return Me.IsNull(Me.tableWareHouse.WH_PIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWH_PIDNull()
            Me(Me.tableWareHouse.WH_PIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWH_KeyNull() As Boolean
            Return Me.IsNull(Me.tableWareHouse.WH_KeyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWH_KeyNull()
            Me(Me.tableWareHouse.WH_KeyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWH_TypeNull() As Boolean
            Return Me.IsNull(Me.tableWareHouse.WH_TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWH_TypeNull()
            Me(Me.tableWareHouse.WH_TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWH_RemarkNull() As Boolean
            Return Me.IsNull(Me.tableWareHouse.WH_RemarkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWH_RemarkNull()
            Me(Me.tableWareHouse.WH_RemarkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWH_ActionNull() As Boolean
            Return Me.IsNull(Me.tableWareHouse.WH_ActionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWH_ActionNull()
            Me(Me.tableWareHouse.WH_ActionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCO_IDNull() As Boolean
            Return Me.IsNull(Me.tableWareHouse.CO_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCO_IDNull()
            Me(Me.tableWareHouse.CO_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNeedCheckNull() As Boolean
            Return Me.IsNull(Me.tableWareHouse.NeedCheckColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNeedCheckNull()
            Me(Me.tableWareHouse.NeedCheckColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrintBulkNull() As Boolean
            Return Me.IsNull(Me.tableWareHouse.PrintBulkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrintBulkNull()
            Me(Me.tableWareHouse.PrintBulkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNeedCheckInputNull() As Boolean
            Return Me.IsNull(Me.tableWareHouse.NeedCheckInputColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNeedCheckInputNull()
            Me(Me.tableWareHouse.NeedCheckInputColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetKnifeWareInputRows() As KnifeWareInputRow()
            If (Me.Table.ChildRelations("WareHouse_KnifeWareInput") Is Nothing) Then
                Return New KnifeWareInputRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("WareHouse_KnifeWareInput")),KnifeWareInputRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DepartmentRow
        Inherits Global.System.Data.DataRow
        
        Private tableDepartment As DepartmentDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDepartment = CType(Me.Table,DepartmentDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AutoID() As String
            Get
                Try 
                    Return CType(Me(Me.tableDepartment.AutoIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'Department' 中資料行 'AutoID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableDepartment.AutoIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DPT_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableDepartment.DPT_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'Department' 中資料行 'DPT_ID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableDepartment.DPT_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DPT_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableDepartment.DPT_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'Department' 中資料行 'DPT_Name' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableDepartment.DPT_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DPT_PID() As String
            Get
                Try 
                    Return CType(Me(Me.tableDepartment.DPT_PIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'Department' 中資料行 'DPT_PID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableDepartment.DPT_PIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DPT_PName() As String
            Get
                Try 
                    Return CType(Me(Me.tableDepartment.DPT_PNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'Department' 中資料行 'DPT_PName' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableDepartment.DPT_PNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAutoIDNull() As Boolean
            Return Me.IsNull(Me.tableDepartment.AutoIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAutoIDNull()
            Me(Me.tableDepartment.AutoIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDPT_IDNull() As Boolean
            Return Me.IsNull(Me.tableDepartment.DPT_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDPT_IDNull()
            Me(Me.tableDepartment.DPT_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDPT_NameNull() As Boolean
            Return Me.IsNull(Me.tableDepartment.DPT_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDPT_NameNull()
            Me(Me.tableDepartment.DPT_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDPT_PIDNull() As Boolean
            Return Me.IsNull(Me.tableDepartment.DPT_PIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDPT_PIDNull()
            Me(Me.tableDepartment.DPT_PIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDPT_PNameNull() As Boolean
            Return Me.IsNull(Me.tableDepartment.DPT_PNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDPT_PNameNull()
            Me(Me.tableDepartment.DPT_PNameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class KnifeWareInputRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As KnifeWareInputRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As KnifeWareInputRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As KnifeWareInputRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class WareHouseRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As WareHouseRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As WareHouseRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As WareHouseRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DepartmentRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DepartmentRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DepartmentRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DepartmentRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
