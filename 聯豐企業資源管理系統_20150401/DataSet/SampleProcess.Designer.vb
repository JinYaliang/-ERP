'------------------------------------------------------------------------------
' <auto-generated>
'     這段程式碼是由工具產生的。
'     執行階段版本:2.0.50727.5420
'
'     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
'     變更將會遺失。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("SampleProcess"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class SampleProcess
    Inherits Global.System.Data.DataSet
    
    Private tableSampleProcessSub As SampleProcessSubDataTable
    
    Private tableSampleProcessMain As SampleProcessMainDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("SampleProcessSub")) Is Nothing) Then
                MyBase.Tables.Add(New SampleProcessSubDataTable(ds.Tables("SampleProcessSub")))
            End If
            If (Not (ds.Tables("SampleProcessMain")) Is Nothing) Then
                MyBase.Tables.Add(New SampleProcessMainDataTable(ds.Tables("SampleProcessMain")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SampleProcessSub() As SampleProcessSubDataTable
        Get
            Return Me.tableSampleProcessSub
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SampleProcessMain() As SampleProcessMainDataTable
        Get
            Return Me.tableSampleProcessMain
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As SampleProcess = CType(MyBase.Clone,SampleProcess)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("SampleProcessSub")) Is Nothing) Then
                MyBase.Tables.Add(New SampleProcessSubDataTable(ds.Tables("SampleProcessSub")))
            End If
            If (Not (ds.Tables("SampleProcessMain")) Is Nothing) Then
                MyBase.Tables.Add(New SampleProcessMainDataTable(ds.Tables("SampleProcessMain")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableSampleProcessSub = CType(MyBase.Tables("SampleProcessSub"),SampleProcessSubDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSampleProcessSub) Is Nothing) Then
                Me.tableSampleProcessSub.InitVars
            End If
        End If
        Me.tableSampleProcessMain = CType(MyBase.Tables("SampleProcessMain"),SampleProcessMainDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSampleProcessMain) Is Nothing) Then
                Me.tableSampleProcessMain.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "SampleProcess"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/SampleProcess.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableSampleProcessSub = New SampleProcessSubDataTable
        MyBase.Tables.Add(Me.tableSampleProcessSub)
        Me.tableSampleProcessMain = New SampleProcessMainDataTable
        MyBase.Tables.Add(Me.tableSampleProcessMain)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSampleProcessSub() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSampleProcessMain() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As SampleProcess = New SampleProcess
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub SampleProcessSubRowChangeEventHandler(ByVal sender As Object, ByVal e As SampleProcessSubRowChangeEvent)
    
    Public Delegate Sub SampleProcessMainRowChangeEventHandler(ByVal sender As Object, ByVal e As SampleProcessMainRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SampleProcessSubDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPS_Num As Global.System.Data.DataColumn
        
        Private columnPS_Name As Global.System.Data.DataColumn
        
        Private columnD_Name As Global.System.Data.DataColumn
        
        Private columnPS_Type As Global.System.Data.DataColumn
        
        Private columnPS_Remark As Global.System.Data.DataColumn
        
        Private columnPro_NO As Global.System.Data.DataColumn
        
        Private columnPS_NO As Global.System.Data.DataColumn
        
        Private columnD_Dep As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SampleProcessSub"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PS_NumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPS_Num
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PS_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPS_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property D_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnD_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PS_TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPS_Type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PS_RemarkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPS_Remark
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pro_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPro_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PS_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPS_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property D_DepColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnD_Dep
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SampleProcessSubRow
            Get
                Return CType(Me.Rows(index),SampleProcessSubRow)
            End Get
        End Property
        
        Public Event SampleProcessSubRowChanging As SampleProcessSubRowChangeEventHandler
        
        Public Event SampleProcessSubRowChanged As SampleProcessSubRowChangeEventHandler
        
        Public Event SampleProcessSubRowDeleting As SampleProcessSubRowChangeEventHandler
        
        Public Event SampleProcessSubRowDeleted As SampleProcessSubRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSampleProcessSubRow(ByVal row As SampleProcessSubRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSampleProcessSubRow(ByVal PS_Num As String, ByVal PS_Name As String, ByVal D_Name As String, ByVal PS_Type As String, ByVal PS_Remark As String, ByVal Pro_NO As String, ByVal PS_NO As String, ByVal D_Dep As String) As SampleProcessSubRow
            Dim rowSampleProcessSubRow As SampleProcessSubRow = CType(Me.NewRow,SampleProcessSubRow)
            Dim columnValuesArray() As Object = New Object() {PS_Num, PS_Name, D_Name, PS_Type, PS_Remark, Pro_NO, PS_NO, D_Dep}
            rowSampleProcessSubRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSampleProcessSubRow)
            Return rowSampleProcessSubRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SampleProcessSubDataTable = CType(MyBase.Clone,SampleProcessSubDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SampleProcessSubDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPS_Num = MyBase.Columns("PS_Num")
            Me.columnPS_Name = MyBase.Columns("PS_Name")
            Me.columnD_Name = MyBase.Columns("D_Name")
            Me.columnPS_Type = MyBase.Columns("PS_Type")
            Me.columnPS_Remark = MyBase.Columns("PS_Remark")
            Me.columnPro_NO = MyBase.Columns("Pro_NO")
            Me.columnPS_NO = MyBase.Columns("PS_NO")
            Me.columnD_Dep = MyBase.Columns("D_Dep")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPS_Num = New Global.System.Data.DataColumn("PS_Num", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPS_Num)
            Me.columnPS_Name = New Global.System.Data.DataColumn("PS_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPS_Name)
            Me.columnD_Name = New Global.System.Data.DataColumn("D_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnD_Name)
            Me.columnPS_Type = New Global.System.Data.DataColumn("PS_Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPS_Type)
            Me.columnPS_Remark = New Global.System.Data.DataColumn("PS_Remark", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPS_Remark)
            Me.columnPro_NO = New Global.System.Data.DataColumn("Pro_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPro_NO)
            Me.columnPS_NO = New Global.System.Data.DataColumn("PS_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPS_NO)
            Me.columnD_Dep = New Global.System.Data.DataColumn("D_Dep", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnD_Dep)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSampleProcessSubRow() As SampleProcessSubRow
            Return CType(Me.NewRow,SampleProcessSubRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SampleProcessSubRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SampleProcessSubRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SampleProcessSubRowChangedEvent) Is Nothing) Then
                RaiseEvent SampleProcessSubRowChanged(Me, New SampleProcessSubRowChangeEvent(CType(e.Row,SampleProcessSubRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SampleProcessSubRowChangingEvent) Is Nothing) Then
                RaiseEvent SampleProcessSubRowChanging(Me, New SampleProcessSubRowChangeEvent(CType(e.Row,SampleProcessSubRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SampleProcessSubRowDeletedEvent) Is Nothing) Then
                RaiseEvent SampleProcessSubRowDeleted(Me, New SampleProcessSubRowChangeEvent(CType(e.Row,SampleProcessSubRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SampleProcessSubRowDeletingEvent) Is Nothing) Then
                RaiseEvent SampleProcessSubRowDeleting(Me, New SampleProcessSubRowChangeEvent(CType(e.Row,SampleProcessSubRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSampleProcessSubRow(ByVal row As SampleProcessSubRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SampleProcess = New SampleProcess
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SampleProcessSubDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SampleProcessMainDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPro_NO As Global.System.Data.DataColumn
        
        Private columnPM_M_Code As Global.System.Data.DataColumn
        
        Private columnSO_CusterNo As Global.System.Data.DataColumn
        
        Private columnType3ID As Global.System.Data.DataColumn
        
        Private columnPro_Weight As Global.System.Data.DataColumn
        
        Private columnPro_Rate As Global.System.Data.DataColumn
        
        Private columnPro_Describe As Global.System.Data.DataColumn
        
        Private columnPro_Remark As Global.System.Data.DataColumn
        
        Private columnPM_Type As Global.System.Data.DataColumn
        
        Private columnPro_Type As Global.System.Data.DataColumn
        
        Private columnM_Name As Global.System.Data.DataColumn
        
        Private columnCustomerNO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SampleProcessMain"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pro_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPro_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PM_M_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPM_M_Code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SO_CusterNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSO_CusterNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Type3IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType3ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pro_WeightColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPro_Weight
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pro_RateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPro_Rate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pro_DescribeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPro_Describe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pro_RemarkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPro_Remark
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PM_TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPM_Type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pro_TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPro_Type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustomerNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomerNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SampleProcessMainRow
            Get
                Return CType(Me.Rows(index),SampleProcessMainRow)
            End Get
        End Property
        
        Public Event SampleProcessMainRowChanging As SampleProcessMainRowChangeEventHandler
        
        Public Event SampleProcessMainRowChanged As SampleProcessMainRowChangeEventHandler
        
        Public Event SampleProcessMainRowDeleting As SampleProcessMainRowChangeEventHandler
        
        Public Event SampleProcessMainRowDeleted As SampleProcessMainRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSampleProcessMainRow(ByVal row As SampleProcessMainRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSampleProcessMainRow(ByVal Pro_NO As String, ByVal PM_M_Code As String, ByVal SO_CusterNo As String, ByVal Type3ID As String, ByVal Pro_Weight As String, ByVal Pro_Rate As String, ByVal Pro_Describe As String, ByVal Pro_Remark As String, ByVal PM_Type As String, ByVal Pro_Type As String, ByVal M_Name As String, ByVal CustomerNO As String) As SampleProcessMainRow
            Dim rowSampleProcessMainRow As SampleProcessMainRow = CType(Me.NewRow,SampleProcessMainRow)
            Dim columnValuesArray() As Object = New Object() {Pro_NO, PM_M_Code, SO_CusterNo, Type3ID, Pro_Weight, Pro_Rate, Pro_Describe, Pro_Remark, PM_Type, Pro_Type, M_Name, CustomerNO}
            rowSampleProcessMainRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSampleProcessMainRow)
            Return rowSampleProcessMainRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SampleProcessMainDataTable = CType(MyBase.Clone,SampleProcessMainDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SampleProcessMainDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPro_NO = MyBase.Columns("Pro_NO")
            Me.columnPM_M_Code = MyBase.Columns("PM_M_Code")
            Me.columnSO_CusterNo = MyBase.Columns("SO_CusterNo")
            Me.columnType3ID = MyBase.Columns("Type3ID")
            Me.columnPro_Weight = MyBase.Columns("Pro_Weight")
            Me.columnPro_Rate = MyBase.Columns("Pro_Rate")
            Me.columnPro_Describe = MyBase.Columns("Pro_Describe")
            Me.columnPro_Remark = MyBase.Columns("Pro_Remark")
            Me.columnPM_Type = MyBase.Columns("PM_Type")
            Me.columnPro_Type = MyBase.Columns("Pro_Type")
            Me.columnM_Name = MyBase.Columns("M_Name")
            Me.columnCustomerNO = MyBase.Columns("CustomerNO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPro_NO = New Global.System.Data.DataColumn("Pro_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPro_NO)
            Me.columnPM_M_Code = New Global.System.Data.DataColumn("PM_M_Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPM_M_Code)
            Me.columnSO_CusterNo = New Global.System.Data.DataColumn("SO_CusterNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSO_CusterNo)
            Me.columnType3ID = New Global.System.Data.DataColumn("Type3ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType3ID)
            Me.columnPro_Weight = New Global.System.Data.DataColumn("Pro_Weight", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPro_Weight)
            Me.columnPro_Rate = New Global.System.Data.DataColumn("Pro_Rate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPro_Rate)
            Me.columnPro_Describe = New Global.System.Data.DataColumn("Pro_Describe", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPro_Describe)
            Me.columnPro_Remark = New Global.System.Data.DataColumn("Pro_Remark", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPro_Remark)
            Me.columnPM_Type = New Global.System.Data.DataColumn("PM_Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPM_Type)
            Me.columnPro_Type = New Global.System.Data.DataColumn("Pro_Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPro_Type)
            Me.columnM_Name = New Global.System.Data.DataColumn("M_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_Name)
            Me.columnCustomerNO = New Global.System.Data.DataColumn("CustomerNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomerNO)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSampleProcessMainRow() As SampleProcessMainRow
            Return CType(Me.NewRow,SampleProcessMainRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SampleProcessMainRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SampleProcessMainRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SampleProcessMainRowChangedEvent) Is Nothing) Then
                RaiseEvent SampleProcessMainRowChanged(Me, New SampleProcessMainRowChangeEvent(CType(e.Row,SampleProcessMainRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SampleProcessMainRowChangingEvent) Is Nothing) Then
                RaiseEvent SampleProcessMainRowChanging(Me, New SampleProcessMainRowChangeEvent(CType(e.Row,SampleProcessMainRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SampleProcessMainRowDeletedEvent) Is Nothing) Then
                RaiseEvent SampleProcessMainRowDeleted(Me, New SampleProcessMainRowChangeEvent(CType(e.Row,SampleProcessMainRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SampleProcessMainRowDeletingEvent) Is Nothing) Then
                RaiseEvent SampleProcessMainRowDeleting(Me, New SampleProcessMainRowChangeEvent(CType(e.Row,SampleProcessMainRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSampleProcessMainRow(ByVal row As SampleProcessMainRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SampleProcess = New SampleProcess
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SampleProcessMainDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SampleProcessSubRow
        Inherits Global.System.Data.DataRow
        
        Private tableSampleProcessSub As SampleProcessSubDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSampleProcessSub = CType(Me.Table,SampleProcessSubDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PS_Num() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleProcessSub.PS_NumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleProcessSub' 中資料行 'PS_Num' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleProcessSub.PS_NumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PS_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleProcessSub.PS_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleProcessSub' 中資料行 'PS_Name' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleProcessSub.PS_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property D_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleProcessSub.D_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleProcessSub' 中資料行 'D_Name' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleProcessSub.D_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PS_Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleProcessSub.PS_TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleProcessSub' 中資料行 'PS_Type' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleProcessSub.PS_TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PS_Remark() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleProcessSub.PS_RemarkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleProcessSub' 中資料行 'PS_Remark' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleProcessSub.PS_RemarkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pro_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleProcessSub.Pro_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleProcessSub' 中資料行 'Pro_NO' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleProcessSub.Pro_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PS_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleProcessSub.PS_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleProcessSub' 中資料行 'PS_NO' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleProcessSub.PS_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property D_Dep() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleProcessSub.D_DepColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleProcessSub' 中資料行 'D_Dep' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleProcessSub.D_DepColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPS_NumNull() As Boolean
            Return Me.IsNull(Me.tableSampleProcessSub.PS_NumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPS_NumNull()
            Me(Me.tableSampleProcessSub.PS_NumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPS_NameNull() As Boolean
            Return Me.IsNull(Me.tableSampleProcessSub.PS_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPS_NameNull()
            Me(Me.tableSampleProcessSub.PS_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsD_NameNull() As Boolean
            Return Me.IsNull(Me.tableSampleProcessSub.D_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetD_NameNull()
            Me(Me.tableSampleProcessSub.D_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPS_TypeNull() As Boolean
            Return Me.IsNull(Me.tableSampleProcessSub.PS_TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPS_TypeNull()
            Me(Me.tableSampleProcessSub.PS_TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPS_RemarkNull() As Boolean
            Return Me.IsNull(Me.tableSampleProcessSub.PS_RemarkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPS_RemarkNull()
            Me(Me.tableSampleProcessSub.PS_RemarkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPro_NONull() As Boolean
            Return Me.IsNull(Me.tableSampleProcessSub.Pro_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPro_NONull()
            Me(Me.tableSampleProcessSub.Pro_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPS_NONull() As Boolean
            Return Me.IsNull(Me.tableSampleProcessSub.PS_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPS_NONull()
            Me(Me.tableSampleProcessSub.PS_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsD_DepNull() As Boolean
            Return Me.IsNull(Me.tableSampleProcessSub.D_DepColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetD_DepNull()
            Me(Me.tableSampleProcessSub.D_DepColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SampleProcessMainRow
        Inherits Global.System.Data.DataRow
        
        Private tableSampleProcessMain As SampleProcessMainDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSampleProcessMain = CType(Me.Table,SampleProcessMainDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pro_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleProcessMain.Pro_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleProcessMain' 中資料行 'Pro_NO' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleProcessMain.Pro_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PM_M_Code() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleProcessMain.PM_M_CodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleProcessMain' 中資料行 'PM_M_Code' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleProcessMain.PM_M_CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SO_CusterNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleProcessMain.SO_CusterNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleProcessMain' 中資料行 'SO_CusterNo' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleProcessMain.SO_CusterNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type3ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleProcessMain.Type3IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleProcessMain' 中資料行 'Type3ID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleProcessMain.Type3IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pro_Weight() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleProcessMain.Pro_WeightColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleProcessMain' 中資料行 'Pro_Weight' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleProcessMain.Pro_WeightColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pro_Rate() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleProcessMain.Pro_RateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleProcessMain' 中資料行 'Pro_Rate' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleProcessMain.Pro_RateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pro_Describe() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleProcessMain.Pro_DescribeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleProcessMain' 中資料行 'Pro_Describe' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleProcessMain.Pro_DescribeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pro_Remark() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleProcessMain.Pro_RemarkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleProcessMain' 中資料行 'Pro_Remark' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleProcessMain.Pro_RemarkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PM_Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleProcessMain.PM_TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleProcessMain' 中資料行 'PM_Type' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleProcessMain.PM_TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pro_Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleProcessMain.Pro_TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleProcessMain' 中資料行 'Pro_Type' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleProcessMain.Pro_TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleProcessMain.M_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleProcessMain' 中資料行 'M_Name' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleProcessMain.M_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustomerNO() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleProcessMain.CustomerNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleProcessMain' 中資料行 'CustomerNO' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleProcessMain.CustomerNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPro_NONull() As Boolean
            Return Me.IsNull(Me.tableSampleProcessMain.Pro_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPro_NONull()
            Me(Me.tableSampleProcessMain.Pro_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPM_M_CodeNull() As Boolean
            Return Me.IsNull(Me.tableSampleProcessMain.PM_M_CodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPM_M_CodeNull()
            Me(Me.tableSampleProcessMain.PM_M_CodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSO_CusterNoNull() As Boolean
            Return Me.IsNull(Me.tableSampleProcessMain.SO_CusterNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSO_CusterNoNull()
            Me(Me.tableSampleProcessMain.SO_CusterNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsType3IDNull() As Boolean
            Return Me.IsNull(Me.tableSampleProcessMain.Type3IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetType3IDNull()
            Me(Me.tableSampleProcessMain.Type3IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPro_WeightNull() As Boolean
            Return Me.IsNull(Me.tableSampleProcessMain.Pro_WeightColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPro_WeightNull()
            Me(Me.tableSampleProcessMain.Pro_WeightColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPro_RateNull() As Boolean
            Return Me.IsNull(Me.tableSampleProcessMain.Pro_RateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPro_RateNull()
            Me(Me.tableSampleProcessMain.Pro_RateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPro_DescribeNull() As Boolean
            Return Me.IsNull(Me.tableSampleProcessMain.Pro_DescribeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPro_DescribeNull()
            Me(Me.tableSampleProcessMain.Pro_DescribeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPro_RemarkNull() As Boolean
            Return Me.IsNull(Me.tableSampleProcessMain.Pro_RemarkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPro_RemarkNull()
            Me(Me.tableSampleProcessMain.Pro_RemarkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPM_TypeNull() As Boolean
            Return Me.IsNull(Me.tableSampleProcessMain.PM_TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPM_TypeNull()
            Me(Me.tableSampleProcessMain.PM_TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPro_TypeNull() As Boolean
            Return Me.IsNull(Me.tableSampleProcessMain.Pro_TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPro_TypeNull()
            Me(Me.tableSampleProcessMain.Pro_TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM_NameNull() As Boolean
            Return Me.IsNull(Me.tableSampleProcessMain.M_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM_NameNull()
            Me(Me.tableSampleProcessMain.M_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomerNONull() As Boolean
            Return Me.IsNull(Me.tableSampleProcessMain.CustomerNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomerNONull()
            Me(Me.tableSampleProcessMain.CustomerNOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SampleProcessSubRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SampleProcessSubRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SampleProcessSubRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SampleProcessSubRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SampleProcessMainRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SampleProcessMainRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SampleProcessMainRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SampleProcessMainRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
