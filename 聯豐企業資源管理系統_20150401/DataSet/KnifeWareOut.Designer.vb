'------------------------------------------------------------------------------
' <auto-generated>
'     這段程式碼是由工具產生的。
'     執行階段版本:2.0.50727.5420
'
'     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
'     變更將會遺失。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("KnifeWareOut"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class KnifeWareOut
    Inherits Global.System.Data.DataSet
    
    Private tableKnifeWareOut As KnifeWareOutDataTable
    
    Private tableUnit As UnitDataTable
    
    Private tableSystemUser As SystemUserDataTable
    
    Private tableWareHouse As WareHouseDataTable
    
    Private tableDepartment As DepartmentDataTable
    
    Private tableWhiteUserList As WhiteUserListDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("KnifeWareOut")) Is Nothing) Then
                MyBase.Tables.Add(New KnifeWareOutDataTable(ds.Tables("KnifeWareOut")))
            End If
            If (Not (ds.Tables("Unit")) Is Nothing) Then
                MyBase.Tables.Add(New UnitDataTable(ds.Tables("Unit")))
            End If
            If (Not (ds.Tables("SystemUser")) Is Nothing) Then
                MyBase.Tables.Add(New SystemUserDataTable(ds.Tables("SystemUser")))
            End If
            If (Not (ds.Tables("WareHouse")) Is Nothing) Then
                MyBase.Tables.Add(New WareHouseDataTable(ds.Tables("WareHouse")))
            End If
            If (Not (ds.Tables("Department")) Is Nothing) Then
                MyBase.Tables.Add(New DepartmentDataTable(ds.Tables("Department")))
            End If
            If (Not (ds.Tables("WhiteUserList")) Is Nothing) Then
                MyBase.Tables.Add(New WhiteUserListDataTable(ds.Tables("WhiteUserList")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property _KnifeWareOut() As KnifeWareOutDataTable
        Get
            Return Me.tableKnifeWareOut
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Unit() As UnitDataTable
        Get
            Return Me.tableUnit
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SystemUser() As SystemUserDataTable
        Get
            Return Me.tableSystemUser
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property WareHouse() As WareHouseDataTable
        Get
            Return Me.tableWareHouse
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Department() As DepartmentDataTable
        Get
            Return Me.tableDepartment
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property WhiteUserList() As WhiteUserListDataTable
        Get
            Return Me.tableWhiteUserList
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As KnifeWareOut = CType(MyBase.Clone,KnifeWareOut)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("KnifeWareOut")) Is Nothing) Then
                MyBase.Tables.Add(New KnifeWareOutDataTable(ds.Tables("KnifeWareOut")))
            End If
            If (Not (ds.Tables("Unit")) Is Nothing) Then
                MyBase.Tables.Add(New UnitDataTable(ds.Tables("Unit")))
            End If
            If (Not (ds.Tables("SystemUser")) Is Nothing) Then
                MyBase.Tables.Add(New SystemUserDataTable(ds.Tables("SystemUser")))
            End If
            If (Not (ds.Tables("WareHouse")) Is Nothing) Then
                MyBase.Tables.Add(New WareHouseDataTable(ds.Tables("WareHouse")))
            End If
            If (Not (ds.Tables("Department")) Is Nothing) Then
                MyBase.Tables.Add(New DepartmentDataTable(ds.Tables("Department")))
            End If
            If (Not (ds.Tables("WhiteUserList")) Is Nothing) Then
                MyBase.Tables.Add(New WhiteUserListDataTable(ds.Tables("WhiteUserList")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableKnifeWareOut = CType(MyBase.Tables("KnifeWareOut"),KnifeWareOutDataTable)
        If (initTable = true) Then
            If (Not (Me.tableKnifeWareOut) Is Nothing) Then
                Me.tableKnifeWareOut.InitVars
            End If
        End If
        Me.tableUnit = CType(MyBase.Tables("Unit"),UnitDataTable)
        If (initTable = true) Then
            If (Not (Me.tableUnit) Is Nothing) Then
                Me.tableUnit.InitVars
            End If
        End If
        Me.tableSystemUser = CType(MyBase.Tables("SystemUser"),SystemUserDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSystemUser) Is Nothing) Then
                Me.tableSystemUser.InitVars
            End If
        End If
        Me.tableWareHouse = CType(MyBase.Tables("WareHouse"),WareHouseDataTable)
        If (initTable = true) Then
            If (Not (Me.tableWareHouse) Is Nothing) Then
                Me.tableWareHouse.InitVars
            End If
        End If
        Me.tableDepartment = CType(MyBase.Tables("Department"),DepartmentDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDepartment) Is Nothing) Then
                Me.tableDepartment.InitVars
            End If
        End If
        Me.tableWhiteUserList = CType(MyBase.Tables("WhiteUserList"),WhiteUserListDataTable)
        If (initTable = true) Then
            If (Not (Me.tableWhiteUserList) Is Nothing) Then
                Me.tableWhiteUserList.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "KnifeWareOut"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/KnifeWareOut.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableKnifeWareOut = New KnifeWareOutDataTable
        MyBase.Tables.Add(Me.tableKnifeWareOut)
        Me.tableUnit = New UnitDataTable
        MyBase.Tables.Add(Me.tableUnit)
        Me.tableSystemUser = New SystemUserDataTable
        MyBase.Tables.Add(Me.tableSystemUser)
        Me.tableWareHouse = New WareHouseDataTable
        MyBase.Tables.Add(Me.tableWareHouse)
        Me.tableDepartment = New DepartmentDataTable
        MyBase.Tables.Add(Me.tableDepartment)
        Me.tableWhiteUserList = New WhiteUserListDataTable
        MyBase.Tables.Add(Me.tableWhiteUserList)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerialize_KnifeWareOut() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeUnit() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSystemUser() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeWareHouse() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDepartment() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeWhiteUserList() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As KnifeWareOut = New KnifeWareOut
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub KnifeWareOutRowChangeEventHandler(ByVal sender As Object, ByVal e As KnifeWareOutRowChangeEvent)
    
    Public Delegate Sub UnitRowChangeEventHandler(ByVal sender As Object, ByVal e As UnitRowChangeEvent)
    
    Public Delegate Sub SystemUserRowChangeEventHandler(ByVal sender As Object, ByVal e As SystemUserRowChangeEvent)
    
    Public Delegate Sub WareHouseRowChangeEventHandler(ByVal sender As Object, ByVal e As WareHouseRowChangeEvent)
    
    Public Delegate Sub DepartmentRowChangeEventHandler(ByVal sender As Object, ByVal e As DepartmentRowChangeEvent)
    
    Public Delegate Sub WhiteUserListRowChangeEventHandler(ByVal sender As Object, ByVal e As WhiteUserListRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class KnifeWareOutDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAutoID As Global.System.Data.DataColumn
        
        Private columnWO_NUM As Global.System.Data.DataColumn
        
        Private columnWO_ID As Global.System.Data.DataColumn
        
        Private columnWO_Type As Global.System.Data.DataColumn
        
        Private columnAP_NO As Global.System.Data.DataColumn
        
        Private columnOP_NO As Global.System.Data.DataColumn
        
        Private columnM_Code As Global.System.Data.DataColumn
        
        Private columnWO_Qty As Global.System.Data.DataColumn
        
        Private columnWO_AddDate As Global.System.Data.DataColumn
        
        Private columnWH_ID As Global.System.Data.DataColumn
        
        Private columnOS_BatchID As Global.System.Data.DataColumn
        
        Private columnWO_Action As Global.System.Data.DataColumn
        
        Private columnWO_EditDate As Global.System.Data.DataColumn
        
        Private columnWO_Remark As Global.System.Data.DataColumn
        
        Private columnDPT_ID As Global.System.Data.DataColumn
        
        Private columnWO_PerID As Global.System.Data.DataColumn
        
        Private columnWO_PerName As Global.System.Data.DataColumn
        
        Private columnWO_Check As Global.System.Data.DataColumn
        
        Private columnWO_CheckAction As Global.System.Data.DataColumn
        
        Private columnWO_CheckDate As Global.System.Data.DataColumn
        
        Private columnWO_CheckRemark As Global.System.Data.DataColumn
        
        Private columnWO_ReCheck As Global.System.Data.DataColumn
        
        Private columnWO_ReCheckAction As Global.System.Data.DataColumn
        
        Private columnWO_ReCheckDate As Global.System.Data.DataColumn
        
        Private columnWO_ReCheckRemark As Global.System.Data.DataColumn
        
        Private columnM_ID As Global.System.Data.DataColumn
        
        Private columnTemp_Code As Global.System.Data.DataColumn
        
        Private columnWO_EndQty As Global.System.Data.DataColumn
        
        Private columnKnifeType As Global.System.Data.DataColumn
        
        Private columnM_Name As Global.System.Data.DataColumn
        
        Private columnM_Gauge As Global.System.Data.DataColumn
        
        Private columnM_Currency As Global.System.Data.DataColumn
        
        Private columnM_Price As Global.System.Data.DataColumn
        
        Private columnType1Name As Global.System.Data.DataColumn
        
        Private columnType2Name As Global.System.Data.DataColumn
        
        Private columnType3Name As Global.System.Data.DataColumn
        
        Private columnM_Unit As Global.System.Data.DataColumn
        
        Private columnWO_ActionName As Global.System.Data.DataColumn
        
        Private columnWO_CheckActionName As Global.System.Data.DataColumn
        
        Private columnWH_Name As Global.System.Data.DataColumn
        
        Private columnWH_PName As Global.System.Data.DataColumn
        
        Private columnDPT_Name As Global.System.Data.DataColumn
        
        Private columnDPT_PName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "KnifeWareOut"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AutoIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAutoID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WO_NUMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWO_NUM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WO_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWO_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WO_TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWO_Type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AP_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAP_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OP_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOP_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_Code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WO_QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWO_Qty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WO_AddDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWO_AddDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WH_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWH_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OS_BatchIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOS_BatchID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WO_ActionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWO_Action
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WO_EditDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWO_EditDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WO_RemarkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWO_Remark
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DPT_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDPT_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WO_PerIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWO_PerID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WO_PerNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWO_PerName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WO_CheckColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWO_Check
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WO_CheckActionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWO_CheckAction
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WO_CheckDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWO_CheckDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WO_CheckRemarkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWO_CheckRemark
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WO_ReCheckColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWO_ReCheck
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WO_ReCheckActionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWO_ReCheckAction
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WO_ReCheckDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWO_ReCheckDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WO_ReCheckRemarkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWO_ReCheckRemark
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Temp_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTemp_Code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WO_EndQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWO_EndQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KnifeTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKnifeType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M_GaugeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_Gauge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M_CurrencyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_Currency
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M_PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_Price
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Type1NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType1Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Type2NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType2Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Type3NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType3Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M_UnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_Unit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WO_ActionNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWO_ActionName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WO_CheckActionNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWO_CheckActionName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WH_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWH_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WH_PNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWH_PName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DPT_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDPT_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DPT_PNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDPT_PName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As KnifeWareOutRow
            Get
                Return CType(Me.Rows(index),KnifeWareOutRow)
            End Get
        End Property
        
        Public Event KnifeWareOutRowChanging As KnifeWareOutRowChangeEventHandler
        
        Public Event KnifeWareOutRowChanged As KnifeWareOutRowChangeEventHandler
        
        Public Event KnifeWareOutRowDeleting As KnifeWareOutRowChangeEventHandler
        
        Public Event KnifeWareOutRowDeleted As KnifeWareOutRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddKnifeWareOutRow(ByVal row As KnifeWareOutRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddKnifeWareOutRow( _
                    ByVal AutoID As String,  _
                    ByVal WO_NUM As String,  _
                    ByVal WO_ID As String,  _
                    ByVal WO_Type As String,  _
                    ByVal AP_NO As String,  _
                    ByVal OP_NO As String,  _
                    ByVal M_Code As String,  _
                    ByVal WO_Qty As String,  _
                    ByVal WO_AddDate As String,  _
                    ByVal WH_ID As String,  _
                    ByVal OS_BatchID As String,  _
                    ByVal WO_Action As String,  _
                    ByVal WO_EditDate As String,  _
                    ByVal WO_Remark As String,  _
                    ByVal DPT_ID As String,  _
                    ByVal WO_PerID As String,  _
                    ByVal WO_PerName As String,  _
                    ByVal WO_Check As String,  _
                    ByVal WO_CheckAction As String,  _
                    ByVal WO_CheckDate As String,  _
                    ByVal WO_CheckRemark As String,  _
                    ByVal WO_ReCheck As String,  _
                    ByVal WO_ReCheckAction As String,  _
                    ByVal WO_ReCheckDate As String,  _
                    ByVal WO_ReCheckRemark As String,  _
                    ByVal M_ID As String,  _
                    ByVal Temp_Code As String,  _
                    ByVal WO_EndQty As String,  _
                    ByVal KnifeType As String,  _
                    ByVal M_Name As String,  _
                    ByVal M_Gauge As String,  _
                    ByVal M_Currency As String,  _
                    ByVal M_Price As String,  _
                    ByVal Type1Name As String,  _
                    ByVal Type2Name As String,  _
                    ByVal Type3Name As String,  _
                    ByVal M_Unit As String,  _
                    ByVal WO_ActionName As String,  _
                    ByVal WO_CheckActionName As String,  _
                    ByVal WH_Name As String,  _
                    ByVal WH_PName As String,  _
                    ByVal DPT_Name As String,  _
                    ByVal DPT_PName As String) As KnifeWareOutRow
            Dim rowKnifeWareOutRow As KnifeWareOutRow = CType(Me.NewRow,KnifeWareOutRow)
            Dim columnValuesArray() As Object = New Object() {AutoID, WO_NUM, WO_ID, WO_Type, AP_NO, OP_NO, M_Code, WO_Qty, WO_AddDate, WH_ID, OS_BatchID, WO_Action, WO_EditDate, WO_Remark, DPT_ID, WO_PerID, WO_PerName, WO_Check, WO_CheckAction, WO_CheckDate, WO_CheckRemark, WO_ReCheck, WO_ReCheckAction, WO_ReCheckDate, WO_ReCheckRemark, M_ID, Temp_Code, WO_EndQty, KnifeType, M_Name, M_Gauge, M_Currency, M_Price, Type1Name, Type2Name, Type3Name, M_Unit, WO_ActionName, WO_CheckActionName, WH_Name, WH_PName, DPT_Name, DPT_PName}
            rowKnifeWareOutRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowKnifeWareOutRow)
            Return rowKnifeWareOutRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As KnifeWareOutDataTable = CType(MyBase.Clone,KnifeWareOutDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New KnifeWareOutDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAutoID = MyBase.Columns("AutoID")
            Me.columnWO_NUM = MyBase.Columns("WO_NUM")
            Me.columnWO_ID = MyBase.Columns("WO_ID")
            Me.columnWO_Type = MyBase.Columns("WO_Type")
            Me.columnAP_NO = MyBase.Columns("AP_NO")
            Me.columnOP_NO = MyBase.Columns("OP_NO")
            Me.columnM_Code = MyBase.Columns("M_Code")
            Me.columnWO_Qty = MyBase.Columns("WO_Qty")
            Me.columnWO_AddDate = MyBase.Columns("WO_AddDate")
            Me.columnWH_ID = MyBase.Columns("WH_ID")
            Me.columnOS_BatchID = MyBase.Columns("OS_BatchID")
            Me.columnWO_Action = MyBase.Columns("WO_Action")
            Me.columnWO_EditDate = MyBase.Columns("WO_EditDate")
            Me.columnWO_Remark = MyBase.Columns("WO_Remark")
            Me.columnDPT_ID = MyBase.Columns("DPT_ID")
            Me.columnWO_PerID = MyBase.Columns("WO_PerID")
            Me.columnWO_PerName = MyBase.Columns("WO_PerName")
            Me.columnWO_Check = MyBase.Columns("WO_Check")
            Me.columnWO_CheckAction = MyBase.Columns("WO_CheckAction")
            Me.columnWO_CheckDate = MyBase.Columns("WO_CheckDate")
            Me.columnWO_CheckRemark = MyBase.Columns("WO_CheckRemark")
            Me.columnWO_ReCheck = MyBase.Columns("WO_ReCheck")
            Me.columnWO_ReCheckAction = MyBase.Columns("WO_ReCheckAction")
            Me.columnWO_ReCheckDate = MyBase.Columns("WO_ReCheckDate")
            Me.columnWO_ReCheckRemark = MyBase.Columns("WO_ReCheckRemark")
            Me.columnM_ID = MyBase.Columns("M_ID")
            Me.columnTemp_Code = MyBase.Columns("Temp_Code")
            Me.columnWO_EndQty = MyBase.Columns("WO_EndQty")
            Me.columnKnifeType = MyBase.Columns("KnifeType")
            Me.columnM_Name = MyBase.Columns("M_Name")
            Me.columnM_Gauge = MyBase.Columns("M_Gauge")
            Me.columnM_Currency = MyBase.Columns("M_Currency")
            Me.columnM_Price = MyBase.Columns("M_Price")
            Me.columnType1Name = MyBase.Columns("Type1Name")
            Me.columnType2Name = MyBase.Columns("Type2Name")
            Me.columnType3Name = MyBase.Columns("Type3Name")
            Me.columnM_Unit = MyBase.Columns("M_Unit")
            Me.columnWO_ActionName = MyBase.Columns("WO_ActionName")
            Me.columnWO_CheckActionName = MyBase.Columns("WO_CheckActionName")
            Me.columnWH_Name = MyBase.Columns("WH_Name")
            Me.columnWH_PName = MyBase.Columns("WH_PName")
            Me.columnDPT_Name = MyBase.Columns("DPT_Name")
            Me.columnDPT_PName = MyBase.Columns("DPT_PName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAutoID = New Global.System.Data.DataColumn("AutoID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAutoID)
            Me.columnWO_NUM = New Global.System.Data.DataColumn("WO_NUM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWO_NUM)
            Me.columnWO_ID = New Global.System.Data.DataColumn("WO_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWO_ID)
            Me.columnWO_Type = New Global.System.Data.DataColumn("WO_Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWO_Type)
            Me.columnAP_NO = New Global.System.Data.DataColumn("AP_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAP_NO)
            Me.columnOP_NO = New Global.System.Data.DataColumn("OP_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOP_NO)
            Me.columnM_Code = New Global.System.Data.DataColumn("M_Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_Code)
            Me.columnWO_Qty = New Global.System.Data.DataColumn("WO_Qty", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWO_Qty)
            Me.columnWO_AddDate = New Global.System.Data.DataColumn("WO_AddDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWO_AddDate)
            Me.columnWH_ID = New Global.System.Data.DataColumn("WH_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWH_ID)
            Me.columnOS_BatchID = New Global.System.Data.DataColumn("OS_BatchID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOS_BatchID)
            Me.columnWO_Action = New Global.System.Data.DataColumn("WO_Action", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWO_Action)
            Me.columnWO_EditDate = New Global.System.Data.DataColumn("WO_EditDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWO_EditDate)
            Me.columnWO_Remark = New Global.System.Data.DataColumn("WO_Remark", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWO_Remark)
            Me.columnDPT_ID = New Global.System.Data.DataColumn("DPT_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDPT_ID)
            Me.columnWO_PerID = New Global.System.Data.DataColumn("WO_PerID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWO_PerID)
            Me.columnWO_PerName = New Global.System.Data.DataColumn("WO_PerName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWO_PerName)
            Me.columnWO_Check = New Global.System.Data.DataColumn("WO_Check", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWO_Check)
            Me.columnWO_CheckAction = New Global.System.Data.DataColumn("WO_CheckAction", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWO_CheckAction)
            Me.columnWO_CheckDate = New Global.System.Data.DataColumn("WO_CheckDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWO_CheckDate)
            Me.columnWO_CheckRemark = New Global.System.Data.DataColumn("WO_CheckRemark", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWO_CheckRemark)
            Me.columnWO_ReCheck = New Global.System.Data.DataColumn("WO_ReCheck", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWO_ReCheck)
            Me.columnWO_ReCheckAction = New Global.System.Data.DataColumn("WO_ReCheckAction", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWO_ReCheckAction)
            Me.columnWO_ReCheckDate = New Global.System.Data.DataColumn("WO_ReCheckDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWO_ReCheckDate)
            Me.columnWO_ReCheckRemark = New Global.System.Data.DataColumn("WO_ReCheckRemark", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWO_ReCheckRemark)
            Me.columnM_ID = New Global.System.Data.DataColumn("M_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_ID)
            Me.columnTemp_Code = New Global.System.Data.DataColumn("Temp_Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTemp_Code)
            Me.columnWO_EndQty = New Global.System.Data.DataColumn("WO_EndQty", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWO_EndQty)
            Me.columnKnifeType = New Global.System.Data.DataColumn("KnifeType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKnifeType)
            Me.columnM_Name = New Global.System.Data.DataColumn("M_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_Name)
            Me.columnM_Gauge = New Global.System.Data.DataColumn("M_Gauge", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_Gauge)
            Me.columnM_Currency = New Global.System.Data.DataColumn("M_Currency", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_Currency)
            Me.columnM_Price = New Global.System.Data.DataColumn("M_Price", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_Price)
            Me.columnType1Name = New Global.System.Data.DataColumn("Type1Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType1Name)
            Me.columnType2Name = New Global.System.Data.DataColumn("Type2Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType2Name)
            Me.columnType3Name = New Global.System.Data.DataColumn("Type3Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType3Name)
            Me.columnM_Unit = New Global.System.Data.DataColumn("M_Unit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_Unit)
            Me.columnWO_ActionName = New Global.System.Data.DataColumn("WO_ActionName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWO_ActionName)
            Me.columnWO_CheckActionName = New Global.System.Data.DataColumn("WO_CheckActionName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWO_CheckActionName)
            Me.columnWH_Name = New Global.System.Data.DataColumn("WH_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWH_Name)
            Me.columnWH_PName = New Global.System.Data.DataColumn("WH_PName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWH_PName)
            Me.columnDPT_Name = New Global.System.Data.DataColumn("DPT_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDPT_Name)
            Me.columnDPT_PName = New Global.System.Data.DataColumn("DPT_PName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDPT_PName)
            Me.ExtendedProperties.Add("Generator_TablePropName", "_KnifeWareOut")
            Me.ExtendedProperties.Add("Generator_UserTableName", "KnifeWareOut")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewKnifeWareOutRow() As KnifeWareOutRow
            Return CType(Me.NewRow,KnifeWareOutRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New KnifeWareOutRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(KnifeWareOutRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.KnifeWareOutRowChangedEvent) Is Nothing) Then
                RaiseEvent KnifeWareOutRowChanged(Me, New KnifeWareOutRowChangeEvent(CType(e.Row,KnifeWareOutRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.KnifeWareOutRowChangingEvent) Is Nothing) Then
                RaiseEvent KnifeWareOutRowChanging(Me, New KnifeWareOutRowChangeEvent(CType(e.Row,KnifeWareOutRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.KnifeWareOutRowDeletedEvent) Is Nothing) Then
                RaiseEvent KnifeWareOutRowDeleted(Me, New KnifeWareOutRowChangeEvent(CType(e.Row,KnifeWareOutRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.KnifeWareOutRowDeletingEvent) Is Nothing) Then
                RaiseEvent KnifeWareOutRowDeleting(Me, New KnifeWareOutRowChangeEvent(CType(e.Row,KnifeWareOutRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveKnifeWareOutRow(ByVal row As KnifeWareOutRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As KnifeWareOut = New KnifeWareOut
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "KnifeWareOutDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class UnitDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAutoID As Global.System.Data.DataColumn
        
        Private columnU_ID As Global.System.Data.DataColumn
        
        Private columnU_Name As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Unit"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AutoIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAutoID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property U_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnU_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property U_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnU_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As UnitRow
            Get
                Return CType(Me.Rows(index),UnitRow)
            End Get
        End Property
        
        Public Event UnitRowChanging As UnitRowChangeEventHandler
        
        Public Event UnitRowChanged As UnitRowChangeEventHandler
        
        Public Event UnitRowDeleting As UnitRowChangeEventHandler
        
        Public Event UnitRowDeleted As UnitRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddUnitRow(ByVal row As UnitRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddUnitRow(ByVal AutoID As String, ByVal U_ID As String, ByVal U_Name As String) As UnitRow
            Dim rowUnitRow As UnitRow = CType(Me.NewRow,UnitRow)
            Dim columnValuesArray() As Object = New Object() {AutoID, U_ID, U_Name}
            rowUnitRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowUnitRow)
            Return rowUnitRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As UnitDataTable = CType(MyBase.Clone,UnitDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New UnitDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAutoID = MyBase.Columns("AutoID")
            Me.columnU_ID = MyBase.Columns("U_ID")
            Me.columnU_Name = MyBase.Columns("U_Name")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAutoID = New Global.System.Data.DataColumn("AutoID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAutoID)
            Me.columnU_ID = New Global.System.Data.DataColumn("U_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnU_ID)
            Me.columnU_Name = New Global.System.Data.DataColumn("U_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnU_Name)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewUnitRow() As UnitRow
            Return CType(Me.NewRow,UnitRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New UnitRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(UnitRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UnitRowChangedEvent) Is Nothing) Then
                RaiseEvent UnitRowChanged(Me, New UnitRowChangeEvent(CType(e.Row,UnitRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UnitRowChangingEvent) Is Nothing) Then
                RaiseEvent UnitRowChanging(Me, New UnitRowChangeEvent(CType(e.Row,UnitRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UnitRowDeletedEvent) Is Nothing) Then
                RaiseEvent UnitRowDeleted(Me, New UnitRowChangeEvent(CType(e.Row,UnitRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UnitRowDeletingEvent) Is Nothing) Then
                RaiseEvent UnitRowDeleting(Me, New UnitRowChangeEvent(CType(e.Row,UnitRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveUnitRow(ByVal row As UnitRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As KnifeWareOut = New KnifeWareOut
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "UnitDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SystemUserDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnU_ID As Global.System.Data.DataColumn
        
        Private columnU_Name As Global.System.Data.DataColumn
        
        Private columnU_PassWord As Global.System.Data.DataColumn
        
        Private columnU_Email As Global.System.Data.DataColumn
        
        Private columnU_Tel As Global.System.Data.DataColumn
        
        Private columnDPT_ID As Global.System.Data.DataColumn
        
        Private columnU_UsbKeyID As Global.System.Data.DataColumn
        
        Private columnU_UsbKeyPassWord As Global.System.Data.DataColumn
        
        Private columnU_KeyImage As Global.System.Data.DataColumn
        
        Private columnJobNO As Global.System.Data.DataColumn
        
        Private columnU_Enabled As Global.System.Data.DataColumn
        
        Private columnU_DPT_Name As Global.System.Data.DataColumn
        
        Private columnDepID As Global.System.Data.DataColumn
        
        Private columnDepName As Global.System.Data.DataColumn
        
        Private columnUserRank As Global.System.Data.DataColumn
        
        Private columnUserType As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SystemUser"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property U_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnU_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property U_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnU_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property U_PassWordColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnU_PassWord
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property U_EmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnU_Email
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property U_TelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnU_Tel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DPT_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDPT_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property U_UsbKeyIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnU_UsbKeyID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property U_UsbKeyPassWordColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnU_UsbKeyPassWord
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property U_KeyImageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnU_KeyImage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JobNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJobNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property U_EnabledColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnU_Enabled
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property U_DPT_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnU_DPT_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UserRankColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUserRank
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UserTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUserType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SystemUserRow
            Get
                Return CType(Me.Rows(index),SystemUserRow)
            End Get
        End Property
        
        Public Event SystemUserRowChanging As SystemUserRowChangeEventHandler
        
        Public Event SystemUserRowChanged As SystemUserRowChangeEventHandler
        
        Public Event SystemUserRowDeleting As SystemUserRowChangeEventHandler
        
        Public Event SystemUserRowDeleted As SystemUserRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSystemUserRow(ByVal row As SystemUserRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSystemUserRow( _
                    ByVal U_ID As String,  _
                    ByVal U_Name As String,  _
                    ByVal U_PassWord As String,  _
                    ByVal U_Email As String,  _
                    ByVal U_Tel As String,  _
                    ByVal DPT_ID As String,  _
                    ByVal U_UsbKeyID As String,  _
                    ByVal U_UsbKeyPassWord As String,  _
                    ByVal U_KeyImage As String,  _
                    ByVal JobNO As String,  _
                    ByVal U_Enabled As String,  _
                    ByVal U_DPT_Name As String,  _
                    ByVal DepID As String,  _
                    ByVal DepName As String,  _
                    ByVal UserRank As String,  _
                    ByVal UserType As String) As SystemUserRow
            Dim rowSystemUserRow As SystemUserRow = CType(Me.NewRow,SystemUserRow)
            Dim columnValuesArray() As Object = New Object() {U_ID, U_Name, U_PassWord, U_Email, U_Tel, DPT_ID, U_UsbKeyID, U_UsbKeyPassWord, U_KeyImage, JobNO, U_Enabled, U_DPT_Name, DepID, DepName, UserRank, UserType}
            rowSystemUserRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSystemUserRow)
            Return rowSystemUserRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SystemUserDataTable = CType(MyBase.Clone,SystemUserDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SystemUserDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnU_ID = MyBase.Columns("U_ID")
            Me.columnU_Name = MyBase.Columns("U_Name")
            Me.columnU_PassWord = MyBase.Columns("U_PassWord")
            Me.columnU_Email = MyBase.Columns("U_Email")
            Me.columnU_Tel = MyBase.Columns("U_Tel")
            Me.columnDPT_ID = MyBase.Columns("DPT_ID")
            Me.columnU_UsbKeyID = MyBase.Columns("U_UsbKeyID")
            Me.columnU_UsbKeyPassWord = MyBase.Columns("U_UsbKeyPassWord")
            Me.columnU_KeyImage = MyBase.Columns("U_KeyImage")
            Me.columnJobNO = MyBase.Columns("JobNO")
            Me.columnU_Enabled = MyBase.Columns("U_Enabled")
            Me.columnU_DPT_Name = MyBase.Columns("U_DPT_Name")
            Me.columnDepID = MyBase.Columns("DepID")
            Me.columnDepName = MyBase.Columns("DepName")
            Me.columnUserRank = MyBase.Columns("UserRank")
            Me.columnUserType = MyBase.Columns("UserType")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnU_ID = New Global.System.Data.DataColumn("U_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnU_ID)
            Me.columnU_Name = New Global.System.Data.DataColumn("U_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnU_Name)
            Me.columnU_PassWord = New Global.System.Data.DataColumn("U_PassWord", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnU_PassWord)
            Me.columnU_Email = New Global.System.Data.DataColumn("U_Email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnU_Email)
            Me.columnU_Tel = New Global.System.Data.DataColumn("U_Tel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnU_Tel)
            Me.columnDPT_ID = New Global.System.Data.DataColumn("DPT_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDPT_ID)
            Me.columnU_UsbKeyID = New Global.System.Data.DataColumn("U_UsbKeyID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnU_UsbKeyID)
            Me.columnU_UsbKeyPassWord = New Global.System.Data.DataColumn("U_UsbKeyPassWord", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnU_UsbKeyPassWord)
            Me.columnU_KeyImage = New Global.System.Data.DataColumn("U_KeyImage", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnU_KeyImage)
            Me.columnJobNO = New Global.System.Data.DataColumn("JobNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJobNO)
            Me.columnU_Enabled = New Global.System.Data.DataColumn("U_Enabled", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnU_Enabled)
            Me.columnU_DPT_Name = New Global.System.Data.DataColumn("U_DPT_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnU_DPT_Name)
            Me.columnDepID = New Global.System.Data.DataColumn("DepID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepID)
            Me.columnDepName = New Global.System.Data.DataColumn("DepName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepName)
            Me.columnUserRank = New Global.System.Data.DataColumn("UserRank", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUserRank)
            Me.columnUserType = New Global.System.Data.DataColumn("UserType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUserType)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSystemUserRow() As SystemUserRow
            Return CType(Me.NewRow,SystemUserRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SystemUserRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SystemUserRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SystemUserRowChangedEvent) Is Nothing) Then
                RaiseEvent SystemUserRowChanged(Me, New SystemUserRowChangeEvent(CType(e.Row,SystemUserRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SystemUserRowChangingEvent) Is Nothing) Then
                RaiseEvent SystemUserRowChanging(Me, New SystemUserRowChangeEvent(CType(e.Row,SystemUserRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SystemUserRowDeletedEvent) Is Nothing) Then
                RaiseEvent SystemUserRowDeleted(Me, New SystemUserRowChangeEvent(CType(e.Row,SystemUserRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SystemUserRowDeletingEvent) Is Nothing) Then
                RaiseEvent SystemUserRowDeleting(Me, New SystemUserRowChangeEvent(CType(e.Row,SystemUserRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSystemUserRow(ByVal row As SystemUserRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As KnifeWareOut = New KnifeWareOut
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SystemUserDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class WareHouseDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAutoID As Global.System.Data.DataColumn
        
        Private columnWH_ID As Global.System.Data.DataColumn
        
        Private columnWH_Name As Global.System.Data.DataColumn
        
        Private columnWH_PID As Global.System.Data.DataColumn
        
        Private columnWH_Key As Global.System.Data.DataColumn
        
        Private columnWH_Type As Global.System.Data.DataColumn
        
        Private columnWH_Remark As Global.System.Data.DataColumn
        
        Private columnWH_Action As Global.System.Data.DataColumn
        
        Private columnCO_ID As Global.System.Data.DataColumn
        
        Private columnNeedCheck As Global.System.Data.DataColumn
        
        Private columnPrintBulk As Global.System.Data.DataColumn
        
        Private columnNeedCheckInput As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "WareHouse"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AutoIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAutoID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WH_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWH_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WH_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWH_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WH_PIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWH_PID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WH_KeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWH_Key
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WH_TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWH_Type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WH_RemarkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWH_Remark
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WH_ActionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWH_Action
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CO_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCO_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NeedCheckColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNeedCheck
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrintBulkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrintBulk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NeedCheckInputColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNeedCheckInput
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As WareHouseRow
            Get
                Return CType(Me.Rows(index),WareHouseRow)
            End Get
        End Property
        
        Public Event WareHouseRowChanging As WareHouseRowChangeEventHandler
        
        Public Event WareHouseRowChanged As WareHouseRowChangeEventHandler
        
        Public Event WareHouseRowDeleting As WareHouseRowChangeEventHandler
        
        Public Event WareHouseRowDeleted As WareHouseRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddWareHouseRow(ByVal row As WareHouseRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddWareHouseRow(ByVal AutoID As String, ByVal WH_ID As String, ByVal WH_Name As String, ByVal WH_PID As String, ByVal WH_Key As String, ByVal WH_Type As String, ByVal WH_Remark As String, ByVal WH_Action As String, ByVal CO_ID As String, ByVal NeedCheck As String, ByVal PrintBulk As String, ByVal NeedCheckInput As String) As WareHouseRow
            Dim rowWareHouseRow As WareHouseRow = CType(Me.NewRow,WareHouseRow)
            Dim columnValuesArray() As Object = New Object() {AutoID, WH_ID, WH_Name, WH_PID, WH_Key, WH_Type, WH_Remark, WH_Action, CO_ID, NeedCheck, PrintBulk, NeedCheckInput}
            rowWareHouseRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowWareHouseRow)
            Return rowWareHouseRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As WareHouseDataTable = CType(MyBase.Clone,WareHouseDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New WareHouseDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAutoID = MyBase.Columns("AutoID")
            Me.columnWH_ID = MyBase.Columns("WH_ID")
            Me.columnWH_Name = MyBase.Columns("WH_Name")
            Me.columnWH_PID = MyBase.Columns("WH_PID")
            Me.columnWH_Key = MyBase.Columns("WH_Key")
            Me.columnWH_Type = MyBase.Columns("WH_Type")
            Me.columnWH_Remark = MyBase.Columns("WH_Remark")
            Me.columnWH_Action = MyBase.Columns("WH_Action")
            Me.columnCO_ID = MyBase.Columns("CO_ID")
            Me.columnNeedCheck = MyBase.Columns("NeedCheck")
            Me.columnPrintBulk = MyBase.Columns("PrintBulk")
            Me.columnNeedCheckInput = MyBase.Columns("NeedCheckInput")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAutoID = New Global.System.Data.DataColumn("AutoID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAutoID)
            Me.columnWH_ID = New Global.System.Data.DataColumn("WH_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWH_ID)
            Me.columnWH_Name = New Global.System.Data.DataColumn("WH_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWH_Name)
            Me.columnWH_PID = New Global.System.Data.DataColumn("WH_PID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWH_PID)
            Me.columnWH_Key = New Global.System.Data.DataColumn("WH_Key", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWH_Key)
            Me.columnWH_Type = New Global.System.Data.DataColumn("WH_Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWH_Type)
            Me.columnWH_Remark = New Global.System.Data.DataColumn("WH_Remark", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWH_Remark)
            Me.columnWH_Action = New Global.System.Data.DataColumn("WH_Action", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWH_Action)
            Me.columnCO_ID = New Global.System.Data.DataColumn("CO_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCO_ID)
            Me.columnNeedCheck = New Global.System.Data.DataColumn("NeedCheck", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNeedCheck)
            Me.columnPrintBulk = New Global.System.Data.DataColumn("PrintBulk", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrintBulk)
            Me.columnNeedCheckInput = New Global.System.Data.DataColumn("NeedCheckInput", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNeedCheckInput)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewWareHouseRow() As WareHouseRow
            Return CType(Me.NewRow,WareHouseRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New WareHouseRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(WareHouseRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.WareHouseRowChangedEvent) Is Nothing) Then
                RaiseEvent WareHouseRowChanged(Me, New WareHouseRowChangeEvent(CType(e.Row,WareHouseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.WareHouseRowChangingEvent) Is Nothing) Then
                RaiseEvent WareHouseRowChanging(Me, New WareHouseRowChangeEvent(CType(e.Row,WareHouseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.WareHouseRowDeletedEvent) Is Nothing) Then
                RaiseEvent WareHouseRowDeleted(Me, New WareHouseRowChangeEvent(CType(e.Row,WareHouseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.WareHouseRowDeletingEvent) Is Nothing) Then
                RaiseEvent WareHouseRowDeleting(Me, New WareHouseRowChangeEvent(CType(e.Row,WareHouseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveWareHouseRow(ByVal row As WareHouseRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As KnifeWareOut = New KnifeWareOut
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "WareHouseDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DepartmentDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAutoID As Global.System.Data.DataColumn
        
        Private columnDPT_ID As Global.System.Data.DataColumn
        
        Private columnDPT_Name As Global.System.Data.DataColumn
        
        Private columnDPT_PID As Global.System.Data.DataColumn
        
        Private columnDPT_PName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Department"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AutoIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAutoID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DPT_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDPT_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DPT_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDPT_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DPT_PIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDPT_PID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DPT_PNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDPT_PName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DepartmentRow
            Get
                Return CType(Me.Rows(index),DepartmentRow)
            End Get
        End Property
        
        Public Event DepartmentRowChanging As DepartmentRowChangeEventHandler
        
        Public Event DepartmentRowChanged As DepartmentRowChangeEventHandler
        
        Public Event DepartmentRowDeleting As DepartmentRowChangeEventHandler
        
        Public Event DepartmentRowDeleted As DepartmentRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDepartmentRow(ByVal row As DepartmentRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDepartmentRow(ByVal AutoID As String, ByVal DPT_ID As String, ByVal DPT_Name As String, ByVal DPT_PID As String, ByVal DPT_PName As String) As DepartmentRow
            Dim rowDepartmentRow As DepartmentRow = CType(Me.NewRow,DepartmentRow)
            Dim columnValuesArray() As Object = New Object() {AutoID, DPT_ID, DPT_Name, DPT_PID, DPT_PName}
            rowDepartmentRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDepartmentRow)
            Return rowDepartmentRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DepartmentDataTable = CType(MyBase.Clone,DepartmentDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DepartmentDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAutoID = MyBase.Columns("AutoID")
            Me.columnDPT_ID = MyBase.Columns("DPT_ID")
            Me.columnDPT_Name = MyBase.Columns("DPT_Name")
            Me.columnDPT_PID = MyBase.Columns("DPT_PID")
            Me.columnDPT_PName = MyBase.Columns("DPT_PName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAutoID = New Global.System.Data.DataColumn("AutoID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAutoID)
            Me.columnDPT_ID = New Global.System.Data.DataColumn("DPT_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDPT_ID)
            Me.columnDPT_Name = New Global.System.Data.DataColumn("DPT_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDPT_Name)
            Me.columnDPT_PID = New Global.System.Data.DataColumn("DPT_PID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDPT_PID)
            Me.columnDPT_PName = New Global.System.Data.DataColumn("DPT_PName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDPT_PName)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDepartmentRow() As DepartmentRow
            Return CType(Me.NewRow,DepartmentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DepartmentRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DepartmentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DepartmentRowChangedEvent) Is Nothing) Then
                RaiseEvent DepartmentRowChanged(Me, New DepartmentRowChangeEvent(CType(e.Row,DepartmentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DepartmentRowChangingEvent) Is Nothing) Then
                RaiseEvent DepartmentRowChanging(Me, New DepartmentRowChangeEvent(CType(e.Row,DepartmentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DepartmentRowDeletedEvent) Is Nothing) Then
                RaiseEvent DepartmentRowDeleted(Me, New DepartmentRowChangeEvent(CType(e.Row,DepartmentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DepartmentRowDeletingEvent) Is Nothing) Then
                RaiseEvent DepartmentRowDeleting(Me, New DepartmentRowChangeEvent(CType(e.Row,DepartmentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDepartmentRow(ByVal row As DepartmentRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As KnifeWareOut = New KnifeWareOut
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DepartmentDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class WhiteUserListDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAutoID As Global.System.Data.DataColumn
        
        Private columnDPT_ID As Global.System.Data.DataColumn
        
        Private columnWH_ID As Global.System.Data.DataColumn
        
        Private columnW_UserID As Global.System.Data.DataColumn
        
        Private columnW_UserName As Global.System.Data.DataColumn
        
        Private columnW_Reamrk As Global.System.Data.DataColumn
        
        Private columnDPT_Name As Global.System.Data.DataColumn
        
        Private columnDPT_PID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "WhiteUserList"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AutoIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAutoID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DPT_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDPT_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WH_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWH_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property W_UserIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnW_UserID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property W_UserNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnW_UserName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property W_ReamrkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnW_Reamrk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DPT_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDPT_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DPT_PIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDPT_PID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As WhiteUserListRow
            Get
                Return CType(Me.Rows(index),WhiteUserListRow)
            End Get
        End Property
        
        Public Event WhiteUserListRowChanging As WhiteUserListRowChangeEventHandler
        
        Public Event WhiteUserListRowChanged As WhiteUserListRowChangeEventHandler
        
        Public Event WhiteUserListRowDeleting As WhiteUserListRowChangeEventHandler
        
        Public Event WhiteUserListRowDeleted As WhiteUserListRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddWhiteUserListRow(ByVal row As WhiteUserListRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddWhiteUserListRow(ByVal AutoID As String, ByVal DPT_ID As String, ByVal WH_ID As String, ByVal W_UserID As String, ByVal W_UserName As String, ByVal W_Reamrk As String, ByVal DPT_Name As String, ByVal DPT_PID As String) As WhiteUserListRow
            Dim rowWhiteUserListRow As WhiteUserListRow = CType(Me.NewRow,WhiteUserListRow)
            Dim columnValuesArray() As Object = New Object() {AutoID, DPT_ID, WH_ID, W_UserID, W_UserName, W_Reamrk, DPT_Name, DPT_PID}
            rowWhiteUserListRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowWhiteUserListRow)
            Return rowWhiteUserListRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As WhiteUserListDataTable = CType(MyBase.Clone,WhiteUserListDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New WhiteUserListDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAutoID = MyBase.Columns("AutoID")
            Me.columnDPT_ID = MyBase.Columns("DPT_ID")
            Me.columnWH_ID = MyBase.Columns("WH_ID")
            Me.columnW_UserID = MyBase.Columns("W_UserID")
            Me.columnW_UserName = MyBase.Columns("W_UserName")
            Me.columnW_Reamrk = MyBase.Columns("W_Reamrk")
            Me.columnDPT_Name = MyBase.Columns("DPT_Name")
            Me.columnDPT_PID = MyBase.Columns("DPT_PID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAutoID = New Global.System.Data.DataColumn("AutoID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAutoID)
            Me.columnDPT_ID = New Global.System.Data.DataColumn("DPT_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDPT_ID)
            Me.columnWH_ID = New Global.System.Data.DataColumn("WH_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWH_ID)
            Me.columnW_UserID = New Global.System.Data.DataColumn("W_UserID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnW_UserID)
            Me.columnW_UserName = New Global.System.Data.DataColumn("W_UserName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnW_UserName)
            Me.columnW_Reamrk = New Global.System.Data.DataColumn("W_Reamrk", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnW_Reamrk)
            Me.columnDPT_Name = New Global.System.Data.DataColumn("DPT_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDPT_Name)
            Me.columnDPT_PID = New Global.System.Data.DataColumn("DPT_PID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDPT_PID)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewWhiteUserListRow() As WhiteUserListRow
            Return CType(Me.NewRow,WhiteUserListRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New WhiteUserListRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(WhiteUserListRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.WhiteUserListRowChangedEvent) Is Nothing) Then
                RaiseEvent WhiteUserListRowChanged(Me, New WhiteUserListRowChangeEvent(CType(e.Row,WhiteUserListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.WhiteUserListRowChangingEvent) Is Nothing) Then
                RaiseEvent WhiteUserListRowChanging(Me, New WhiteUserListRowChangeEvent(CType(e.Row,WhiteUserListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.WhiteUserListRowDeletedEvent) Is Nothing) Then
                RaiseEvent WhiteUserListRowDeleted(Me, New WhiteUserListRowChangeEvent(CType(e.Row,WhiteUserListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.WhiteUserListRowDeletingEvent) Is Nothing) Then
                RaiseEvent WhiteUserListRowDeleting(Me, New WhiteUserListRowChangeEvent(CType(e.Row,WhiteUserListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveWhiteUserListRow(ByVal row As WhiteUserListRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As KnifeWareOut = New KnifeWareOut
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "WhiteUserListDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class KnifeWareOutRow
        Inherits Global.System.Data.DataRow
        
        Private tableKnifeWareOut As KnifeWareOutDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableKnifeWareOut = CType(Me.Table,KnifeWareOutDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AutoID() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareOut.AutoIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareOut' 中資料行 'AutoID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareOut.AutoIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WO_NUM() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareOut.WO_NUMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareOut' 中資料行 'WO_NUM' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareOut.WO_NUMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WO_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareOut.WO_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareOut' 中資料行 'WO_ID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareOut.WO_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WO_Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareOut.WO_TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareOut' 中資料行 'WO_Type' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareOut.WO_TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AP_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareOut.AP_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareOut' 中資料行 'AP_NO' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareOut.AP_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OP_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareOut.OP_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareOut' 中資料行 'OP_NO' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareOut.OP_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M_Code() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareOut.M_CodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareOut' 中資料行 'M_Code' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareOut.M_CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WO_Qty() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareOut.WO_QtyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareOut' 中資料行 'WO_Qty' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareOut.WO_QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WO_AddDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareOut.WO_AddDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareOut' 中資料行 'WO_AddDate' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareOut.WO_AddDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WH_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareOut.WH_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareOut' 中資料行 'WH_ID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareOut.WH_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OS_BatchID() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareOut.OS_BatchIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareOut' 中資料行 'OS_BatchID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareOut.OS_BatchIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WO_Action() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareOut.WO_ActionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareOut' 中資料行 'WO_Action' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareOut.WO_ActionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WO_EditDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareOut.WO_EditDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareOut' 中資料行 'WO_EditDate' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareOut.WO_EditDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WO_Remark() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareOut.WO_RemarkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareOut' 中資料行 'WO_Remark' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareOut.WO_RemarkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DPT_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareOut.DPT_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareOut' 中資料行 'DPT_ID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareOut.DPT_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WO_PerID() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareOut.WO_PerIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareOut' 中資料行 'WO_PerID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareOut.WO_PerIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WO_PerName() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareOut.WO_PerNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareOut' 中資料行 'WO_PerName' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareOut.WO_PerNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WO_Check() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareOut.WO_CheckColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareOut' 中資料行 'WO_Check' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareOut.WO_CheckColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WO_CheckAction() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareOut.WO_CheckActionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareOut' 中資料行 'WO_CheckAction' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareOut.WO_CheckActionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WO_CheckDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareOut.WO_CheckDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareOut' 中資料行 'WO_CheckDate' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareOut.WO_CheckDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WO_CheckRemark() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareOut.WO_CheckRemarkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareOut' 中資料行 'WO_CheckRemark' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareOut.WO_CheckRemarkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WO_ReCheck() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareOut.WO_ReCheckColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareOut' 中資料行 'WO_ReCheck' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareOut.WO_ReCheckColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WO_ReCheckAction() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareOut.WO_ReCheckActionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareOut' 中資料行 'WO_ReCheckAction' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareOut.WO_ReCheckActionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WO_ReCheckDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareOut.WO_ReCheckDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareOut' 中資料行 'WO_ReCheckDate' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareOut.WO_ReCheckDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WO_ReCheckRemark() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareOut.WO_ReCheckRemarkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareOut' 中資料行 'WO_ReCheckRemark' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareOut.WO_ReCheckRemarkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareOut.M_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareOut' 中資料行 'M_ID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareOut.M_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Temp_Code() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareOut.Temp_CodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareOut' 中資料行 'Temp_Code' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareOut.Temp_CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WO_EndQty() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareOut.WO_EndQtyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareOut' 中資料行 'WO_EndQty' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareOut.WO_EndQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KnifeType() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareOut.KnifeTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareOut' 中資料行 'KnifeType' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareOut.KnifeTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareOut.M_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareOut' 中資料行 'M_Name' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareOut.M_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M_Gauge() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareOut.M_GaugeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareOut' 中資料行 'M_Gauge' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareOut.M_GaugeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M_Currency() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareOut.M_CurrencyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareOut' 中資料行 'M_Currency' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareOut.M_CurrencyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M_Price() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareOut.M_PriceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareOut' 中資料行 'M_Price' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareOut.M_PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type1Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareOut.Type1NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareOut' 中資料行 'Type1Name' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareOut.Type1NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type2Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareOut.Type2NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareOut' 中資料行 'Type2Name' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareOut.Type2NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type3Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareOut.Type3NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareOut' 中資料行 'Type3Name' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareOut.Type3NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M_Unit() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareOut.M_UnitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareOut' 中資料行 'M_Unit' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareOut.M_UnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WO_ActionName() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareOut.WO_ActionNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareOut' 中資料行 'WO_ActionName' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareOut.WO_ActionNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WO_CheckActionName() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareOut.WO_CheckActionNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareOut' 中資料行 'WO_CheckActionName' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareOut.WO_CheckActionNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WH_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareOut.WH_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareOut' 中資料行 'WH_Name' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareOut.WH_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WH_PName() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareOut.WH_PNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareOut' 中資料行 'WH_PName' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareOut.WH_PNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DPT_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareOut.DPT_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareOut' 中資料行 'DPT_Name' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareOut.DPT_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DPT_PName() As String
            Get
                Try 
                    Return CType(Me(Me.tableKnifeWareOut.DPT_PNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'KnifeWareOut' 中資料行 'DPT_PName' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableKnifeWareOut.DPT_PNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAutoIDNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareOut.AutoIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAutoIDNull()
            Me(Me.tableKnifeWareOut.AutoIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWO_NUMNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareOut.WO_NUMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWO_NUMNull()
            Me(Me.tableKnifeWareOut.WO_NUMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWO_IDNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareOut.WO_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWO_IDNull()
            Me(Me.tableKnifeWareOut.WO_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWO_TypeNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareOut.WO_TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWO_TypeNull()
            Me(Me.tableKnifeWareOut.WO_TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAP_NONull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareOut.AP_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAP_NONull()
            Me(Me.tableKnifeWareOut.AP_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOP_NONull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareOut.OP_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOP_NONull()
            Me(Me.tableKnifeWareOut.OP_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM_CodeNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareOut.M_CodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM_CodeNull()
            Me(Me.tableKnifeWareOut.M_CodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWO_QtyNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareOut.WO_QtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWO_QtyNull()
            Me(Me.tableKnifeWareOut.WO_QtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWO_AddDateNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareOut.WO_AddDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWO_AddDateNull()
            Me(Me.tableKnifeWareOut.WO_AddDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWH_IDNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareOut.WH_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWH_IDNull()
            Me(Me.tableKnifeWareOut.WH_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOS_BatchIDNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareOut.OS_BatchIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOS_BatchIDNull()
            Me(Me.tableKnifeWareOut.OS_BatchIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWO_ActionNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareOut.WO_ActionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWO_ActionNull()
            Me(Me.tableKnifeWareOut.WO_ActionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWO_EditDateNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareOut.WO_EditDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWO_EditDateNull()
            Me(Me.tableKnifeWareOut.WO_EditDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWO_RemarkNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareOut.WO_RemarkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWO_RemarkNull()
            Me(Me.tableKnifeWareOut.WO_RemarkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDPT_IDNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareOut.DPT_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDPT_IDNull()
            Me(Me.tableKnifeWareOut.DPT_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWO_PerIDNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareOut.WO_PerIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWO_PerIDNull()
            Me(Me.tableKnifeWareOut.WO_PerIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWO_PerNameNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareOut.WO_PerNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWO_PerNameNull()
            Me(Me.tableKnifeWareOut.WO_PerNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWO_CheckNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareOut.WO_CheckColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWO_CheckNull()
            Me(Me.tableKnifeWareOut.WO_CheckColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWO_CheckActionNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareOut.WO_CheckActionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWO_CheckActionNull()
            Me(Me.tableKnifeWareOut.WO_CheckActionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWO_CheckDateNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareOut.WO_CheckDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWO_CheckDateNull()
            Me(Me.tableKnifeWareOut.WO_CheckDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWO_CheckRemarkNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareOut.WO_CheckRemarkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWO_CheckRemarkNull()
            Me(Me.tableKnifeWareOut.WO_CheckRemarkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWO_ReCheckNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareOut.WO_ReCheckColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWO_ReCheckNull()
            Me(Me.tableKnifeWareOut.WO_ReCheckColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWO_ReCheckActionNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareOut.WO_ReCheckActionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWO_ReCheckActionNull()
            Me(Me.tableKnifeWareOut.WO_ReCheckActionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWO_ReCheckDateNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareOut.WO_ReCheckDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWO_ReCheckDateNull()
            Me(Me.tableKnifeWareOut.WO_ReCheckDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWO_ReCheckRemarkNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareOut.WO_ReCheckRemarkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWO_ReCheckRemarkNull()
            Me(Me.tableKnifeWareOut.WO_ReCheckRemarkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM_IDNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareOut.M_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM_IDNull()
            Me(Me.tableKnifeWareOut.M_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTemp_CodeNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareOut.Temp_CodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTemp_CodeNull()
            Me(Me.tableKnifeWareOut.Temp_CodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWO_EndQtyNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareOut.WO_EndQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWO_EndQtyNull()
            Me(Me.tableKnifeWareOut.WO_EndQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKnifeTypeNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareOut.KnifeTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKnifeTypeNull()
            Me(Me.tableKnifeWareOut.KnifeTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM_NameNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareOut.M_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM_NameNull()
            Me(Me.tableKnifeWareOut.M_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM_GaugeNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareOut.M_GaugeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM_GaugeNull()
            Me(Me.tableKnifeWareOut.M_GaugeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM_CurrencyNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareOut.M_CurrencyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM_CurrencyNull()
            Me(Me.tableKnifeWareOut.M_CurrencyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM_PriceNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareOut.M_PriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM_PriceNull()
            Me(Me.tableKnifeWareOut.M_PriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsType1NameNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareOut.Type1NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetType1NameNull()
            Me(Me.tableKnifeWareOut.Type1NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsType2NameNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareOut.Type2NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetType2NameNull()
            Me(Me.tableKnifeWareOut.Type2NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsType3NameNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareOut.Type3NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetType3NameNull()
            Me(Me.tableKnifeWareOut.Type3NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM_UnitNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareOut.M_UnitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM_UnitNull()
            Me(Me.tableKnifeWareOut.M_UnitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWO_ActionNameNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareOut.WO_ActionNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWO_ActionNameNull()
            Me(Me.tableKnifeWareOut.WO_ActionNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWO_CheckActionNameNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareOut.WO_CheckActionNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWO_CheckActionNameNull()
            Me(Me.tableKnifeWareOut.WO_CheckActionNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWH_NameNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareOut.WH_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWH_NameNull()
            Me(Me.tableKnifeWareOut.WH_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWH_PNameNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareOut.WH_PNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWH_PNameNull()
            Me(Me.tableKnifeWareOut.WH_PNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDPT_NameNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareOut.DPT_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDPT_NameNull()
            Me(Me.tableKnifeWareOut.DPT_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDPT_PNameNull() As Boolean
            Return Me.IsNull(Me.tableKnifeWareOut.DPT_PNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDPT_PNameNull()
            Me(Me.tableKnifeWareOut.DPT_PNameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class UnitRow
        Inherits Global.System.Data.DataRow
        
        Private tableUnit As UnitDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableUnit = CType(Me.Table,UnitDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AutoID() As String
            Get
                Try 
                    Return CType(Me(Me.tableUnit.AutoIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'Unit' 中資料行 'AutoID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableUnit.AutoIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property U_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableUnit.U_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'Unit' 中資料行 'U_ID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableUnit.U_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property U_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableUnit.U_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'Unit' 中資料行 'U_Name' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableUnit.U_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAutoIDNull() As Boolean
            Return Me.IsNull(Me.tableUnit.AutoIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAutoIDNull()
            Me(Me.tableUnit.AutoIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsU_IDNull() As Boolean
            Return Me.IsNull(Me.tableUnit.U_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetU_IDNull()
            Me(Me.tableUnit.U_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsU_NameNull() As Boolean
            Return Me.IsNull(Me.tableUnit.U_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetU_NameNull()
            Me(Me.tableUnit.U_NameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SystemUserRow
        Inherits Global.System.Data.DataRow
        
        Private tableSystemUser As SystemUserDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSystemUser = CType(Me.Table,SystemUserDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property U_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableSystemUser.U_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SystemUser' 中資料行 'U_ID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSystemUser.U_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property U_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableSystemUser.U_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SystemUser' 中資料行 'U_Name' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSystemUser.U_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property U_PassWord() As String
            Get
                Try 
                    Return CType(Me(Me.tableSystemUser.U_PassWordColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SystemUser' 中資料行 'U_PassWord' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSystemUser.U_PassWordColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property U_Email() As String
            Get
                Try 
                    Return CType(Me(Me.tableSystemUser.U_EmailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SystemUser' 中資料行 'U_Email' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSystemUser.U_EmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property U_Tel() As String
            Get
                Try 
                    Return CType(Me(Me.tableSystemUser.U_TelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SystemUser' 中資料行 'U_Tel' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSystemUser.U_TelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DPT_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableSystemUser.DPT_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SystemUser' 中資料行 'DPT_ID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSystemUser.DPT_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property U_UsbKeyID() As String
            Get
                Try 
                    Return CType(Me(Me.tableSystemUser.U_UsbKeyIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SystemUser' 中資料行 'U_UsbKeyID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSystemUser.U_UsbKeyIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property U_UsbKeyPassWord() As String
            Get
                Try 
                    Return CType(Me(Me.tableSystemUser.U_UsbKeyPassWordColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SystemUser' 中資料行 'U_UsbKeyPassWord' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSystemUser.U_UsbKeyPassWordColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property U_KeyImage() As String
            Get
                Try 
                    Return CType(Me(Me.tableSystemUser.U_KeyImageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SystemUser' 中資料行 'U_KeyImage' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSystemUser.U_KeyImageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JobNO() As String
            Get
                Try 
                    Return CType(Me(Me.tableSystemUser.JobNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SystemUser' 中資料行 'JobNO' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSystemUser.JobNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property U_Enabled() As String
            Get
                Try 
                    Return CType(Me(Me.tableSystemUser.U_EnabledColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SystemUser' 中資料行 'U_Enabled' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSystemUser.U_EnabledColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property U_DPT_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableSystemUser.U_DPT_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SystemUser' 中資料行 'U_DPT_Name' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSystemUser.U_DPT_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DepID() As String
            Get
                Try 
                    Return CType(Me(Me.tableSystemUser.DepIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SystemUser' 中資料行 'DepID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSystemUser.DepIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DepName() As String
            Get
                Try 
                    Return CType(Me(Me.tableSystemUser.DepNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SystemUser' 中資料行 'DepName' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSystemUser.DepNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UserRank() As String
            Get
                Try 
                    Return CType(Me(Me.tableSystemUser.UserRankColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SystemUser' 中資料行 'UserRank' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSystemUser.UserRankColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UserType() As String
            Get
                Try 
                    Return CType(Me(Me.tableSystemUser.UserTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SystemUser' 中資料行 'UserType' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSystemUser.UserTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsU_IDNull() As Boolean
            Return Me.IsNull(Me.tableSystemUser.U_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetU_IDNull()
            Me(Me.tableSystemUser.U_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsU_NameNull() As Boolean
            Return Me.IsNull(Me.tableSystemUser.U_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetU_NameNull()
            Me(Me.tableSystemUser.U_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsU_PassWordNull() As Boolean
            Return Me.IsNull(Me.tableSystemUser.U_PassWordColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetU_PassWordNull()
            Me(Me.tableSystemUser.U_PassWordColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsU_EmailNull() As Boolean
            Return Me.IsNull(Me.tableSystemUser.U_EmailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetU_EmailNull()
            Me(Me.tableSystemUser.U_EmailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsU_TelNull() As Boolean
            Return Me.IsNull(Me.tableSystemUser.U_TelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetU_TelNull()
            Me(Me.tableSystemUser.U_TelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDPT_IDNull() As Boolean
            Return Me.IsNull(Me.tableSystemUser.DPT_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDPT_IDNull()
            Me(Me.tableSystemUser.DPT_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsU_UsbKeyIDNull() As Boolean
            Return Me.IsNull(Me.tableSystemUser.U_UsbKeyIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetU_UsbKeyIDNull()
            Me(Me.tableSystemUser.U_UsbKeyIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsU_UsbKeyPassWordNull() As Boolean
            Return Me.IsNull(Me.tableSystemUser.U_UsbKeyPassWordColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetU_UsbKeyPassWordNull()
            Me(Me.tableSystemUser.U_UsbKeyPassWordColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsU_KeyImageNull() As Boolean
            Return Me.IsNull(Me.tableSystemUser.U_KeyImageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetU_KeyImageNull()
            Me(Me.tableSystemUser.U_KeyImageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJobNONull() As Boolean
            Return Me.IsNull(Me.tableSystemUser.JobNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJobNONull()
            Me(Me.tableSystemUser.JobNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsU_EnabledNull() As Boolean
            Return Me.IsNull(Me.tableSystemUser.U_EnabledColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetU_EnabledNull()
            Me(Me.tableSystemUser.U_EnabledColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsU_DPT_NameNull() As Boolean
            Return Me.IsNull(Me.tableSystemUser.U_DPT_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetU_DPT_NameNull()
            Me(Me.tableSystemUser.U_DPT_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepIDNull() As Boolean
            Return Me.IsNull(Me.tableSystemUser.DepIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepIDNull()
            Me(Me.tableSystemUser.DepIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepNameNull() As Boolean
            Return Me.IsNull(Me.tableSystemUser.DepNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepNameNull()
            Me(Me.tableSystemUser.DepNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUserRankNull() As Boolean
            Return Me.IsNull(Me.tableSystemUser.UserRankColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUserRankNull()
            Me(Me.tableSystemUser.UserRankColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUserTypeNull() As Boolean
            Return Me.IsNull(Me.tableSystemUser.UserTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUserTypeNull()
            Me(Me.tableSystemUser.UserTypeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class WareHouseRow
        Inherits Global.System.Data.DataRow
        
        Private tableWareHouse As WareHouseDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableWareHouse = CType(Me.Table,WareHouseDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AutoID() As String
            Get
                Try 
                    Return CType(Me(Me.tableWareHouse.AutoIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'WareHouse' 中資料行 'AutoID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableWareHouse.AutoIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WH_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableWareHouse.WH_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'WareHouse' 中資料行 'WH_ID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableWareHouse.WH_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WH_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableWareHouse.WH_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'WareHouse' 中資料行 'WH_Name' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableWareHouse.WH_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WH_PID() As String
            Get
                Try 
                    Return CType(Me(Me.tableWareHouse.WH_PIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'WareHouse' 中資料行 'WH_PID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableWareHouse.WH_PIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WH_Key() As String
            Get
                Try 
                    Return CType(Me(Me.tableWareHouse.WH_KeyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'WareHouse' 中資料行 'WH_Key' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableWareHouse.WH_KeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WH_Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableWareHouse.WH_TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'WareHouse' 中資料行 'WH_Type' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableWareHouse.WH_TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WH_Remark() As String
            Get
                Try 
                    Return CType(Me(Me.tableWareHouse.WH_RemarkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'WareHouse' 中資料行 'WH_Remark' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableWareHouse.WH_RemarkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WH_Action() As String
            Get
                Try 
                    Return CType(Me(Me.tableWareHouse.WH_ActionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'WareHouse' 中資料行 'WH_Action' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableWareHouse.WH_ActionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CO_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableWareHouse.CO_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'WareHouse' 中資料行 'CO_ID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableWareHouse.CO_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NeedCheck() As String
            Get
                Try 
                    Return CType(Me(Me.tableWareHouse.NeedCheckColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'WareHouse' 中資料行 'NeedCheck' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableWareHouse.NeedCheckColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrintBulk() As String
            Get
                Try 
                    Return CType(Me(Me.tableWareHouse.PrintBulkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'WareHouse' 中資料行 'PrintBulk' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableWareHouse.PrintBulkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NeedCheckInput() As String
            Get
                Try 
                    Return CType(Me(Me.tableWareHouse.NeedCheckInputColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'WareHouse' 中資料行 'NeedCheckInput' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableWareHouse.NeedCheckInputColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAutoIDNull() As Boolean
            Return Me.IsNull(Me.tableWareHouse.AutoIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAutoIDNull()
            Me(Me.tableWareHouse.AutoIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWH_IDNull() As Boolean
            Return Me.IsNull(Me.tableWareHouse.WH_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWH_IDNull()
            Me(Me.tableWareHouse.WH_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWH_NameNull() As Boolean
            Return Me.IsNull(Me.tableWareHouse.WH_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWH_NameNull()
            Me(Me.tableWareHouse.WH_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWH_PIDNull() As Boolean
            Return Me.IsNull(Me.tableWareHouse.WH_PIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWH_PIDNull()
            Me(Me.tableWareHouse.WH_PIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWH_KeyNull() As Boolean
            Return Me.IsNull(Me.tableWareHouse.WH_KeyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWH_KeyNull()
            Me(Me.tableWareHouse.WH_KeyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWH_TypeNull() As Boolean
            Return Me.IsNull(Me.tableWareHouse.WH_TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWH_TypeNull()
            Me(Me.tableWareHouse.WH_TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWH_RemarkNull() As Boolean
            Return Me.IsNull(Me.tableWareHouse.WH_RemarkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWH_RemarkNull()
            Me(Me.tableWareHouse.WH_RemarkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWH_ActionNull() As Boolean
            Return Me.IsNull(Me.tableWareHouse.WH_ActionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWH_ActionNull()
            Me(Me.tableWareHouse.WH_ActionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCO_IDNull() As Boolean
            Return Me.IsNull(Me.tableWareHouse.CO_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCO_IDNull()
            Me(Me.tableWareHouse.CO_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNeedCheckNull() As Boolean
            Return Me.IsNull(Me.tableWareHouse.NeedCheckColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNeedCheckNull()
            Me(Me.tableWareHouse.NeedCheckColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrintBulkNull() As Boolean
            Return Me.IsNull(Me.tableWareHouse.PrintBulkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrintBulkNull()
            Me(Me.tableWareHouse.PrintBulkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNeedCheckInputNull() As Boolean
            Return Me.IsNull(Me.tableWareHouse.NeedCheckInputColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNeedCheckInputNull()
            Me(Me.tableWareHouse.NeedCheckInputColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DepartmentRow
        Inherits Global.System.Data.DataRow
        
        Private tableDepartment As DepartmentDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDepartment = CType(Me.Table,DepartmentDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AutoID() As String
            Get
                Try 
                    Return CType(Me(Me.tableDepartment.AutoIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'Department' 中資料行 'AutoID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableDepartment.AutoIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DPT_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableDepartment.DPT_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'Department' 中資料行 'DPT_ID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableDepartment.DPT_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DPT_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableDepartment.DPT_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'Department' 中資料行 'DPT_Name' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableDepartment.DPT_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DPT_PID() As String
            Get
                Try 
                    Return CType(Me(Me.tableDepartment.DPT_PIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'Department' 中資料行 'DPT_PID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableDepartment.DPT_PIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DPT_PName() As String
            Get
                Try 
                    Return CType(Me(Me.tableDepartment.DPT_PNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'Department' 中資料行 'DPT_PName' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableDepartment.DPT_PNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAutoIDNull() As Boolean
            Return Me.IsNull(Me.tableDepartment.AutoIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAutoIDNull()
            Me(Me.tableDepartment.AutoIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDPT_IDNull() As Boolean
            Return Me.IsNull(Me.tableDepartment.DPT_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDPT_IDNull()
            Me(Me.tableDepartment.DPT_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDPT_NameNull() As Boolean
            Return Me.IsNull(Me.tableDepartment.DPT_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDPT_NameNull()
            Me(Me.tableDepartment.DPT_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDPT_PIDNull() As Boolean
            Return Me.IsNull(Me.tableDepartment.DPT_PIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDPT_PIDNull()
            Me(Me.tableDepartment.DPT_PIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDPT_PNameNull() As Boolean
            Return Me.IsNull(Me.tableDepartment.DPT_PNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDPT_PNameNull()
            Me(Me.tableDepartment.DPT_PNameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class WhiteUserListRow
        Inherits Global.System.Data.DataRow
        
        Private tableWhiteUserList As WhiteUserListDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableWhiteUserList = CType(Me.Table,WhiteUserListDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AutoID() As String
            Get
                Try 
                    Return CType(Me(Me.tableWhiteUserList.AutoIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'WhiteUserList' 中資料行 'AutoID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableWhiteUserList.AutoIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DPT_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableWhiteUserList.DPT_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'WhiteUserList' 中資料行 'DPT_ID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableWhiteUserList.DPT_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WH_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableWhiteUserList.WH_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'WhiteUserList' 中資料行 'WH_ID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableWhiteUserList.WH_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property W_UserID() As String
            Get
                Try 
                    Return CType(Me(Me.tableWhiteUserList.W_UserIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'WhiteUserList' 中資料行 'W_UserID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableWhiteUserList.W_UserIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property W_UserName() As String
            Get
                Try 
                    Return CType(Me(Me.tableWhiteUserList.W_UserNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'WhiteUserList' 中資料行 'W_UserName' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableWhiteUserList.W_UserNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property W_Reamrk() As String
            Get
                Try 
                    Return CType(Me(Me.tableWhiteUserList.W_ReamrkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'WhiteUserList' 中資料行 'W_Reamrk' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableWhiteUserList.W_ReamrkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DPT_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableWhiteUserList.DPT_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'WhiteUserList' 中資料行 'DPT_Name' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableWhiteUserList.DPT_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DPT_PID() As String
            Get
                Try 
                    Return CType(Me(Me.tableWhiteUserList.DPT_PIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'WhiteUserList' 中資料行 'DPT_PID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableWhiteUserList.DPT_PIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAutoIDNull() As Boolean
            Return Me.IsNull(Me.tableWhiteUserList.AutoIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAutoIDNull()
            Me(Me.tableWhiteUserList.AutoIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDPT_IDNull() As Boolean
            Return Me.IsNull(Me.tableWhiteUserList.DPT_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDPT_IDNull()
            Me(Me.tableWhiteUserList.DPT_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWH_IDNull() As Boolean
            Return Me.IsNull(Me.tableWhiteUserList.WH_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWH_IDNull()
            Me(Me.tableWhiteUserList.WH_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsW_UserIDNull() As Boolean
            Return Me.IsNull(Me.tableWhiteUserList.W_UserIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetW_UserIDNull()
            Me(Me.tableWhiteUserList.W_UserIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsW_UserNameNull() As Boolean
            Return Me.IsNull(Me.tableWhiteUserList.W_UserNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetW_UserNameNull()
            Me(Me.tableWhiteUserList.W_UserNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsW_ReamrkNull() As Boolean
            Return Me.IsNull(Me.tableWhiteUserList.W_ReamrkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetW_ReamrkNull()
            Me(Me.tableWhiteUserList.W_ReamrkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDPT_NameNull() As Boolean
            Return Me.IsNull(Me.tableWhiteUserList.DPT_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDPT_NameNull()
            Me(Me.tableWhiteUserList.DPT_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDPT_PIDNull() As Boolean
            Return Me.IsNull(Me.tableWhiteUserList.DPT_PIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDPT_PIDNull()
            Me(Me.tableWhiteUserList.DPT_PIDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class KnifeWareOutRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As KnifeWareOutRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As KnifeWareOutRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As KnifeWareOutRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class UnitRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As UnitRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As UnitRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As UnitRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SystemUserRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SystemUserRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SystemUserRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SystemUserRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class WareHouseRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As WareHouseRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As WareHouseRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As WareHouseRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DepartmentRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DepartmentRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DepartmentRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DepartmentRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class WhiteUserListRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As WhiteUserListRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As WhiteUserListRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As WhiteUserListRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
