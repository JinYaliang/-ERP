'------------------------------------------------------------------------------
' <auto-generated>
'     這段程式碼是由工具產生的。
'     執行階段版本:2.0.50727.5420
'
'     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
'     變更將會遺失。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("SampleOrders"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class SampleOrders
    Inherits Global.System.Data.DataSet
    
    Private tableSampleOrdersMain As SampleOrdersMainDataTable
    
    Private tableSampleOrdersSub As SampleOrdersSubDataTable
    
    Private tableSampleWareInventory As SampleWareInventoryDataTable
    
    Private tableSampleCollection As SampleCollectionDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("SampleOrdersMain")) Is Nothing) Then
                MyBase.Tables.Add(New SampleOrdersMainDataTable(ds.Tables("SampleOrdersMain")))
            End If
            If (Not (ds.Tables("SampleOrdersSub")) Is Nothing) Then
                MyBase.Tables.Add(New SampleOrdersSubDataTable(ds.Tables("SampleOrdersSub")))
            End If
            If (Not (ds.Tables("SampleWareInventory")) Is Nothing) Then
                MyBase.Tables.Add(New SampleWareInventoryDataTable(ds.Tables("SampleWareInventory")))
            End If
            If (Not (ds.Tables("SampleCollection")) Is Nothing) Then
                MyBase.Tables.Add(New SampleCollectionDataTable(ds.Tables("SampleCollection")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SampleOrdersMain() As SampleOrdersMainDataTable
        Get
            Return Me.tableSampleOrdersMain
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SampleOrdersSub() As SampleOrdersSubDataTable
        Get
            Return Me.tableSampleOrdersSub
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SampleWareInventory() As SampleWareInventoryDataTable
        Get
            Return Me.tableSampleWareInventory
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SampleCollection() As SampleCollectionDataTable
        Get
            Return Me.tableSampleCollection
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As SampleOrders = CType(MyBase.Clone,SampleOrders)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("SampleOrdersMain")) Is Nothing) Then
                MyBase.Tables.Add(New SampleOrdersMainDataTable(ds.Tables("SampleOrdersMain")))
            End If
            If (Not (ds.Tables("SampleOrdersSub")) Is Nothing) Then
                MyBase.Tables.Add(New SampleOrdersSubDataTable(ds.Tables("SampleOrdersSub")))
            End If
            If (Not (ds.Tables("SampleWareInventory")) Is Nothing) Then
                MyBase.Tables.Add(New SampleWareInventoryDataTable(ds.Tables("SampleWareInventory")))
            End If
            If (Not (ds.Tables("SampleCollection")) Is Nothing) Then
                MyBase.Tables.Add(New SampleCollectionDataTable(ds.Tables("SampleCollection")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableSampleOrdersMain = CType(MyBase.Tables("SampleOrdersMain"),SampleOrdersMainDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSampleOrdersMain) Is Nothing) Then
                Me.tableSampleOrdersMain.InitVars
            End If
        End If
        Me.tableSampleOrdersSub = CType(MyBase.Tables("SampleOrdersSub"),SampleOrdersSubDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSampleOrdersSub) Is Nothing) Then
                Me.tableSampleOrdersSub.InitVars
            End If
        End If
        Me.tableSampleWareInventory = CType(MyBase.Tables("SampleWareInventory"),SampleWareInventoryDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSampleWareInventory) Is Nothing) Then
                Me.tableSampleWareInventory.InitVars
            End If
        End If
        Me.tableSampleCollection = CType(MyBase.Tables("SampleCollection"),SampleCollectionDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSampleCollection) Is Nothing) Then
                Me.tableSampleCollection.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "SampleOrders"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/SampleOrders.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableSampleOrdersMain = New SampleOrdersMainDataTable
        MyBase.Tables.Add(Me.tableSampleOrdersMain)
        Me.tableSampleOrdersSub = New SampleOrdersSubDataTable
        MyBase.Tables.Add(Me.tableSampleOrdersSub)
        Me.tableSampleWareInventory = New SampleWareInventoryDataTable
        MyBase.Tables.Add(Me.tableSampleWareInventory)
        Me.tableSampleCollection = New SampleCollectionDataTable
        MyBase.Tables.Add(Me.tableSampleCollection)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSampleOrdersMain() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSampleOrdersSub() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSampleWareInventory() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSampleCollection() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As SampleOrders = New SampleOrders
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub SampleOrdersMainRowChangeEventHandler(ByVal sender As Object, ByVal e As SampleOrdersMainRowChangeEvent)
    
    Public Delegate Sub SampleOrdersSubRowChangeEventHandler(ByVal sender As Object, ByVal e As SampleOrdersSubRowChangeEvent)
    
    Public Delegate Sub SampleWareInventoryRowChangeEventHandler(ByVal sender As Object, ByVal e As SampleWareInventoryRowChangeEvent)
    
    Public Delegate Sub SampleCollectionRowChangeEventHandler(ByVal sender As Object, ByVal e As SampleCollectionRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SampleOrdersMainDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAutoID As Global.System.Data.DataColumn
        
        Private columnSO_ID As Global.System.Data.DataColumn
        
        Private columnSO_No As Global.System.Data.DataColumn
        
        Private columnSO_CusterID As Global.System.Data.DataColumn
        
        Private columnSO_CusterPO As Global.System.Data.DataColumn
        
        Private columnSO_CusterNo As Global.System.Data.DataColumn
        
        Private columnPM_M_Code As Global.System.Data.DataColumn
        
        Private columnM_Code As Global.System.Data.DataColumn
        
        Private columnSO_SendDate As Global.System.Data.DataColumn
        
        Private columnSO_PoDate As Global.System.Data.DataColumn
        
        Private columnSO_OrderQty As Global.System.Data.DataColumn
        
        Private columnSO_NoSendQty As Global.System.Data.DataColumn
        
        Private columnSO_Completion As Global.System.Data.DataColumn
        
        Private columnSO_Remark As Global.System.Data.DataColumn
        
        Private columnSO_Gauge As Global.System.Data.DataColumn
        
        Private columnCO_ID As Global.System.Data.DataColumn
        
        Private columnSO_State As Global.System.Data.DataColumn
        
        Private columnSO_CheckDate As Global.System.Data.DataColumn
        
        Private columnSO_CheckUserID As Global.System.Data.DataColumn
        
        Private columnSO_Check As Global.System.Data.DataColumn
        
        Private columnSO_AddUserID As Global.System.Data.DataColumn
        
        Private columnSO_AddDate As Global.System.Data.DataColumn
        
        Private columnSO_ModifyUserID As Global.System.Data.DataColumn
        
        Private columnSO_ModifyDate As Global.System.Data.DataColumn
        
        Private columnSO_CheckRemark As Global.System.Data.DataColumn
        
        Private columnSO_CreateDate As Global.System.Data.DataColumn
        
        Private columnSO_Rank As Global.System.Data.DataColumn
        
        Private columnM_Name As Global.System.Data.DataColumn
        
        Private columnSO_CheckUserName As Global.System.Data.DataColumn
        
        Private columnSO_AddUserName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SampleOrdersMain"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AutoIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAutoID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SO_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSO_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SO_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSO_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SO_CusterIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSO_CusterID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SO_CusterPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSO_CusterPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SO_CusterNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSO_CusterNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PM_M_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPM_M_Code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_Code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SO_SendDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSO_SendDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SO_PoDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSO_PoDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SO_OrderQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSO_OrderQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SO_NoSendQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSO_NoSendQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SO_CompletionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSO_Completion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SO_RemarkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSO_Remark
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SO_GaugeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSO_Gauge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CO_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCO_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SO_StateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSO_State
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SO_CheckDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSO_CheckDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SO_CheckUserIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSO_CheckUserID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SO_CheckColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSO_Check
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SO_AddUserIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSO_AddUserID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SO_AddDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSO_AddDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SO_ModifyUserIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSO_ModifyUserID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SO_ModifyDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSO_ModifyDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SO_CheckRemarkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSO_CheckRemark
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SO_CreateDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSO_CreateDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SO_RankColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSO_Rank
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SO_CheckUserNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSO_CheckUserName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SO_AddUserNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSO_AddUserName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SampleOrdersMainRow
            Get
                Return CType(Me.Rows(index),SampleOrdersMainRow)
            End Get
        End Property
        
        Public Event SampleOrdersMainRowChanging As SampleOrdersMainRowChangeEventHandler
        
        Public Event SampleOrdersMainRowChanged As SampleOrdersMainRowChangeEventHandler
        
        Public Event SampleOrdersMainRowDeleting As SampleOrdersMainRowChangeEventHandler
        
        Public Event SampleOrdersMainRowDeleted As SampleOrdersMainRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSampleOrdersMainRow(ByVal row As SampleOrdersMainRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSampleOrdersMainRow( _
                    ByVal AutoID As String,  _
                    ByVal SO_ID As String,  _
                    ByVal SO_No As String,  _
                    ByVal SO_CusterID As String,  _
                    ByVal SO_CusterPO As String,  _
                    ByVal SO_CusterNo As String,  _
                    ByVal PM_M_Code As String,  _
                    ByVal M_Code As String,  _
                    ByVal SO_SendDate As String,  _
                    ByVal SO_PoDate As String,  _
                    ByVal SO_OrderQty As String,  _
                    ByVal SO_NoSendQty As String,  _
                    ByVal SO_Completion As String,  _
                    ByVal SO_Remark As String,  _
                    ByVal SO_Gauge As String,  _
                    ByVal CO_ID As String,  _
                    ByVal SO_State As String,  _
                    ByVal SO_CheckDate As String,  _
                    ByVal SO_CheckUserID As String,  _
                    ByVal SO_Check As String,  _
                    ByVal SO_AddUserID As String,  _
                    ByVal SO_AddDate As String,  _
                    ByVal SO_ModifyUserID As String,  _
                    ByVal SO_ModifyDate As String,  _
                    ByVal SO_CheckRemark As String,  _
                    ByVal SO_CreateDate As String,  _
                    ByVal SO_Rank As String,  _
                    ByVal M_Name As String,  _
                    ByVal SO_CheckUserName As String,  _
                    ByVal SO_AddUserName As String) As SampleOrdersMainRow
            Dim rowSampleOrdersMainRow As SampleOrdersMainRow = CType(Me.NewRow,SampleOrdersMainRow)
            Dim columnValuesArray() As Object = New Object() {AutoID, SO_ID, SO_No, SO_CusterID, SO_CusterPO, SO_CusterNo, PM_M_Code, M_Code, SO_SendDate, SO_PoDate, SO_OrderQty, SO_NoSendQty, SO_Completion, SO_Remark, SO_Gauge, CO_ID, SO_State, SO_CheckDate, SO_CheckUserID, SO_Check, SO_AddUserID, SO_AddDate, SO_ModifyUserID, SO_ModifyDate, SO_CheckRemark, SO_CreateDate, SO_Rank, M_Name, SO_CheckUserName, SO_AddUserName}
            rowSampleOrdersMainRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSampleOrdersMainRow)
            Return rowSampleOrdersMainRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SampleOrdersMainDataTable = CType(MyBase.Clone,SampleOrdersMainDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SampleOrdersMainDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAutoID = MyBase.Columns("AutoID")
            Me.columnSO_ID = MyBase.Columns("SO_ID")
            Me.columnSO_No = MyBase.Columns("SO_No")
            Me.columnSO_CusterID = MyBase.Columns("SO_CusterID")
            Me.columnSO_CusterPO = MyBase.Columns("SO_CusterPO")
            Me.columnSO_CusterNo = MyBase.Columns("SO_CusterNo")
            Me.columnPM_M_Code = MyBase.Columns("PM_M_Code")
            Me.columnM_Code = MyBase.Columns("M_Code")
            Me.columnSO_SendDate = MyBase.Columns("SO_SendDate")
            Me.columnSO_PoDate = MyBase.Columns("SO_PoDate")
            Me.columnSO_OrderQty = MyBase.Columns("SO_OrderQty")
            Me.columnSO_NoSendQty = MyBase.Columns("SO_NoSendQty")
            Me.columnSO_Completion = MyBase.Columns("SO_Completion")
            Me.columnSO_Remark = MyBase.Columns("SO_Remark")
            Me.columnSO_Gauge = MyBase.Columns("SO_Gauge")
            Me.columnCO_ID = MyBase.Columns("CO_ID")
            Me.columnSO_State = MyBase.Columns("SO_State")
            Me.columnSO_CheckDate = MyBase.Columns("SO_CheckDate")
            Me.columnSO_CheckUserID = MyBase.Columns("SO_CheckUserID")
            Me.columnSO_Check = MyBase.Columns("SO_Check")
            Me.columnSO_AddUserID = MyBase.Columns("SO_AddUserID")
            Me.columnSO_AddDate = MyBase.Columns("SO_AddDate")
            Me.columnSO_ModifyUserID = MyBase.Columns("SO_ModifyUserID")
            Me.columnSO_ModifyDate = MyBase.Columns("SO_ModifyDate")
            Me.columnSO_CheckRemark = MyBase.Columns("SO_CheckRemark")
            Me.columnSO_CreateDate = MyBase.Columns("SO_CreateDate")
            Me.columnSO_Rank = MyBase.Columns("SO_Rank")
            Me.columnM_Name = MyBase.Columns("M_Name")
            Me.columnSO_CheckUserName = MyBase.Columns("SO_CheckUserName")
            Me.columnSO_AddUserName = MyBase.Columns("SO_AddUserName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAutoID = New Global.System.Data.DataColumn("AutoID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAutoID)
            Me.columnSO_ID = New Global.System.Data.DataColumn("SO_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSO_ID)
            Me.columnSO_No = New Global.System.Data.DataColumn("SO_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSO_No)
            Me.columnSO_CusterID = New Global.System.Data.DataColumn("SO_CusterID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSO_CusterID)
            Me.columnSO_CusterPO = New Global.System.Data.DataColumn("SO_CusterPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSO_CusterPO)
            Me.columnSO_CusterNo = New Global.System.Data.DataColumn("SO_CusterNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSO_CusterNo)
            Me.columnPM_M_Code = New Global.System.Data.DataColumn("PM_M_Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPM_M_Code)
            Me.columnM_Code = New Global.System.Data.DataColumn("M_Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_Code)
            Me.columnSO_SendDate = New Global.System.Data.DataColumn("SO_SendDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSO_SendDate)
            Me.columnSO_PoDate = New Global.System.Data.DataColumn("SO_PoDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSO_PoDate)
            Me.columnSO_OrderQty = New Global.System.Data.DataColumn("SO_OrderQty", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSO_OrderQty)
            Me.columnSO_NoSendQty = New Global.System.Data.DataColumn("SO_NoSendQty", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSO_NoSendQty)
            Me.columnSO_Completion = New Global.System.Data.DataColumn("SO_Completion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSO_Completion)
            Me.columnSO_Remark = New Global.System.Data.DataColumn("SO_Remark", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSO_Remark)
            Me.columnSO_Gauge = New Global.System.Data.DataColumn("SO_Gauge", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSO_Gauge)
            Me.columnCO_ID = New Global.System.Data.DataColumn("CO_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCO_ID)
            Me.columnSO_State = New Global.System.Data.DataColumn("SO_State", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSO_State)
            Me.columnSO_CheckDate = New Global.System.Data.DataColumn("SO_CheckDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSO_CheckDate)
            Me.columnSO_CheckUserID = New Global.System.Data.DataColumn("SO_CheckUserID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSO_CheckUserID)
            Me.columnSO_Check = New Global.System.Data.DataColumn("SO_Check", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSO_Check)
            Me.columnSO_AddUserID = New Global.System.Data.DataColumn("SO_AddUserID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSO_AddUserID)
            Me.columnSO_AddDate = New Global.System.Data.DataColumn("SO_AddDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSO_AddDate)
            Me.columnSO_ModifyUserID = New Global.System.Data.DataColumn("SO_ModifyUserID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSO_ModifyUserID)
            Me.columnSO_ModifyDate = New Global.System.Data.DataColumn("SO_ModifyDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSO_ModifyDate)
            Me.columnSO_CheckRemark = New Global.System.Data.DataColumn("SO_CheckRemark", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSO_CheckRemark)
            Me.columnSO_CreateDate = New Global.System.Data.DataColumn("SO_CreateDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSO_CreateDate)
            Me.columnSO_Rank = New Global.System.Data.DataColumn("SO_Rank", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSO_Rank)
            Me.columnM_Name = New Global.System.Data.DataColumn("M_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_Name)
            Me.columnSO_CheckUserName = New Global.System.Data.DataColumn("SO_CheckUserName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSO_CheckUserName)
            Me.columnSO_AddUserName = New Global.System.Data.DataColumn("SO_AddUserName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSO_AddUserName)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSampleOrdersMainRow() As SampleOrdersMainRow
            Return CType(Me.NewRow,SampleOrdersMainRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SampleOrdersMainRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SampleOrdersMainRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SampleOrdersMainRowChangedEvent) Is Nothing) Then
                RaiseEvent SampleOrdersMainRowChanged(Me, New SampleOrdersMainRowChangeEvent(CType(e.Row,SampleOrdersMainRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SampleOrdersMainRowChangingEvent) Is Nothing) Then
                RaiseEvent SampleOrdersMainRowChanging(Me, New SampleOrdersMainRowChangeEvent(CType(e.Row,SampleOrdersMainRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SampleOrdersMainRowDeletedEvent) Is Nothing) Then
                RaiseEvent SampleOrdersMainRowDeleted(Me, New SampleOrdersMainRowChangeEvent(CType(e.Row,SampleOrdersMainRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SampleOrdersMainRowDeletingEvent) Is Nothing) Then
                RaiseEvent SampleOrdersMainRowDeleting(Me, New SampleOrdersMainRowChangeEvent(CType(e.Row,SampleOrdersMainRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSampleOrdersMainRow(ByVal row As SampleOrdersMainRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SampleOrders = New SampleOrders
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SampleOrdersMainDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SampleOrdersSubDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAutoID As Global.System.Data.DataColumn
        
        Private columnSO_ID As Global.System.Data.DataColumn
        
        Private columnSS_Edition As Global.System.Data.DataColumn
        
        Private columnPM_M_Code As Global.System.Data.DataColumn
        
        Private columnM_Code As Global.System.Data.DataColumn
        
        Private columnSS_OrderQty As Global.System.Data.DataColumn
        
        Private columnSWI_Qty As Global.System.Data.DataColumn
        
        Private columnSS_Price As Global.System.Data.DataColumn
        
        Private columnSS_Remark As Global.System.Data.DataColumn
        
        Private columnCO_ID As Global.System.Data.DataColumn
        
        Private columnSO_No As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SampleOrdersSub"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AutoIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAutoID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SO_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSO_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SS_EditionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSS_Edition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PM_M_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPM_M_Code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_Code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SS_OrderQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSS_OrderQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SWI_QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSWI_Qty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SS_PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSS_Price
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SS_RemarkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSS_Remark
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CO_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCO_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SO_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSO_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SampleOrdersSubRow
            Get
                Return CType(Me.Rows(index),SampleOrdersSubRow)
            End Get
        End Property
        
        Public Event SampleOrdersSubRowChanging As SampleOrdersSubRowChangeEventHandler
        
        Public Event SampleOrdersSubRowChanged As SampleOrdersSubRowChangeEventHandler
        
        Public Event SampleOrdersSubRowDeleting As SampleOrdersSubRowChangeEventHandler
        
        Public Event SampleOrdersSubRowDeleted As SampleOrdersSubRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSampleOrdersSubRow(ByVal row As SampleOrdersSubRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSampleOrdersSubRow(ByVal AutoID As String, ByVal SO_ID As String, ByVal SS_Edition As String, ByVal PM_M_Code As String, ByVal M_Code As String, ByVal SS_OrderQty As String, ByVal SWI_Qty As String, ByVal SS_Price As String, ByVal SS_Remark As String, ByVal CO_ID As String, ByVal SO_No As String) As SampleOrdersSubRow
            Dim rowSampleOrdersSubRow As SampleOrdersSubRow = CType(Me.NewRow,SampleOrdersSubRow)
            Dim columnValuesArray() As Object = New Object() {AutoID, SO_ID, SS_Edition, PM_M_Code, M_Code, SS_OrderQty, SWI_Qty, SS_Price, SS_Remark, CO_ID, SO_No}
            rowSampleOrdersSubRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSampleOrdersSubRow)
            Return rowSampleOrdersSubRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SampleOrdersSubDataTable = CType(MyBase.Clone,SampleOrdersSubDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SampleOrdersSubDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAutoID = MyBase.Columns("AutoID")
            Me.columnSO_ID = MyBase.Columns("SO_ID")
            Me.columnSS_Edition = MyBase.Columns("SS_Edition")
            Me.columnPM_M_Code = MyBase.Columns("PM_M_Code")
            Me.columnM_Code = MyBase.Columns("M_Code")
            Me.columnSS_OrderQty = MyBase.Columns("SS_OrderQty")
            Me.columnSWI_Qty = MyBase.Columns("SWI_Qty")
            Me.columnSS_Price = MyBase.Columns("SS_Price")
            Me.columnSS_Remark = MyBase.Columns("SS_Remark")
            Me.columnCO_ID = MyBase.Columns("CO_ID")
            Me.columnSO_No = MyBase.Columns("SO_No")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAutoID = New Global.System.Data.DataColumn("AutoID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAutoID)
            Me.columnSO_ID = New Global.System.Data.DataColumn("SO_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSO_ID)
            Me.columnSS_Edition = New Global.System.Data.DataColumn("SS_Edition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSS_Edition)
            Me.columnPM_M_Code = New Global.System.Data.DataColumn("PM_M_Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPM_M_Code)
            Me.columnM_Code = New Global.System.Data.DataColumn("M_Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_Code)
            Me.columnSS_OrderQty = New Global.System.Data.DataColumn("SS_OrderQty", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSS_OrderQty)
            Me.columnSWI_Qty = New Global.System.Data.DataColumn("SWI_Qty", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSWI_Qty)
            Me.columnSS_Price = New Global.System.Data.DataColumn("SS_Price", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSS_Price)
            Me.columnSS_Remark = New Global.System.Data.DataColumn("SS_Remark", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSS_Remark)
            Me.columnCO_ID = New Global.System.Data.DataColumn("CO_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCO_ID)
            Me.columnSO_No = New Global.System.Data.DataColumn("SO_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSO_No)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSampleOrdersSubRow() As SampleOrdersSubRow
            Return CType(Me.NewRow,SampleOrdersSubRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SampleOrdersSubRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SampleOrdersSubRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SampleOrdersSubRowChangedEvent) Is Nothing) Then
                RaiseEvent SampleOrdersSubRowChanged(Me, New SampleOrdersSubRowChangeEvent(CType(e.Row,SampleOrdersSubRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SampleOrdersSubRowChangingEvent) Is Nothing) Then
                RaiseEvent SampleOrdersSubRowChanging(Me, New SampleOrdersSubRowChangeEvent(CType(e.Row,SampleOrdersSubRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SampleOrdersSubRowDeletedEvent) Is Nothing) Then
                RaiseEvent SampleOrdersSubRowDeleted(Me, New SampleOrdersSubRowChangeEvent(CType(e.Row,SampleOrdersSubRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SampleOrdersSubRowDeletingEvent) Is Nothing) Then
                RaiseEvent SampleOrdersSubRowDeleting(Me, New SampleOrdersSubRowChangeEvent(CType(e.Row,SampleOrdersSubRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSampleOrdersSubRow(ByVal row As SampleOrdersSubRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SampleOrders = New SampleOrders
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SampleOrdersSubDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SampleWareInventoryDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAutoID As Global.System.Data.DataColumn
        
        Private columnPM_M_Code As Global.System.Data.DataColumn
        
        Private columnM_Code As Global.System.Data.DataColumn
        
        Private columnPS_NO As Global.System.Data.DataColumn
        
        Private columnSWI_Qty As Global.System.Data.DataColumn
        
        Private columnD_ID As Global.System.Data.DataColumn
        
        Private columnPS_Name As Global.System.Data.DataColumn
        
        Private columnD_Dep As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SampleWareInventory"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AutoIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAutoID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PM_M_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPM_M_Code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_Code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PS_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPS_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SWI_QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSWI_Qty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property D_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnD_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PS_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPS_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property D_DepColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnD_Dep
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SampleWareInventoryRow
            Get
                Return CType(Me.Rows(index),SampleWareInventoryRow)
            End Get
        End Property
        
        Public Event SampleWareInventoryRowChanging As SampleWareInventoryRowChangeEventHandler
        
        Public Event SampleWareInventoryRowChanged As SampleWareInventoryRowChangeEventHandler
        
        Public Event SampleWareInventoryRowDeleting As SampleWareInventoryRowChangeEventHandler
        
        Public Event SampleWareInventoryRowDeleted As SampleWareInventoryRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSampleWareInventoryRow(ByVal row As SampleWareInventoryRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSampleWareInventoryRow(ByVal AutoID As String, ByVal PM_M_Code As String, ByVal M_Code As String, ByVal PS_NO As String, ByVal SWI_Qty As String, ByVal D_ID As String, ByVal PS_Name As String, ByVal D_Dep As String) As SampleWareInventoryRow
            Dim rowSampleWareInventoryRow As SampleWareInventoryRow = CType(Me.NewRow,SampleWareInventoryRow)
            Dim columnValuesArray() As Object = New Object() {AutoID, PM_M_Code, M_Code, PS_NO, SWI_Qty, D_ID, PS_Name, D_Dep}
            rowSampleWareInventoryRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSampleWareInventoryRow)
            Return rowSampleWareInventoryRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SampleWareInventoryDataTable = CType(MyBase.Clone,SampleWareInventoryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SampleWareInventoryDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAutoID = MyBase.Columns("AutoID")
            Me.columnPM_M_Code = MyBase.Columns("PM_M_Code")
            Me.columnM_Code = MyBase.Columns("M_Code")
            Me.columnPS_NO = MyBase.Columns("PS_NO")
            Me.columnSWI_Qty = MyBase.Columns("SWI_Qty")
            Me.columnD_ID = MyBase.Columns("D_ID")
            Me.columnPS_Name = MyBase.Columns("PS_Name")
            Me.columnD_Dep = MyBase.Columns("D_Dep")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAutoID = New Global.System.Data.DataColumn("AutoID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAutoID)
            Me.columnPM_M_Code = New Global.System.Data.DataColumn("PM_M_Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPM_M_Code)
            Me.columnM_Code = New Global.System.Data.DataColumn("M_Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_Code)
            Me.columnPS_NO = New Global.System.Data.DataColumn("PS_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPS_NO)
            Me.columnSWI_Qty = New Global.System.Data.DataColumn("SWI_Qty", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSWI_Qty)
            Me.columnD_ID = New Global.System.Data.DataColumn("D_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnD_ID)
            Me.columnPS_Name = New Global.System.Data.DataColumn("PS_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPS_Name)
            Me.columnD_Dep = New Global.System.Data.DataColumn("D_Dep", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnD_Dep)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSampleWareInventoryRow() As SampleWareInventoryRow
            Return CType(Me.NewRow,SampleWareInventoryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SampleWareInventoryRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SampleWareInventoryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SampleWareInventoryRowChangedEvent) Is Nothing) Then
                RaiseEvent SampleWareInventoryRowChanged(Me, New SampleWareInventoryRowChangeEvent(CType(e.Row,SampleWareInventoryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SampleWareInventoryRowChangingEvent) Is Nothing) Then
                RaiseEvent SampleWareInventoryRowChanging(Me, New SampleWareInventoryRowChangeEvent(CType(e.Row,SampleWareInventoryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SampleWareInventoryRowDeletedEvent) Is Nothing) Then
                RaiseEvent SampleWareInventoryRowDeleted(Me, New SampleWareInventoryRowChangeEvent(CType(e.Row,SampleWareInventoryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SampleWareInventoryRowDeletingEvent) Is Nothing) Then
                RaiseEvent SampleWareInventoryRowDeleting(Me, New SampleWareInventoryRowChangeEvent(CType(e.Row,SampleWareInventoryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSampleWareInventoryRow(ByVal row As SampleWareInventoryRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SampleOrders = New SampleOrders
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SampleWareInventoryDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SampleCollectionDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCode_ID As Global.System.Data.DataColumn
        
        Private columnStatusTypeName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SampleCollection"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Code_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCode_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusTypeNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatusTypeName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SampleCollectionRow
            Get
                Return CType(Me.Rows(index),SampleCollectionRow)
            End Get
        End Property
        
        Public Event SampleCollectionRowChanging As SampleCollectionRowChangeEventHandler
        
        Public Event SampleCollectionRowChanged As SampleCollectionRowChangeEventHandler
        
        Public Event SampleCollectionRowDeleting As SampleCollectionRowChangeEventHandler
        
        Public Event SampleCollectionRowDeleted As SampleCollectionRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSampleCollectionRow(ByVal row As SampleCollectionRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSampleCollectionRow(ByVal Code_ID As String, ByVal StatusTypeName As String) As SampleCollectionRow
            Dim rowSampleCollectionRow As SampleCollectionRow = CType(Me.NewRow,SampleCollectionRow)
            Dim columnValuesArray() As Object = New Object() {Code_ID, StatusTypeName}
            rowSampleCollectionRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSampleCollectionRow)
            Return rowSampleCollectionRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SampleCollectionDataTable = CType(MyBase.Clone,SampleCollectionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SampleCollectionDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCode_ID = MyBase.Columns("Code_ID")
            Me.columnStatusTypeName = MyBase.Columns("StatusTypeName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCode_ID = New Global.System.Data.DataColumn("Code_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCode_ID)
            Me.columnStatusTypeName = New Global.System.Data.DataColumn("StatusTypeName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatusTypeName)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSampleCollectionRow() As SampleCollectionRow
            Return CType(Me.NewRow,SampleCollectionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SampleCollectionRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SampleCollectionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SampleCollectionRowChangedEvent) Is Nothing) Then
                RaiseEvent SampleCollectionRowChanged(Me, New SampleCollectionRowChangeEvent(CType(e.Row,SampleCollectionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SampleCollectionRowChangingEvent) Is Nothing) Then
                RaiseEvent SampleCollectionRowChanging(Me, New SampleCollectionRowChangeEvent(CType(e.Row,SampleCollectionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SampleCollectionRowDeletedEvent) Is Nothing) Then
                RaiseEvent SampleCollectionRowDeleted(Me, New SampleCollectionRowChangeEvent(CType(e.Row,SampleCollectionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SampleCollectionRowDeletingEvent) Is Nothing) Then
                RaiseEvent SampleCollectionRowDeleting(Me, New SampleCollectionRowChangeEvent(CType(e.Row,SampleCollectionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSampleCollectionRow(ByVal row As SampleCollectionRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SampleOrders = New SampleOrders
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SampleCollectionDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SampleOrdersMainRow
        Inherits Global.System.Data.DataRow
        
        Private tableSampleOrdersMain As SampleOrdersMainDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSampleOrdersMain = CType(Me.Table,SampleOrdersMainDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AutoID() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleOrdersMain.AutoIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleOrdersMain' 中資料行 'AutoID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleOrdersMain.AutoIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SO_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleOrdersMain.SO_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleOrdersMain' 中資料行 'SO_ID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleOrdersMain.SO_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SO_No() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleOrdersMain.SO_NoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleOrdersMain' 中資料行 'SO_No' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleOrdersMain.SO_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SO_CusterID() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleOrdersMain.SO_CusterIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleOrdersMain' 中資料行 'SO_CusterID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleOrdersMain.SO_CusterIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SO_CusterPO() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleOrdersMain.SO_CusterPOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleOrdersMain' 中資料行 'SO_CusterPO' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleOrdersMain.SO_CusterPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SO_CusterNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleOrdersMain.SO_CusterNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleOrdersMain' 中資料行 'SO_CusterNo' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleOrdersMain.SO_CusterNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PM_M_Code() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleOrdersMain.PM_M_CodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleOrdersMain' 中資料行 'PM_M_Code' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleOrdersMain.PM_M_CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M_Code() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleOrdersMain.M_CodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleOrdersMain' 中資料行 'M_Code' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleOrdersMain.M_CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SO_SendDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleOrdersMain.SO_SendDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleOrdersMain' 中資料行 'SO_SendDate' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleOrdersMain.SO_SendDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SO_PoDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleOrdersMain.SO_PoDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleOrdersMain' 中資料行 'SO_PoDate' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleOrdersMain.SO_PoDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SO_OrderQty() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleOrdersMain.SO_OrderQtyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleOrdersMain' 中資料行 'SO_OrderQty' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleOrdersMain.SO_OrderQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SO_NoSendQty() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleOrdersMain.SO_NoSendQtyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleOrdersMain' 中資料行 'SO_NoSendQty' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleOrdersMain.SO_NoSendQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SO_Completion() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleOrdersMain.SO_CompletionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleOrdersMain' 中資料行 'SO_Completion' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleOrdersMain.SO_CompletionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SO_Remark() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleOrdersMain.SO_RemarkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleOrdersMain' 中資料行 'SO_Remark' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleOrdersMain.SO_RemarkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SO_Gauge() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleOrdersMain.SO_GaugeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleOrdersMain' 中資料行 'SO_Gauge' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleOrdersMain.SO_GaugeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CO_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleOrdersMain.CO_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleOrdersMain' 中資料行 'CO_ID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleOrdersMain.CO_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SO_State() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleOrdersMain.SO_StateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleOrdersMain' 中資料行 'SO_State' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleOrdersMain.SO_StateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SO_CheckDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleOrdersMain.SO_CheckDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleOrdersMain' 中資料行 'SO_CheckDate' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleOrdersMain.SO_CheckDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SO_CheckUserID() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleOrdersMain.SO_CheckUserIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleOrdersMain' 中資料行 'SO_CheckUserID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleOrdersMain.SO_CheckUserIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SO_Check() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleOrdersMain.SO_CheckColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleOrdersMain' 中資料行 'SO_Check' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleOrdersMain.SO_CheckColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SO_AddUserID() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleOrdersMain.SO_AddUserIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleOrdersMain' 中資料行 'SO_AddUserID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleOrdersMain.SO_AddUserIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SO_AddDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleOrdersMain.SO_AddDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleOrdersMain' 中資料行 'SO_AddDate' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleOrdersMain.SO_AddDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SO_ModifyUserID() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleOrdersMain.SO_ModifyUserIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleOrdersMain' 中資料行 'SO_ModifyUserID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleOrdersMain.SO_ModifyUserIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SO_ModifyDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleOrdersMain.SO_ModifyDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleOrdersMain' 中資料行 'SO_ModifyDate' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleOrdersMain.SO_ModifyDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SO_CheckRemark() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleOrdersMain.SO_CheckRemarkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleOrdersMain' 中資料行 'SO_CheckRemark' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleOrdersMain.SO_CheckRemarkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SO_CreateDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleOrdersMain.SO_CreateDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleOrdersMain' 中資料行 'SO_CreateDate' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleOrdersMain.SO_CreateDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SO_Rank() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleOrdersMain.SO_RankColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleOrdersMain' 中資料行 'SO_Rank' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleOrdersMain.SO_RankColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleOrdersMain.M_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleOrdersMain' 中資料行 'M_Name' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleOrdersMain.M_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SO_CheckUserName() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleOrdersMain.SO_CheckUserNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleOrdersMain' 中資料行 'SO_CheckUserName' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleOrdersMain.SO_CheckUserNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SO_AddUserName() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleOrdersMain.SO_AddUserNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleOrdersMain' 中資料行 'SO_AddUserName' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleOrdersMain.SO_AddUserNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAutoIDNull() As Boolean
            Return Me.IsNull(Me.tableSampleOrdersMain.AutoIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAutoIDNull()
            Me(Me.tableSampleOrdersMain.AutoIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSO_IDNull() As Boolean
            Return Me.IsNull(Me.tableSampleOrdersMain.SO_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSO_IDNull()
            Me(Me.tableSampleOrdersMain.SO_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSO_NoNull() As Boolean
            Return Me.IsNull(Me.tableSampleOrdersMain.SO_NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSO_NoNull()
            Me(Me.tableSampleOrdersMain.SO_NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSO_CusterIDNull() As Boolean
            Return Me.IsNull(Me.tableSampleOrdersMain.SO_CusterIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSO_CusterIDNull()
            Me(Me.tableSampleOrdersMain.SO_CusterIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSO_CusterPONull() As Boolean
            Return Me.IsNull(Me.tableSampleOrdersMain.SO_CusterPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSO_CusterPONull()
            Me(Me.tableSampleOrdersMain.SO_CusterPOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSO_CusterNoNull() As Boolean
            Return Me.IsNull(Me.tableSampleOrdersMain.SO_CusterNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSO_CusterNoNull()
            Me(Me.tableSampleOrdersMain.SO_CusterNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPM_M_CodeNull() As Boolean
            Return Me.IsNull(Me.tableSampleOrdersMain.PM_M_CodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPM_M_CodeNull()
            Me(Me.tableSampleOrdersMain.PM_M_CodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM_CodeNull() As Boolean
            Return Me.IsNull(Me.tableSampleOrdersMain.M_CodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM_CodeNull()
            Me(Me.tableSampleOrdersMain.M_CodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSO_SendDateNull() As Boolean
            Return Me.IsNull(Me.tableSampleOrdersMain.SO_SendDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSO_SendDateNull()
            Me(Me.tableSampleOrdersMain.SO_SendDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSO_PoDateNull() As Boolean
            Return Me.IsNull(Me.tableSampleOrdersMain.SO_PoDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSO_PoDateNull()
            Me(Me.tableSampleOrdersMain.SO_PoDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSO_OrderQtyNull() As Boolean
            Return Me.IsNull(Me.tableSampleOrdersMain.SO_OrderQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSO_OrderQtyNull()
            Me(Me.tableSampleOrdersMain.SO_OrderQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSO_NoSendQtyNull() As Boolean
            Return Me.IsNull(Me.tableSampleOrdersMain.SO_NoSendQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSO_NoSendQtyNull()
            Me(Me.tableSampleOrdersMain.SO_NoSendQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSO_CompletionNull() As Boolean
            Return Me.IsNull(Me.tableSampleOrdersMain.SO_CompletionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSO_CompletionNull()
            Me(Me.tableSampleOrdersMain.SO_CompletionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSO_RemarkNull() As Boolean
            Return Me.IsNull(Me.tableSampleOrdersMain.SO_RemarkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSO_RemarkNull()
            Me(Me.tableSampleOrdersMain.SO_RemarkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSO_GaugeNull() As Boolean
            Return Me.IsNull(Me.tableSampleOrdersMain.SO_GaugeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSO_GaugeNull()
            Me(Me.tableSampleOrdersMain.SO_GaugeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCO_IDNull() As Boolean
            Return Me.IsNull(Me.tableSampleOrdersMain.CO_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCO_IDNull()
            Me(Me.tableSampleOrdersMain.CO_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSO_StateNull() As Boolean
            Return Me.IsNull(Me.tableSampleOrdersMain.SO_StateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSO_StateNull()
            Me(Me.tableSampleOrdersMain.SO_StateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSO_CheckDateNull() As Boolean
            Return Me.IsNull(Me.tableSampleOrdersMain.SO_CheckDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSO_CheckDateNull()
            Me(Me.tableSampleOrdersMain.SO_CheckDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSO_CheckUserIDNull() As Boolean
            Return Me.IsNull(Me.tableSampleOrdersMain.SO_CheckUserIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSO_CheckUserIDNull()
            Me(Me.tableSampleOrdersMain.SO_CheckUserIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSO_CheckNull() As Boolean
            Return Me.IsNull(Me.tableSampleOrdersMain.SO_CheckColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSO_CheckNull()
            Me(Me.tableSampleOrdersMain.SO_CheckColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSO_AddUserIDNull() As Boolean
            Return Me.IsNull(Me.tableSampleOrdersMain.SO_AddUserIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSO_AddUserIDNull()
            Me(Me.tableSampleOrdersMain.SO_AddUserIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSO_AddDateNull() As Boolean
            Return Me.IsNull(Me.tableSampleOrdersMain.SO_AddDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSO_AddDateNull()
            Me(Me.tableSampleOrdersMain.SO_AddDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSO_ModifyUserIDNull() As Boolean
            Return Me.IsNull(Me.tableSampleOrdersMain.SO_ModifyUserIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSO_ModifyUserIDNull()
            Me(Me.tableSampleOrdersMain.SO_ModifyUserIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSO_ModifyDateNull() As Boolean
            Return Me.IsNull(Me.tableSampleOrdersMain.SO_ModifyDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSO_ModifyDateNull()
            Me(Me.tableSampleOrdersMain.SO_ModifyDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSO_CheckRemarkNull() As Boolean
            Return Me.IsNull(Me.tableSampleOrdersMain.SO_CheckRemarkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSO_CheckRemarkNull()
            Me(Me.tableSampleOrdersMain.SO_CheckRemarkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSO_CreateDateNull() As Boolean
            Return Me.IsNull(Me.tableSampleOrdersMain.SO_CreateDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSO_CreateDateNull()
            Me(Me.tableSampleOrdersMain.SO_CreateDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSO_RankNull() As Boolean
            Return Me.IsNull(Me.tableSampleOrdersMain.SO_RankColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSO_RankNull()
            Me(Me.tableSampleOrdersMain.SO_RankColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM_NameNull() As Boolean
            Return Me.IsNull(Me.tableSampleOrdersMain.M_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM_NameNull()
            Me(Me.tableSampleOrdersMain.M_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSO_CheckUserNameNull() As Boolean
            Return Me.IsNull(Me.tableSampleOrdersMain.SO_CheckUserNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSO_CheckUserNameNull()
            Me(Me.tableSampleOrdersMain.SO_CheckUserNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSO_AddUserNameNull() As Boolean
            Return Me.IsNull(Me.tableSampleOrdersMain.SO_AddUserNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSO_AddUserNameNull()
            Me(Me.tableSampleOrdersMain.SO_AddUserNameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SampleOrdersSubRow
        Inherits Global.System.Data.DataRow
        
        Private tableSampleOrdersSub As SampleOrdersSubDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSampleOrdersSub = CType(Me.Table,SampleOrdersSubDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AutoID() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleOrdersSub.AutoIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleOrdersSub' 中資料行 'AutoID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleOrdersSub.AutoIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SO_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleOrdersSub.SO_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleOrdersSub' 中資料行 'SO_ID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleOrdersSub.SO_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SS_Edition() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleOrdersSub.SS_EditionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleOrdersSub' 中資料行 'SS_Edition' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleOrdersSub.SS_EditionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PM_M_Code() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleOrdersSub.PM_M_CodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleOrdersSub' 中資料行 'PM_M_Code' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleOrdersSub.PM_M_CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M_Code() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleOrdersSub.M_CodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleOrdersSub' 中資料行 'M_Code' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleOrdersSub.M_CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SS_OrderQty() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleOrdersSub.SS_OrderQtyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleOrdersSub' 中資料行 'SS_OrderQty' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleOrdersSub.SS_OrderQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SWI_Qty() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleOrdersSub.SWI_QtyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleOrdersSub' 中資料行 'SWI_Qty' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleOrdersSub.SWI_QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SS_Price() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleOrdersSub.SS_PriceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleOrdersSub' 中資料行 'SS_Price' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleOrdersSub.SS_PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SS_Remark() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleOrdersSub.SS_RemarkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleOrdersSub' 中資料行 'SS_Remark' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleOrdersSub.SS_RemarkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CO_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleOrdersSub.CO_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleOrdersSub' 中資料行 'CO_ID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleOrdersSub.CO_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SO_No() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleOrdersSub.SO_NoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleOrdersSub' 中資料行 'SO_No' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleOrdersSub.SO_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAutoIDNull() As Boolean
            Return Me.IsNull(Me.tableSampleOrdersSub.AutoIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAutoIDNull()
            Me(Me.tableSampleOrdersSub.AutoIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSO_IDNull() As Boolean
            Return Me.IsNull(Me.tableSampleOrdersSub.SO_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSO_IDNull()
            Me(Me.tableSampleOrdersSub.SO_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSS_EditionNull() As Boolean
            Return Me.IsNull(Me.tableSampleOrdersSub.SS_EditionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSS_EditionNull()
            Me(Me.tableSampleOrdersSub.SS_EditionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPM_M_CodeNull() As Boolean
            Return Me.IsNull(Me.tableSampleOrdersSub.PM_M_CodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPM_M_CodeNull()
            Me(Me.tableSampleOrdersSub.PM_M_CodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM_CodeNull() As Boolean
            Return Me.IsNull(Me.tableSampleOrdersSub.M_CodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM_CodeNull()
            Me(Me.tableSampleOrdersSub.M_CodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSS_OrderQtyNull() As Boolean
            Return Me.IsNull(Me.tableSampleOrdersSub.SS_OrderQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSS_OrderQtyNull()
            Me(Me.tableSampleOrdersSub.SS_OrderQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSWI_QtyNull() As Boolean
            Return Me.IsNull(Me.tableSampleOrdersSub.SWI_QtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSWI_QtyNull()
            Me(Me.tableSampleOrdersSub.SWI_QtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSS_PriceNull() As Boolean
            Return Me.IsNull(Me.tableSampleOrdersSub.SS_PriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSS_PriceNull()
            Me(Me.tableSampleOrdersSub.SS_PriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSS_RemarkNull() As Boolean
            Return Me.IsNull(Me.tableSampleOrdersSub.SS_RemarkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSS_RemarkNull()
            Me(Me.tableSampleOrdersSub.SS_RemarkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCO_IDNull() As Boolean
            Return Me.IsNull(Me.tableSampleOrdersSub.CO_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCO_IDNull()
            Me(Me.tableSampleOrdersSub.CO_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSO_NoNull() As Boolean
            Return Me.IsNull(Me.tableSampleOrdersSub.SO_NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSO_NoNull()
            Me(Me.tableSampleOrdersSub.SO_NoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SampleWareInventoryRow
        Inherits Global.System.Data.DataRow
        
        Private tableSampleWareInventory As SampleWareInventoryDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSampleWareInventory = CType(Me.Table,SampleWareInventoryDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AutoID() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleWareInventory.AutoIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleWareInventory' 中資料行 'AutoID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleWareInventory.AutoIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PM_M_Code() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleWareInventory.PM_M_CodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleWareInventory' 中資料行 'PM_M_Code' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleWareInventory.PM_M_CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M_Code() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleWareInventory.M_CodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleWareInventory' 中資料行 'M_Code' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleWareInventory.M_CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PS_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleWareInventory.PS_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleWareInventory' 中資料行 'PS_NO' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleWareInventory.PS_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SWI_Qty() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleWareInventory.SWI_QtyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleWareInventory' 中資料行 'SWI_Qty' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleWareInventory.SWI_QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property D_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleWareInventory.D_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleWareInventory' 中資料行 'D_ID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleWareInventory.D_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PS_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleWareInventory.PS_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleWareInventory' 中資料行 'PS_Name' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleWareInventory.PS_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property D_Dep() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleWareInventory.D_DepColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleWareInventory' 中資料行 'D_Dep' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleWareInventory.D_DepColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAutoIDNull() As Boolean
            Return Me.IsNull(Me.tableSampleWareInventory.AutoIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAutoIDNull()
            Me(Me.tableSampleWareInventory.AutoIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPM_M_CodeNull() As Boolean
            Return Me.IsNull(Me.tableSampleWareInventory.PM_M_CodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPM_M_CodeNull()
            Me(Me.tableSampleWareInventory.PM_M_CodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM_CodeNull() As Boolean
            Return Me.IsNull(Me.tableSampleWareInventory.M_CodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM_CodeNull()
            Me(Me.tableSampleWareInventory.M_CodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPS_NONull() As Boolean
            Return Me.IsNull(Me.tableSampleWareInventory.PS_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPS_NONull()
            Me(Me.tableSampleWareInventory.PS_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSWI_QtyNull() As Boolean
            Return Me.IsNull(Me.tableSampleWareInventory.SWI_QtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSWI_QtyNull()
            Me(Me.tableSampleWareInventory.SWI_QtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsD_IDNull() As Boolean
            Return Me.IsNull(Me.tableSampleWareInventory.D_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetD_IDNull()
            Me(Me.tableSampleWareInventory.D_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPS_NameNull() As Boolean
            Return Me.IsNull(Me.tableSampleWareInventory.PS_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPS_NameNull()
            Me(Me.tableSampleWareInventory.PS_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsD_DepNull() As Boolean
            Return Me.IsNull(Me.tableSampleWareInventory.D_DepColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetD_DepNull()
            Me(Me.tableSampleWareInventory.D_DepColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SampleCollectionRow
        Inherits Global.System.Data.DataRow
        
        Private tableSampleCollection As SampleCollectionDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSampleCollection = CType(Me.Table,SampleCollectionDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Code_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleCollection.Code_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleCollection' 中資料行 'Code_ID' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleCollection.Code_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StatusTypeName() As String
            Get
                Try 
                    Return CType(Me(Me.tableSampleCollection.StatusTypeNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("資料表 'SampleCollection' 中資料行 'StatusTypeName' 的值是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableSampleCollection.StatusTypeNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCode_IDNull() As Boolean
            Return Me.IsNull(Me.tableSampleCollection.Code_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCode_IDNull()
            Me(Me.tableSampleCollection.Code_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusTypeNameNull() As Boolean
            Return Me.IsNull(Me.tableSampleCollection.StatusTypeNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusTypeNameNull()
            Me(Me.tableSampleCollection.StatusTypeNameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SampleOrdersMainRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SampleOrdersMainRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SampleOrdersMainRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SampleOrdersMainRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SampleOrdersSubRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SampleOrdersSubRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SampleOrdersSubRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SampleOrdersSubRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SampleWareInventoryRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SampleWareInventoryRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SampleWareInventoryRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SampleWareInventoryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SampleCollectionRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SampleCollectionRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SampleCollectionRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SampleCollectionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
